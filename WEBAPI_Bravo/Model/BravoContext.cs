using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WEBAPI_Bravo.Model;

#nullable disable

namespace WebApiBravo.Models
{
    public partial class BravoContext : DbContext
    {
        public BravoContext()
        {
        }

        public BravoContext(DbContextOptions<BravoContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AgentTemp> AgentTemps { get; set; }
        public virtual DbSet<AgentTempEmail> AgentTempEmails { get; set; }
        public virtual DbSet<AgentTempSosialMedium> AgentTempSosialMedia { get; set; }
        public virtual DbSet<AhuUideskTrmEmailAutoReply> AhuUideskTrmEmailAutoReplies { get; set; }
        public virtual DbSet<AhuUideskTrmFormatResponseEmail> AhuUideskTrmFormatResponseEmails { get; set; }
        public virtual DbSet<AhuUideskTrmGreetingScript> AhuUideskTrmGreetingScripts { get; set; }
        public virtual DbSet<AhuUideskTrxAssignEmailLog> AhuUideskTrxAssignEmailLogs { get; set; }
        public virtual DbSet<AhuUideskTrxConfigurasi> AhuUideskTrxConfigurasis { get; set; }
        public virtual DbSet<AppemailLogActivity> AppemailLogActivities { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<AppsUideskApplication> AppsUideskApplications { get; set; }
        public virtual DbSet<AppsUideskCompany> AppsUideskCompanies { get; set; }
        public virtual DbSet<AppsUideskInteraction> AppsUideskInteractions { get; set; }
        public virtual DbSet<AppsUideskInteractionAttachment> AppsUideskInteractionAttachments { get; set; }
        public virtual DbSet<AppsUideskPartner> AppsUideskPartners { get; set; }
        public virtual DbSet<AppsUideskQuotation> AppsUideskQuotations { get; set; }
        public virtual DbSet<AppsUideskQuotationAttachment> AppsUideskQuotationAttachments { get; set; }
        public virtual DbSet<AppsUideskTransaksi> AppsUideskTransaksis { get; set; }
        public virtual DbSet<AppsUideskTransaksiAttachment> AppsUideskTransaksiAttachments { get; set; }
        public virtual DbSet<AssetsAsset> AssetsAssets { get; set; }
        public virtual DbSet<AssetsBill> AssetsBills { get; set; }
        public virtual DbSet<AssetsBorrowRequest> AssetsBorrowRequests { get; set; }
        public virtual DbSet<AssetsDataCustomer> AssetsDataCustomers { get; set; }
        public virtual DbSet<AssetsDepartment> AssetsDepartments { get; set; }
        public virtual DbSet<AssetsRepairRequest> AssetsRepairRequests { get; set; }
        public virtual DbSet<AssetsScrapRequest> AssetsScrapRequests { get; set; }
        public virtual DbSet<AssetsUser> AssetsUsers { get; set; }
        public virtual DbSet<BtnCampaign> BtnCampaigns { get; set; }
        public virtual DbSet<BraCustomerType> BraCustomerTypes { get; set; }
        public virtual DbSet<BtnDataKantor> BtnDataKantors { get; set; }
        public virtual DbSet<BtnDataKantorOld> BtnDataKantorOlds { get; set; }
        public virtual DbSet<BtnHistoryBlandingProduct> BtnHistoryBlandingProducts { get; set; }
        public virtual DbSet<BtnJenisNasabah> BtnJenisNasabahs { get; set; }
        public virtual DbSet<BtnMBi> BtnMBis { get; set; }
        public virtual DbSet<BtnMOjk> BtnMOjks { get; set; }
        public virtual DbSet<BtnMPenyebab> BtnMPenyebabs { get; set; }
        public virtual DbSet<BtnNomorRekening> BtnNomorRekenings { get; set; }
        public virtual DbSet<BtnParamNotif> BtnParamNotifs { get; set; }
        public virtual DbSet<BtnParamSla> BtnParamSlas { get; set; }
        public virtual DbSet<BtnPenyebab> BtnPenyebabs { get; set; }
        public virtual DbSet<BtnReasonCall> BtnReasonCalls { get; set; }
        public virtual DbSet<BtnRptBiojk> BtnRptBiojks { get; set; }
        public virtual DbSet<BtnSkalaPriorita> BtnSkalaPrioritas { get; set; }
        public virtual DbSet<BtnStatusPelapor> BtnStatusPelapors { get; set; }
        public virtual DbSet<BtnSumberInformasi> BtnSumberInformasis { get; set; }
        public virtual DbSet<BtnTrxAttchment> BtnTrxAttchments { get; set; }
        public virtual DbSet<BtnTrxTicketFile> BtnTrxTicketFiles { get; set; }
        public virtual DbSet<BtnTrxTticket> BtnTrxTtickets { get; set; }
        public virtual DbSet<CampaignsDataArchive> CampaignsDataArchives { get; set; }
        public virtual DbSet<CampaignsDataDetail> CampaignsDataDetails { get; set; }
        public virtual DbSet<CampaignsDataReminder> CampaignsDataReminders { get; set; }
        public virtual DbSet<CampaignsDatum> CampaignsData { get; set; }
        public virtual DbSet<CampaignsHeader> CampaignsHeaders { get; set; }
        public virtual DbSet<CampaignsHeaderDetail> CampaignsHeaderDetails { get; set; }
        public virtual DbSet<CampaignsScript> CampaignsScripts { get; set; }
        public virtual DbSet<CantasTolRoadSegment> CantasTolRoadSegments { get; set; }
        public virtual DbSet<CdrGetWebhuk> CdrGetWebhuks { get; set; }
        public virtual DbSet<CollTrxDashboard> CollTrxDashboards { get; set; }
        public virtual DbSet<CollTrxDetail> CollTrxDetails { get; set; }
        public virtual DbSet<CollTrxDetailAttachment> CollTrxDetailAttachments { get; set; }
        public virtual DbSet<CollTrxHeader> CollTrxHeaders { get; set; }
        public virtual DbSet<CollTrxHistory> CollTrxHistories { get; set; }
        public virtual DbSet<CollTrxHistoryTagihan> CollTrxHistoryTagihans { get; set; }
        public virtual DbSet<CollTrxReport> CollTrxReports { get; set; }
        public virtual DbSet<ConfigFeatureUidesk> ConfigFeatureUidesks { get; set; }
        public virtual DbSet<CtiAuxcode> CtiAuxcodes { get; set; }
        public virtual DbSet<CtiCallLog> CtiCallLogs { get; set; }
        public virtual DbSet<CtiConfig> CtiConfigs { get; set; }
        public virtual DbSet<CtiGetWebhuk> CtiGetWebhuks { get; set; }
        public virtual DbSet<CtiRole> CtiRoles { get; set; }
        public virtual DbSet<CtiType> CtiTypes { get; set; }
        public virtual DbSet<CtiUser> CtiUsers { get; set; }
        public virtual DbSet<DaWeeklyDetail> DaWeeklyDetails { get; set; }
        public virtual DbSet<DaWeeklyMaster> DaWeeklyMasters { get; set; }
        public virtual DbSet<DataMasterPriority> DataMasterPriorities { get; set; }
        public virtual DbSet<DataMasterRoadtek> DataMasterRoadteks { get; set; }
        public virtual DbSet<DataMasterRoadtexSolutionLayer> DataMasterRoadtexSolutionLayers { get; set; }
        public virtual DbSet<DataMasterSolutionLayer1> DataMasterSolutionLayer1s { get; set; }
        public virtual DbSet<DatakelolaComment> DatakelolaComments { get; set; }
        public virtual DbSet<DatakelolaPost> DatakelolaPosts { get; set; }
        public virtual DbSet<DatakelolaPostMedium> DatakelolaPostMedia { get; set; }
        public virtual DbSet<DatakelolaUserProfile> DatakelolaUserProfiles { get; set; }
        public virtual DbSet<DatakelolaVAgent> DatakelolaVAgents { get; set; }
        public virtual DbSet<DatakelolaVAgenthandle> DatakelolaVAgenthandles { get; set; }
        public virtual DbSet<DatakelolaVChannelUser> DatakelolaVChannelUsers { get; set; }
        public virtual DbSet<DatakelolaVChatbody> DatakelolaVChatbodies { get; set; }
        public virtual DbSet<DatakelolaVChatheader> DatakelolaVChatheaders { get; set; }
        public virtual DbSet<DatakelolaVwTodayComment> DatakelolaVwTodayComments { get; set; }
        public virtual DbSet<Dept> Depts { get; set; }
        public virtual DbSet<EmailUserIn> EmailUserIns { get; set; }
        public virtual DbSet<FailedJob> FailedJobs { get; set; }
        public virtual DbSet<FeatureCustomRoleuser> FeatureCustomRoleusers { get; set; }
        public virtual DbSet<FeatureNotaInteraction> FeatureNotaInteractions { get; set; }
        public virtual DbSet<FeatureNotum> FeatureNota { get; set; }
        public virtual DbSet<GetWebhuk> GetWebhuks { get; set; }
        public virtual DbSet<GetWebhukIg> GetWebhukIgs { get; set; }
        public virtual DbSet<GetWebhukMultichat> GetWebhukMultichats { get; set; }
        public virtual DbSet<GetWebhukTw> GetWebhukTws { get; set; }
        public virtual DbSet<GetWebhukWa> GetWebhukWas { get; set; }
        public virtual DbSet<IccAssignEmailHistory> IccAssignEmailHistories { get; set; }
        public virtual DbSet<IccAssignOutboundCall> IccAssignOutboundCalls { get; set; }
        public virtual DbSet<IccAuxHistory> IccAuxHistories { get; set; }
        public virtual DbSet<IccCallTemp> IccCallTemps { get; set; }
        public virtual DbSet<IccChatHistoryQueue> IccChatHistoryQueues { get; set; }
        public virtual DbSet<IccEmailAddressPassword> IccEmailAddressPasswords { get; set; }
        public virtual DbSet<IccEmailBlastTemp> IccEmailBlastTemps { get; set; }
        public virtual DbSet<IccGroupCorporate> IccGroupCorporates { get; set; }
        public virtual DbSet<IccHistorySla> IccHistorySlas { get; set; }
        public virtual DbSet<IccLdapSetting> IccLdapSettings { get; set; }
        public virtual DbSet<IccLogIn> IccLogIns { get; set; }
        public virtual DbSet<IccMasterPbxlogin> IccMasterPbxlogins { get; set; }
        public virtual DbSet<IccMasterPbxuser> IccMasterPbxusers { get; set; }
        public virtual DbSet<IccSurveyTicket> IccSurveyTickets { get; set; }
        public virtual DbSet<IccTimestamp> IccTimestamps { get; set; }
        public virtual DbSet<InvLic> InvLics { get; set; }
        public virtual DbSet<InvTrxLic> InvTrxLics { get; set; }
        public virtual DbSet<IrcValidation> IrcValidations { get; set; }
        public virtual DbSet<IrcValidationTemp> IrcValidationTemps { get; set; }
        public virtual DbSet<IvcUserIn> IvcUserIns { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<KanDataHarianEmail> KanDataHarianEmails { get; set; }
        public virtual DbSet<Libur> Liburs { get; set; }
        public virtual DbSet<LogCustomerChange> LogCustomerChanges { get; set; }
        public virtual DbSet<MAccountSetting> MAccountSettings { get; set; }
        public virtual DbSet<MAgent> MAgents { get; set; }
        public virtual DbSet<MAlatTest> MAlatTests { get; set; }
        public virtual DbSet<MApplikasi> MApplikasis { get; set; }
        public virtual DbSet<MCategory> MCategories { get; set; }
        public virtual DbSet<MCategory1> MCategories1 { get; set; }
        public virtual DbSet<MCity> MCities { get; set; }
        public virtual DbSet<MCustomer> MCustomers { get; set; }
        public virtual DbSet<MGroupType> MGroupTypes { get; set; }
        public virtual DbSet<MGrupPertanyaan> MGrupPertanyaans { get; set; }
        public virtual DbSet<MItemPenilaian> MItemPenilaians { get; set; }
        public virtual DbSet<MItemPertanyaan> MItemPertanyaans { get; set; }
        public virtual DbSet<MKaryawan> MKaryawans { get; set; }
        public virtual DbSet<MKeyword> MKeywords { get; set; }
        public virtual DbSet<MKnowledge> MKnowledges { get; set; }
        public virtual DbSet<MLevelUser> MLevelUsers { get; set; }
        public virtual DbSet<MNotif> MNotifs { get; set; }
        public virtual DbSet<MNotifChat> MNotifChats { get; set; }
        public virtual DbSet<MOrganization> MOrganizations { get; set; }
        public virtual DbSet<MPriority> MPriorities { get; set; }
        public virtual DbSet<MRegion> MRegions { get; set; }
        public virtual DbSet<MSession> MSessions { get; set; }
        public virtual DbSet<MSeverity> MSeverities { get; set; }
        public virtual DbSet<MSourceType> MSourceTypes { get; set; }
        public virtual DbSet<MSpamCond> MSpamConds { get; set; }
        public virtual DbSet<MStatus> MStatuses { get; set; }
        public virtual DbSet<MSubCategoryLv1> MSubCategoryLv1s { get; set; }
        public virtual DbSet<MSubCategoryLv11> MSubCategoryLv1s1 { get; set; }
        public virtual DbSet<MSubCategoryLv2> MSubCategoryLv2s { get; set; }
        public virtual DbSet<MSubCategoryLv21> MSubCategoryLv2s1 { get; set; }
        public virtual DbSet<MSubCategoryLv211> MSubCategoryLv21s { get; set; }
        public virtual DbSet<MSubCategoryLv3> MSubCategoryLv3s { get; set; }
        public virtual DbSet<MSubCategoryLv31> MSubCategoryLv3s1 { get; set; }
        public virtual DbSet<MSubCategoryLv4> MSubCategoryLv4s { get; set; }
        public virtual DbSet<MSubkeyword> MSubkeywords { get; set; }
        public virtual DbSet<MasterParam> MasterParams { get; set; }
        public virtual DbSet<MenuMaster> MenuMasters { get; set; }
        public virtual DbSet<Migration> Migrations { get; set; }
        public virtual DbSet<MsLevelUser> MsLevelUsers { get; set; }
        public virtual DbSet<MsUser> MsUsers { get; set; }
        public virtual DbSet<MsUserTrustee> MsUserTrustees { get; set; }
        public virtual DbSet<Msmenu> Msmenus { get; set; }
        public virtual DbSet<Mtroleuser> Mtroleusers { get; set; }
        public virtual DbSet<Mtrustee> Mtrustees { get; set; }
        public virtual DbSet<Namabulan> Namabulans { get; set; }
        public virtual DbSet<NewDatamasterSheet2> NewDatamasterSheet2s { get; set; }
        public virtual DbSet<NewTAudit> NewTAudits { get; set; }
        public virtual DbSet<NewViewOutbundCall> NewViewOutbundCalls { get; set; }
        public virtual DbSet<NewViewReportOutbound> NewViewReportOutbounds { get; set; }
        public virtual DbSet<OutTrxDashboard> OutTrxDashboards { get; set; }
        public virtual DbSet<OutTrxDashboardDuration> OutTrxDashboardDurations { get; set; }
        public virtual DbSet<OutTrxDetail> OutTrxDetails { get; set; }
        public virtual DbSet<OutTrxDetailAttachment> OutTrxDetailAttachments { get; set; }
        public virtual DbSet<OutTrxHeader> OutTrxHeaders { get; set; }
        public virtual DbSet<OutTrxHistory> OutTrxHistories { get; set; }
        public virtual DbSet<OutTrxReport> OutTrxReports { get; set; }
        public virtual DbSet<PasswordReset> PasswordResets { get; set; }
        public virtual DbSet<PbxVCdr> PbxVCdrs { get; set; }
        public virtual DbSet<PbxVCel> PbxVCels { get; set; }
        public virtual DbSet<PbxVQstat> PbxVQstats { get; set; }
        public virtual DbSet<PbxVQstatsAll> PbxVQstatsAlls { get; set; }
        public virtual DbSet<PbxVQstatsFull> PbxVQstatsFulls { get; set; }
        public virtual DbSet<PbxVQstatsReportmonthly> PbxVQstatsReportmonthlies { get; set; }
        public virtual DbSet<PersonalAccessToken> PersonalAccessTokens { get; set; }
        public virtual DbSet<PnSlaeskalasi> PnSlaeskalasis { get; set; }
        public virtual DbSet<QiscusTicketAdditionalInfo> QiscusTicketAdditionalInfos { get; set; }
        public virtual DbSet<QiscusTicketAgent> QiscusTicketAgents { get; set; }
        public virtual DbSet<QiscusTicketCustomer> QiscusTicketCustomers { get; set; }
        public virtual DbSet<QiscusTicketDetail> QiscusTicketDetails { get; set; }
        public virtual DbSet<QiscusTicketDetailPayload> QiscusTicketDetailPayloads { get; set; }
        public virtual DbSet<QiscusTicketHeader> QiscusTicketHeaders { get; set; }
        public virtual DbSet<QiscusTicketParticipant> QiscusTicketParticipants { get; set; }
        public virtual DbSet<QiscusTicketServer> QiscusTicketServers { get; set; }
        public virtual DbSet<RapihTTicketMapping> RapihTTicketMappings { get; set; }
        public virtual DbSet<SalesForce2018> SalesForce2018s { get; set; }
        public virtual DbSet<SalesForce2019> SalesForce2019s { get; set; }
        public virtual DbSet<SalesForce2020> SalesForce2020s { get; set; }
        public virtual DbSet<SalesForce2021> SalesForce2021s { get; set; }
        public virtual DbSet<SalesForce2022> SalesForce2022s { get; set; }
        public virtual DbSet<SalesForce2023> SalesForce2023s { get; set; }
        public virtual DbSet<SalesForce2024> SalesForce2024s { get; set; }
        public virtual DbSet<SalesForceCustomer> SalesForceCustomers { get; set; }
        public virtual DbSet<ScheduleNewJob> ScheduleNewJobs { get; set; }
        public virtual DbSet<SlaTicket> SlaTickets { get; set; }
        public virtual DbSet<SmlImageLogin> SmlImageLogins { get; set; }
        //public virtual DbSet<SmlMCustomerChannel> SmlMCustomerChannels { get; set; }
        public virtual DbSet<SmlMasterUnit> SmlMasterUnits { get; set; }
        public virtual DbSet<SmlMasterUnitImport> SmlMasterUnitImports { get; set; }
        public virtual DbSet<SmlMasterUnitlama> SmlMasterUnitlamas { get; set; }
        public virtual DbSet<SmlUnitPelanggan> SmlUnitPelanggans { get; set; }
        public virtual DbSet<SmsBlast> SmsBlasts { get; set; }
        public virtual DbSet<SocialMediaAttachAll> SocialMediaAttachAlls { get; set; }
        public virtual DbSet<SocialMediaChatTw> SocialMediaChatTws { get; set; }
        public virtual DbSet<SocialMediaChatTwAgent> SocialMediaChatTwAgents { get; set; }
        public virtual DbSet<SocialMediaDataAction> SocialMediaDataActions { get; set; }
        public virtual DbSet<SocialMediaDetail> SocialMediaDetails { get; set; }
        public virtual DbSet<SocialMediaDetailIg> SocialMediaDetailIgs { get; set; }
        public virtual DbSet<SocialMediaDetailReply> SocialMediaDetailReplies { get; set; }
        public virtual DbSet<SocialMediaDetailReplyIg> SocialMediaDetailReplyIgs { get; set; }
        public virtual DbSet<SocialMediaDetailReplyTw> SocialMediaDetailReplyTws { get; set; }
        public virtual DbSet<SocialMediaDetailTw> SocialMediaDetailTws { get; set; }
        public virtual DbSet<SocialMediaDistribution> SocialMediaDistributions { get; set; }
        public virtual DbSet<SocialMediaGetHashtag> SocialMediaGetHashtags { get; set; }
        public virtual DbSet<SocialMediaHeader> SocialMediaHeaders { get; set; }
        public virtual DbSet<SocialMediaHeaderIg> SocialMediaHeaderIgs { get; set; }
        public virtual DbSet<SocialMediaHeaderMention> SocialMediaHeaderMentions { get; set; }
        public virtual DbSet<SocialMediaHeaderMentionReply> SocialMediaHeaderMentionReplies { get; set; }
        public virtual DbSet<SocialMediaHeaderTw> SocialMediaHeaderTws { get; set; }
        public virtual DbSet<SocialMediaLike> SocialMediaLikes { get; set; }
        public virtual DbSet<SocialMediaLikeTw> SocialMediaLikeTws { get; set; }
        public virtual DbSet<SocialMediaLogInteraction> SocialMediaLogInteractions { get; set; }
        public virtual DbSet<SocialMediaPhoto> SocialMediaPhotos { get; set; }
        public virtual DbSet<SocialMediaPhotoTw> SocialMediaPhotoTws { get; set; }
        public virtual DbSet<SocialMediaUserProfile> SocialMediaUserProfiles { get; set; }
        public virtual DbSet<SosmedGetHistoryDatum> SosmedGetHistoryData { get; set; }
        public virtual DbSet<StMenuTodolist> StMenuTodolists { get; set; }
        public virtual DbSet<TCloseTicket> TCloseTickets { get; set; }
        public virtual DbSet<TCustomer> TCustomers { get; set; }
        public virtual DbSet<TDispatch> TDispatches { get; set; }
        public virtual DbSet<TEmail> TEmails { get; set; }
        public virtual DbSet<TEmailIn> TEmailIns { get; set; }
        public virtual DbSet<TEmailInDetail> TEmailInDetails { get; set; }
        public virtual DbSet<TEmailTemp> TEmailTemps { get; set; }
        public virtual DbSet<TEmailTicket> TEmailTickets { get; set; }
        public virtual DbSet<TInteraction> TInteractions { get; set; }
        public virtual DbSet<TTicket> TTickets { get; set; }
        public virtual DbSet<TTicketExtendSla> TTicketExtendSlas { get; set; }
        public virtual DbSet<TTicketSatu> TTicketSatus { get; set; }
        public virtual DbSet<TUideskMultichatHeader> TUideskMultichatHeaders { get; set; }
        public virtual DbSet<TUideskMultichatHistory> TUideskMultichatHistories { get; set; }
        public virtual DbSet<TaurusMEksternal> TaurusMEksternals { get; set; }
        public virtual DbSet<TaurusMEscalationType> TaurusMEscalationTypes { get; set; }
        public virtual DbSet<TbSimulasi> TbSimulasis { get; set; }
        public virtual DbSet<TeleTrmKategoriProduk> TeleTrmKategoriProduks { get; set; }
        public virtual DbSet<TeleTrmKategoriProdukDetail> TeleTrmKategoriProdukDetails { get; set; }
        public virtual DbSet<TeleTrxDashboard> TeleTrxDashboards { get; set; }
        public virtual DbSet<TeleTrxHeader> TeleTrxHeaders { get; set; }
        public virtual DbSet<TeleTrxHistory> TeleTrxHistories { get; set; }
        public virtual DbSet<TeleTrxNote> TeleTrxNotes { get; set; }
        public virtual DbSet<TeleTrxNoteCall> TeleTrxNoteCalls { get; set; }
        public virtual DbSet<TeleTrxProduk> TeleTrxProduks { get; set; }
        public virtual DbSet<TeleTrxReport> TeleTrxReports { get; set; }
        public virtual DbSet<TeleTrxTask> TeleTrxTasks { get; set; }
        public virtual DbSet<TempApplicationSetup> TempApplicationSetups { get; set; }
        public virtual DbSet<TempBackupRestore> TempBackupRestores { get; set; }
        public virtual DbSet<TempEmailNotif> TempEmailNotifs { get; set; }
        public virtual DbSet<TempEmailNotifKategori> TempEmailNotifKategoris { get; set; }
        public virtual DbSet<TempEmailNotifKategoriM> TempEmailNotifKategoriMs { get; set; }
        public virtual DbSet<TempEmailNotifRelated> TempEmailNotifRelateds { get; set; }
        public virtual DbSet<TempEmailNotifRelatedList> TempEmailNotifRelatedLists { get; set; }
        public virtual DbSet<TempEmailNotifRelatedListM> TempEmailNotifRelatedListMs { get; set; }
        public virtual DbSet<TempEmailNotifRelatedListTrx> TempEmailNotifRelatedListTrxes { get; set; }
        public virtual DbSet<TempEmailNotifRelatedM> TempEmailNotifRelatedMs { get; set; }
        public virtual DbSet<TempEmailReasonCode> TempEmailReasonCodes { get; set; }
        public virtual DbSet<TempEscalation> TempEscalations { get; set; }
        public virtual DbSet<TempExtendSubCategory> TempExtendSubCategories { get; set; }
        public virtual DbSet<TempGroupingCustomer> TempGroupingCustomers { get; set; }
        public virtual DbSet<TempKotakThread> TempKotakThreads { get; set; }
        public virtual DbSet<TempKotakTodolist> TempKotakTodolists { get; set; }
        public virtual DbSet<TempLogNewHelpdesk> TempLogNewHelpdesks { get; set; }
        public virtual DbSet<TempMasterDataShopee> TempMasterDataShopees { get; set; }
        public virtual DbSet<TempParentNumberId> TempParentNumberIds { get; set; }
        public virtual DbSet<TempPbxReportDaily> TempPbxReportDailies { get; set; }
        public virtual DbSet<TempRSla> TempRSlas { get; set; }
        public virtual DbSet<TempRSurveyCsat> TempRSurveyCsats { get; set; }
        public virtual DbSet<TempResultsCsat> TempResultsCsats { get; set; }
        public virtual DbSet<TempResultsSla> TempResultsSlas { get; set; }
        public virtual DbSet<TempResultsSm> TempResultsSms { get; set; }
        public virtual DbSet<TempRfcExtendSubStatus> TempRfcExtendSubStatuses { get; set; }
        public virtual DbSet<TempRfcInsertHtml> TempRfcInsertHtmls { get; set; }
        public virtual DbSet<TempRowTodolist> TempRowTodolists { get; set; }
        public virtual DbSet<TempSettingHiStoryTransaction> TempSettingHiStoryTransactions { get; set; }
        public virtual DbSet<TempSettingParameter> TempSettingParameters { get; set; }
        public virtual DbSet<TempSettingSurvey> TempSettingSurveys { get; set; }
        public virtual DbSet<TempSurvey> TempSurveys { get; set; }
        public virtual DbSet<TempTrxChangePswd> TempTrxChangePswds { get; set; }
        public virtual DbSet<TempTrxCsat> TempTrxCsats { get; set; }
        public virtual DbSet<TempTrxCsatDetail> TempTrxCsatDetails { get; set; }
        public virtual DbSet<TemplateBlast> TemplateBlasts { get; set; }
        public virtual DbSet<TestDataTicket> TestDataTickets { get; set; }
        public virtual DbSet<TestTable> TestTables { get; set; }
        public virtual DbSet<TrDataSetting> TrDataSettings { get; set; }
        public virtual DbSet<TrLdapSetting> TrLdapSettings { get; set; }
        public virtual DbSet<TrOutboundCall> TrOutboundCalls { get; set; }
        public virtual DbSet<TrOutboundCallDetail> TrOutboundCallDetails { get; set; }
        public virtual DbSet<TrReleaseLog> TrReleaseLogs { get; set; }
        public virtual DbSet<TrTemplateNotifikasiEmail> TrTemplateNotifikasiEmails { get; set; }
        public virtual DbSet<TrThread> TrThreads { get; set; }
        public virtual DbSet<TrThreadActivity> TrThreadActivities { get; set; }
        public virtual DbSet<TrThreadArchive> TrThreadArchives { get; set; }
        public virtual DbSet<TrThreadTemp> TrThreadTemps { get; set; }
        public virtual DbSet<TrTypeNotifikasiEmail> TrTypeNotifikasiEmails { get; set; }
        public virtual DbSet<TrmAgentProductCampaignUser> TrmAgentProductCampaignUsers { get; set; }
        public virtual DbSet<TrmCampaignScript> TrmCampaignScripts { get; set; }
        public virtual DbSet<TrmCategory> TrmCategories { get; set; }
        public virtual DbSet<TrmCategoryDetail> TrmCategoryDetails { get; set; }
        public virtual DbSet<TrmCategoryDetail21> TrmCategoryDetail21s { get; set; }
        public virtual DbSet<TrmCategoryReason> TrmCategoryReasons { get; set; }
        public virtual DbSet<TrmCategoryType> TrmCategoryTypes { get; set; }
        public virtual DbSet<TrmChannel> TrmChannels { get; set; }
        public virtual DbSet<TrmCountingOutboundCallAgent> TrmCountingOutboundCallAgents { get; set; }
        public virtual DbSet<TrmCountingOutboundCallStatus> TrmCountingOutboundCallStatuses { get; set; }
        public virtual DbSet<TrmCsCategory> TrmCsCategories { get; set; }
        public virtual DbSet<BRAPriority> BRAPrioritys { get; set; }
        public virtual DbSet<BraNamaKantor> BraNamaKantors { get; set; }
        public virtual DbSet<BraNamaPerusahaan> BraNamaPerusahaans { get; set; }
        public virtual DbSet<TrmCsStatus> TrmCsStatuses { get; set; }
        public virtual DbSet<TrmCustomer> TrmCustomers { get; set; }
      //  public virtual DbSet<TrmCustomerChannel> TrmCustomerChannels { get; set; }
        public virtual DbSet<TrmCustomerUnion> TrmCustomerUnions { get; set; }
        public virtual DbSet<TrmDataBucket> TrmDataBuckets { get; set; }
        public virtual DbSet<TrmEpicUser> TrmEpicUsers { get; set; }
        public virtual DbSet<TrmGroupAgent> TrmGroupAgents { get; set; }
        public virtual DbSet<TrmJourneyTicket> TrmJourneyTickets { get; set; }
        public virtual DbSet<TrmLoginAgentOutbound> TrmLoginAgentOutbounds { get; set; }
        public virtual DbSet<TrmMenuApplication2> TrmMenuApplication2s { get; set; }
        public virtual DbSet<TrmMenuApplication3> TrmMenuApplication3s { get; set; }
        public virtual DbSet<TrmMenuPreviledge> TrmMenuPreviledges { get; set; }
        public virtual DbSet<TrmNotificationUserAddress> TrmNotificationUserAddresses { get; set; }
        public virtual DbSet<TrmOrg> TrmOrgs { get; set; }
        public virtual DbSet<TrmPriorityScale> TrmPriorityScales { get; set; }
        public virtual DbSet<TrmProductName> TrmProductNames { get; set; }
        public virtual DbSet<TrmProductType> TrmProductTypes { get; set; }
        public virtual DbSet<TrmReminder> TrmReminders { get; set; }
        public virtual DbSet<TrmSettingUserManagement> TrmSettingUserManagements { get; set; }
        public virtual DbSet<TrmStatusTicket> TrmStatusTickets { get; set; }
        public virtual DbSet<TrmTemplateBlast> TrmTemplateBlasts { get; set; }
        public virtual DbSet<TrmThread> TrmThreads { get; set; }
        public virtual DbSet<TrmTicketNoteInternal> TrmTicketNoteInternals { get; set; }
        public virtual DbSet<TrmTicketReminder> TrmTicketReminders { get; set; }
        public virtual DbSet<TrmTicketUserCreate> TrmTicketUserCreates { get; set; }
        public virtual DbSet<TrmTypeComplaint> TrmTypeComplaints { get; set; }
        public virtual DbSet<TrmUserAdd> TrmUserAdds { get; set; }
        public virtual DbSet<TrmUserEscalation> TrmUserEscalations { get; set; }
        public virtual DbSet<TrmViewHistoryInboxEmail> TrmViewHistoryInboxEmails { get; set; }
        public virtual DbSet<TrmViewHistoryOutboxEmail> TrmViewHistoryOutboxEmails { get; set; }
        public virtual DbSet<TrmViewNotificationUserAddress> TrmViewNotificationUserAddresses { get; set; }
        public virtual DbSet<TrmViewOutboundHeader> TrmViewOutboundHeaders { get; set; }
        public virtual DbSet<TrmViewOutboundRider> TrmViewOutboundRiders { get; set; }
        public virtual DbSet<TrmViewPreviewAttachmentSending> TrmViewPreviewAttachmentSendings { get; set; }
        public virtual DbSet<TrmViewTransaksiOutboundDetail> TrmViewTransaksiOutboundDetails { get; set; }
        public virtual DbSet<TrmViewTransaksiOutboundDetailHeader> TrmViewTransaksiOutboundDetailHeaders { get; set; }
        public virtual DbSet<TrmViewTransaksiOutboundHeader> TrmViewTransaksiOutboundHeaders { get; set; }
        public virtual DbSet<TrmViewTransaksiOutboundReminder> TrmViewTransaksiOutboundReminders { get; set; }
        public virtual DbSet<TrmViewUideskTrxOutboundHeader> TrmViewUideskTrxOutboundHeaders { get; set; }
        public virtual DbSet<Txbackup> Txbackups { get; set; }
        public virtual DbSet<Txbackupsetup> Txbackupsetups { get; set; }
        public virtual DbSet<UideskCustomerChannel> UideskCustomerChannels { get; set; }
        public virtual DbSet<UideskEmailAuthType> UideskEmailAuthTypes { get; set; }
        public virtual DbSet<UideskEmailService> UideskEmailServices { get; set; }
        public virtual DbSet<UideskEmailServiceMethod> UideskEmailServiceMethods { get; set; }
        public virtual DbSet<UideskEmailSignature> UideskEmailSignatures { get; set; }
        public virtual DbSet<UideskForgotPasswordTemplate> UideskForgotPasswordTemplates { get; set; }
        public virtual DbSet<UideskFoto> UideskFotos { get; set; }
        public virtual DbSet<UideskListQue> UideskListQues { get; set; }
        public virtual DbSet<UideskListQueCollection> UideskListQueCollections { get; set; }
        public virtual DbSet<UideskListQueOutbound> UideskListQueOutbounds { get; set; }
        public virtual DbSet<UideskListQueTelemarketing> UideskListQueTelemarketings { get; set; }
        public virtual DbSet<UideskLogChangePassword> UideskLogChangePasswords { get; set; }
        public virtual DbSet<UideskMergeTicket> UideskMergeTickets { get; set; }
        public virtual DbSet<UideskNotificationAddress> UideskNotificationAddresses { get; set; }
        public virtual DbSet<UideskNotificationSetting> UideskNotificationSettings { get; set; }
        public virtual DbSet<UideskNotificationTemplate> UideskNotificationTemplates { get; set; }
        public virtual DbSet<UideskOfficeHour> UideskOfficeHours { get; set; }
        public virtual DbSet<UideskProductName> UideskProductNames { get; set; }
        public virtual DbSet<UideskServerProfile> UideskServerProfiles { get; set; }
        public virtual DbSet<UideskServerProtocol> UideskServerProtocols { get; set; }
        public virtual DbSet<UideskServerProtocolOut> UideskServerProtocolOuts { get; set; }
        public virtual DbSet<UideskSmsBlast> UideskSmsBlasts { get; set; }
        public virtual DbSet<UideskSocialAccount> UideskSocialAccounts { get; set; }
        public virtual DbSet<UideskSocialMediaAccount> UideskSocialMediaAccounts { get; set; }
        public virtual DbSet<UideskTempNoteInstan> UideskTempNoteInstans { get; set; }
        public virtual DbSet<UideskTempNoteInternal> UideskTempNoteInternals { get; set; }
        public virtual DbSet<UideskThreadAttachment> UideskThreadAttachments { get; set; }
        public virtual DbSet<UideskTicketAttachment> UideskTicketAttachments { get; set; }
        public virtual DbSet<UideskTicketReminder> UideskTicketReminders { get; set; }
        public virtual DbSet<UideskTrmAux> UideskTrmAuxes { get; set; }
        public virtual DbSet<UideskTrmCustomerStatus> UideskTrmCustomerStatuses { get; set; }
        public virtual DbSet<UideskTrmCustomerUpload> UideskTrmCustomerUploads { get; set; }
        public virtual DbSet<UideskTrmDashboardCustomer> UideskTrmDashboardCustomers { get; set; }
        public virtual DbSet<UideskTrmDashboardVendor> UideskTrmDashboardVendors { get; set; }
        public virtual DbSet<UideskTrmEmailAccount> UideskTrmEmailAccounts { get; set; }
        public virtual DbSet<UideskTrmEscalationIndividu> UideskTrmEscalationIndividus { get; set; }
        public virtual DbSet<UideskTrmFilterDate> UideskTrmFilterDates { get; set; }
        public virtual DbSet<UideskTrmForgotPassword> UideskTrmForgotPasswords { get; set; }
        public virtual DbSet<UideskTrmHoliday> UideskTrmHolidays { get; set; }
        public virtual DbSet<UideskTrmJumlahFilter> UideskTrmJumlahFilters { get; set; }
        public virtual DbSet<UideskTrmMappingAccount> UideskTrmMappingAccounts { get; set; }
        public virtual DbSet<UideskTrmMaxHandle> UideskTrmMaxHandles { get; set; }
        public virtual DbSet<UideskTrmProductName> UideskTrmProductNames { get; set; }
        public virtual DbSet<UideskTrmReasonCall> UideskTrmReasonCalls { get; set; }
        public virtual DbSet<UideskTrmReasonCallParamater> UideskTrmReasonCallParamaters { get; set; }
        public virtual DbSet<UideskTrmSosialMedium> UideskTrmSosialMedia { get; set; }
        public virtual DbSet<UideskTrmStatus> UideskTrmStatuses { get; set; }
        public virtual DbSet<UideskTrxAgentProductCampaign> UideskTrxAgentProductCampaigns { get; set; }
        public virtual DbSet<UideskTrxAux> UideskTrxAuxes { get; set; }
        public virtual DbSet<UideskTrxBlending> UideskTrxBlendings { get; set; }
        public virtual DbSet<UideskTrxEmailDetail> UideskTrxEmailDetails { get; set; }
        public virtual DbSet<UideskTrxEmailSendingResult> UideskTrxEmailSendingResults { get; set; }
        public virtual DbSet<UideskTrxInboxEmail> UideskTrxInboxEmails { get; set; }
        public virtual DbSet<UideskTrxLogReleaseLogin> UideskTrxLogReleaseLogins { get; set; }
        public virtual DbSet<UideskTrxLoginActivity> UideskTrxLoginActivities { get; set; }
        public virtual DbSet<UideskTrxOutboundCallStatus> UideskTrxOutboundCallStatuses { get; set; }
        public virtual DbSet<UideskTrxOutboundDetail> UideskTrxOutboundDetails { get; set; }
        public virtual DbSet<UideskTrxOutboundFund> UideskTrxOutboundFunds { get; set; }
        public virtual DbSet<UideskTrxOutboundHeader> UideskTrxOutboundHeaders { get; set; }
        public virtual DbSet<UideskTrxOutboundNamaAhliWari> UideskTrxOutboundNamaAhliWaris { get; set; }
        public virtual DbSet<UideskTrxOutboundReminder> UideskTrxOutboundReminders { get; set; }
        public virtual DbSet<UideskTrxOutboundRider> UideskTrxOutboundRiders { get; set; }
        public virtual DbSet<UideskTrxOutboundSummary> UideskTrxOutboundSummaries { get; set; }
        public virtual DbSet<UideskTrxSendEmail> UideskTrxSendEmails { get; set; }
        public virtual DbSet<UideskTrxSendEmailBlast> UideskTrxSendEmailBlasts { get; set; }
        public virtual DbSet<UideskTrxSendEmailBlastResult> UideskTrxSendEmailBlastResults { get; set; }
        public virtual DbSet<UideskVendorTaskboard> UideskVendorTaskboards { get; set; }
        public virtual DbSet<UideskViewReportingEmail> UideskViewReportingEmails { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<User1> User1s { get; set; }
        public virtual DbSet<User2> User2s { get; set; }
        public virtual DbSet<User3> User3s { get; set; }
        public virtual DbSet<User4> User4s { get; set; }
        public virtual DbSet<UserSettingChannel> UserSettingChannels { get; set; }
        public virtual DbSet<V24jam> V24jams { get; set; }
        public virtual DbSet<V2DatakelolaSocialmediaBucket> V2DatakelolaSocialmediaBuckets { get; set; }
        public virtual DbSet<V2UideskAddressEmailService> V2UideskAddressEmailServices { get; set; }
        public virtual DbSet<V2UideskDatakelola> V2UideskDatakelolas { get; set; }
        public virtual DbSet<V2UideskReleaseOutboundSubmitLog> V2UideskReleaseOutboundSubmitLogs { get; set; }
        public virtual DbSet<V2UideskSyncTableTicketAgent> V2UideskSyncTableTicketAgents { get; set; }
        public virtual DbSet<V2UideskTableDashboardAgentMail> V2UideskTableDashboardAgentMails { get; set; }
        public virtual DbSet<V2UideskTrmLayer> V2UideskTrmLayers { get; set; }
        public virtual DbSet<V2UideskTrmMasterSite> V2UideskTrmMasterSites { get; set; }
        public virtual DbSet<V2UideskTrmNomorWa> V2UideskTrmNomorWas { get; set; }
        public virtual DbSet<V2UideskTrxTableDashboardOutboundDuration> V2UideskTrxTableDashboardOutboundDurations { get; set; }
        public virtual DbSet<VAdmin> VAdmins { get; set; }
        public virtual DbSet<VAllCustomerChannel> VAllCustomerChannels { get; set; }
        public virtual DbSet<VAlldatatrx> VAlldatatrxes { get; set; }
        public virtual DbSet<VBtnEmailRpt> VBtnEmailRpts { get; set; }
        public virtual DbSet<VBtnHi> VBtnHis { get; set; }
        public virtual DbSet<VChannel> VChannels { get; set; }
        public virtual DbSet<VChartTicketLine> VChartTicketLines { get; set; }
        public virtual DbSet<VCreateTicketHour> VCreateTicketHours { get; set; }
        public virtual DbSet<VCustomerAllChannel> VCustomerAllChannels { get; set; }
        public virtual DbSet<VDataThread> VDataThreads { get; set; }
        public virtual DbSet<VEmailNotifikasi> VEmailNotifikasis { get; set; }
        public virtual DbSet<VEmailOut> VEmailOuts { get; set; }
        public virtual DbSet<VEmailRpt> VEmailRpts { get; set; }
        public virtual DbSet<VEmailin> VEmailins { get; set; }
        public virtual DbSet<VHiStoryTransaction> VHiStoryTransactions { get; set; }
        public virtual DbSet<VInteraction> VInteractions { get; set; }
        public virtual DbSet<VLayerReady> VLayerReadies { get; set; }
        public virtual DbSet<VMasterReportLabel> VMasterReportLabels { get; set; }
        public virtual DbSet<VParentNumberReporting> VParentNumberReportings { get; set; }
        public virtual DbSet<VSlaReporting> VSlaReportings { get; set; }
        public virtual DbSet<VSumComplaintLevel> VSumComplaintLevels { get; set; }
        public virtual DbSet<VSumTodayCategory> VSumTodayCategories { get; set; }
        public virtual DbSet<VSumYesterdayCategory> VSumYesterdayCategories { get; set; }
        public virtual DbSet<VThreadReporting> VThreadReportings { get; set; }
        public virtual DbSet<VTransaction> VTransactions { get; set; }
        public virtual DbSet<VUideskMultichatHistory> VUideskMultichatHistories { get; set; }
        public virtual DbSet<VUmursosmed> VUmursosmeds { get; set; }
        public virtual DbSet<VVerbalToWrittenReporting> VVerbalToWrittenReportings { get; set; }
        public virtual DbSet<ViewEmailReport> ViewEmailReports { get; set; }
        public virtual DbSet<ViewReportMultichat> ViewReportMultichats { get; set; }
        public virtual DbSet<VtrxEmailTransaction> VtrxEmailTransactions { get; set; }
        public virtual DbSet<VwAutoClosed> VwAutoCloseds { get; set; }
        public virtual DbSet<VwAutoClosedRfcStatus> VwAutoClosedRfcStatuses { get; set; }
        public virtual DbSet<VwAutoClosedRfcStatusDoc> VwAutoClosedRfcStatusDocs { get; set; }
        public virtual DbSet<VwCampaignsDatum> VwCampaignsData { get; set; }
        public virtual DbSet<VwEmailList> VwEmailLists { get; set; }
        public virtual DbSet<VwEmailListRelease> VwEmailListReleases { get; set; }
        public virtual DbSet<VwInvChannel> VwInvChannels { get; set; }
        public virtual DbSet<VwJourneyTicket> VwJourneyTickets { get; set; }
        public virtual DbSet<VwNotaDina> VwNotaDinas { get; set; }
        public virtual DbSet<VwNotaDinasGroupby> VwNotaDinasGroupbies { get; set; }
        public virtual DbSet<VwRSla> VwRSlas { get; set; }
        public virtual DbSet<VwRSlaNew> VwRSlaNews { get; set; }
        public virtual DbSet<VwRfcMilestone> VwRfcMilestones { get; set; }
        public virtual DbSet<VwTempTodolist> VwTempTodolists { get; set; }
        public virtual DbSet<VwTempTodolistTanpainteraction> VwTempTodolistTanpainteractions { get; set; }
        public virtual DbSet<VwTinteraction> VwTinteractions { get; set; }
        public virtual DbSet<VwTinteractionNew> VwTinteractionNews { get; set; }
        public virtual DbSet<VwUrlIn> VwUrlIns { get; set; }
        public virtual DbSet<VwUrlOut> VwUrlOuts { get; set; }
        public virtual DbSet<VwWagentListconversation> VwWagentListconversations { get; set; }
        public virtual DbSet<VwWrittenVerbal> VwWrittenVerbals { get; set; }
        public virtual DbSet<WbAllGetDataaux> WbAllGetDataauxes { get; set; }
        public virtual DbSet<WbAllGetDataeng> WbAllGetDataengs { get; set; }
        public virtual DbSet<WbAllGetDataind> WbAllGetDatainds { get; set; }
        public virtual DbSet<WbAllGetDataout> WbAllGetDataouts { get; set; }
        public virtual DbSet<WbAllGetDatasum> WbAllGetDatasums { get; set; }
        public virtual DbSet<WbAllGetDatum> WbAllGetData { get; set; }
        public virtual DbSet<WbInboundPrio> WbInboundPrios { get; set; }
        public virtual DbSet<WbInboundUwallboard> WbInboundUwallboards { get; set; }
        public virtual DbSet<WellTrxDashboard> WellTrxDashboards { get; set; }
        public virtual DbSet<XtraLoginActivity> XtraLoginActivities { get; set; }
        public virtual DbSet<XtraRepotCallHistory> XtraRepotCallHistories { get; set; }
        public virtual DbSet<_4ReportAux> _4ReportAuxes { get; set; }
        public virtual DbSet<_4ReportBaseTrx> _4ReportBaseTrxes { get; set; }
        public virtual DbSet<_4ReportChat> _4ReportChats { get; set; }
        public virtual DbSet<_4ReportEmail> _4ReportEmails { get; set; }
        public virtual DbSet<_4ReportEmailResponseTime> _4ReportEmailResponseTimes { get; set; }
        public virtual DbSet<_4ReportFb> _4ReportFbs { get; set; }
        public virtual DbSet<_4ReportIg> _4ReportIgs { get; set; }
        public virtual DbSet<_4ReportInteraction> _4ReportInteractions { get; set; }
        public virtual DbSet<_4ReportMention> _4ReportMentions { get; set; }
        public virtual DbSet<_4ReportOutbound> _4ReportOutbounds { get; set; }
        public virtual DbSet<_4ReportSla> _4ReportSlas { get; set; }
        public virtual DbSet<_4ReportStaff> _4ReportStaffs { get; set; }
        public virtual DbSet<_4ReportThread> _4ReportThreads { get; set; }
        public virtual DbSet<_4ReportThreadNew> _4ReportThreadNews { get; set; }
        public virtual DbSet<_4ReportTw> _4ReportTws { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<CustomerChannel> CustomerChannels { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Server=cloud.uidesk.id;Database=BravoDev;User Id=Sa;Password=Sa212;MultipleActiveResultSets=true;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AgentTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Agent_Temp");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Userid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<MCustomer>(entity =>
            {
                entity.ToTable("MCustomer");

                entity.HasKey(e => e.Id);

                entity.Property(e => e.Id)
                    .IsRequired();

                entity.Property(e => e.Tittle)
                    .HasMaxLength(255);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(255);

                entity.Property(e => e.Noktp)
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasMaxLength(255);

                entity.Property(e => e.Birth)
                    .HasColumnType("datetime");

                entity.Property(e => e.JenisKelamin)
                    .HasMaxLength(10);

                entity.Property(e => e.NamaPerusahaan)
                    .HasMaxLength(255);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .HasMaxLength(255);

                entity.Property(e => e.Alamat)
                    .HasMaxLength(500);

                entity.Property(e => e.City)
                    .HasMaxLength(100);

                entity.Property(e => e.Region)
                    .HasMaxLength(100);

                entity.Property(e => e.NetworkSocial)
                    .HasMaxLength(255);

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50);

                entity.Property(e => e.Facebook)
                    .HasMaxLength(255);

                entity.Property(e => e.Twitter)
                    .HasMaxLength(255);

                entity.Property(e => e.Kaskus)
                    .HasMaxLength(255);

                entity.Property(e => e.Home)
                    .HasMaxLength(50);

                entity.Property(e => e.Office)
                    .HasMaxLength(50);

                entity.Property(e => e.Hp)
                    .HasMaxLength(50);

                entity.Property(e => e.Others)
                    .HasMaxLength(255);

                entity.Property(e => e.Pesan)
                    .HasMaxLength(1000);

                entity.Property(e => e.AlamatIp)
                    .HasMaxLength(50);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(255);

                entity.Property(e => e.SitePassword)
                    .HasMaxLength(255);

                entity.Property(e => e.SiteIp)
                    .HasMaxLength(50);

                entity.Property(e => e.Login)
                    .IsRequired(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(500);

                entity.Property(e => e.UserCreateCustomer)
                    .HasMaxLength(255);

                entity.Property(e => e.DateCreateCustomer)
                    .HasColumnType("datetime");

                entity.Property(e => e.SourceCreate)
                    .HasMaxLength(255);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(255);

                entity.Property(e => e.DateUpdate)
                    .HasColumnType("datetime");

                entity.Property(e => e.StatusUpdated)
                    .HasMaxLength(50);

                entity.Property(e => e.DateLastUpdated)
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(50);

                entity.Property(e => e.Relations)
                    .HasMaxLength(255);

                entity.Property(e => e.CompId)
                    .HasMaxLength(255);

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(50);

                entity.Property(e => e.Cabang)
                    .HasMaxLength(100);

                entity.Property(e => e.AccountId)
                    .HasMaxLength(255);

                entity.Property(e => e.Nik)
                    .HasMaxLength(50);

                entity.Property(e => e.Cif)
                    .HasMaxLength(50);

                entity.Property(e => e.GroupId)
                    .HasMaxLength(50);

                entity.Property(e => e.Na)
                    .HasMaxLength(50);

                entity.Property(e => e.Instagram)
                    .HasMaxLength(255);

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100);

                entity.Property(e => e.PolisNumber)
                    .HasMaxLength(50);

                entity.Property(e => e.BillingKota)
                    .HasMaxLength(100);

                entity.Property(e => e.BillingProvinsi)
                    .HasMaxLength(100);

                entity.Property(e => e.AutoGenerateId)
                    .HasMaxLength(255);
                entity.Property(e => e.ContactDynamicId)
                    .HasMaxLength(255);
            });
        

        modelBuilder.Entity<AgentTempEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Agent_Temp_Email");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Userid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<AgentTempSosialMedium>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Agent_Temp_SosialMedia");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Userid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<AhuUideskTrmEmailAutoReply>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AHU_Uidesk_TrmEmailAutoReply");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.TemplateReply)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_REPLY");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATE");
            });

            modelBuilder.Entity<AhuUideskTrmFormatResponseEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AHU_Uidesk_TrmFormatResponseEmail");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Format)
                    .IsUnicode(false)
                    .HasColumnName("FORMAT");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.State)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.TemplateResponse)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_RESPONSE");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATE");
            });

            modelBuilder.Entity<AhuUideskTrmGreetingScript>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AHU_Uidesk_TrmGreetingScript");

                entity.Property(e => e.Channel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GreetingScript).IsUnicode(false);

                entity.Property(e => e.HeaderName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AhuUideskTrxAssignEmailLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AHU_Uidesk_TrxAssignEmail_Log");

                entity.Property(e => e.AssignFrom)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.AssignId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AssignID");

                entity.Property(e => e.AssignReason)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.AssignTo)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.AssignType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<AhuUideskTrxConfigurasi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AHU_UIDESK_TrxConfigurasi");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Flag)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.SettingType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SETTING_TYPE");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<AppemailLogActivity>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("appemail_log_activity");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.AppVer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("app_ver");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("description");
            });

            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Appointment");

                entity.Property(e => e.Capaign)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("capaign");

                entity.Property(e => e.Dated)
                    .HasColumnType("datetime")
                    .HasColumnName("dated");

                entity.Property(e => e.Id)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idcalllist)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("idcalllist");

                entity.Property(e => e.NoAppointment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Notif).HasColumnName("notif");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<AppsUideskApplication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_APPLICATION");

                entity.Property(e => e.Application)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APPLICATION");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATE");
            });

            modelBuilder.Entity<AppsUideskCompany>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_COMPANY");

                entity.Property(e => e.Company)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PicContactHp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PIC_CONTACT_HP");

                entity.Property(e => e.PicContactMail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PIC_CONTACT_MAIL");

                entity.Property(e => e.PicName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PIC_NAME");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATE");
            });

            modelBuilder.Entity<AppsUideskInteraction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_INTERACTION");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Files)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FILES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FollowState)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FOLLOW_STATE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InteractionNote)
                    .HasColumnType("text")
                    .HasColumnName("INTERACTION_NOTE");

                entity.Property(e => e.StatusTransaksi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_TRANSAKSI");

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.TransaksiId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSAKSI_ID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATE");
            });

            modelBuilder.Entity<AppsUideskInteractionAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_INTERACTION_ATTACHMENT");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EXTENSION");

                entity.Property(e => e.Filename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FILENAME");

                entity.Property(e => e.Foldername)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FOLDERNAME");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InteractionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INTERACTION_ID");

                entity.Property(e => e.Size)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIZE");

                entity.Property(e => e.Status)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.TransaksiId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSAKSI_ID");

                entity.Property(e => e.Url)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<AppsUideskPartner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_PARTNER");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PartnerCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PARTNER_COMPANY");

                entity.Property(e => e.PartnerContactHp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PARTNER_CONTACT_HP");

                entity.Property(e => e.PartnerContactMail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PARTNER_CONTACT_MAIL");

                entity.Property(e => e.PartnerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PARTNER_NAME");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATE");
            });

            modelBuilder.Entity<AppsUideskQuotation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_QUOTATION");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Files)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FILES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Note)
                    .HasColumnType("text")
                    .HasColumnName("NOTE");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NUMBER");

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL");

                entity.Property(e => e.TransaksiId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSAKSI_ID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATE");

                entity.Property(e => e.Versi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VERSI");
            });

            modelBuilder.Entity<AppsUideskQuotationAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_QUOTATION_ATTACHMENT");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EXTENSION");

                entity.Property(e => e.Filename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FILENAME");

                entity.Property(e => e.Foldername)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FOLDERNAME");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.QuotationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUOTATION_ID");

                entity.Property(e => e.Size)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIZE");

                entity.Property(e => e.Status)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.TransaksiId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSAKSI_ID");

                entity.Property(e => e.Url)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<AppsUideskTransaksi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_TRANSAKSI");

                entity.Property(e => e.ApplicationId).HasColumnName("APPLICATION_ID");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("APPLICATION_NAME");

                entity.Property(e => e.CompanyId).HasColumnName("COMPANY_ID");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY_NAME");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Files)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FILES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FollowState)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FOLLOW_STATE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InteractionNote)
                    .HasColumnType("text")
                    .HasColumnName("INTERACTION_NOTE");

                entity.Property(e => e.PartnerCompany)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PARTNER_COMPANY");

                entity.Property(e => e.PartnerId).HasColumnName("PARTNER_ID");

                entity.Property(e => e.PartnerName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PARTNER_NAME");

                entity.Property(e => e.PicUidesk)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PIC_UIDESK");

                entity.Property(e => e.StatusTransaksi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_TRANSAKSI");

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.TransaksiId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSAKSI_ID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_CREATE");
            });

            modelBuilder.Entity<AppsUideskTransaksiAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPS_UIDESK_TRANSAKSI_ATTACHMENT");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EXTENSION");

                entity.Property(e => e.Filename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FILENAME");

                entity.Property(e => e.Foldername)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FOLDERNAME");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Size)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIZE");

                entity.Property(e => e.Status)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.TransaksiId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSAKSI_ID");

                entity.Property(e => e.Url)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<AssetsAsset>(entity =>
            {
                entity.HasKey(e => e.AId)
                    .HasName("PK__Assets_A__71AC6DA134CF47BD");

                entity.ToTable("Assets_Asset");

                entity.Property(e => e.AId).HasColumnName("A_Id");

                entity.Property(e => e.AccessionNo).HasMaxLength(50);

                entity.Property(e => e.AssetName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BId).HasColumnName("B_Id");

                entity.Property(e => e.BillNo)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.DId).HasColumnName("D_Id");

                entity.Property(e => e.DateOfAllocate).HasColumnType("date");

                entity.Property(e => e.DateOfPurchase).HasColumnType("date");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasColumnName("status");

                entity.Property(e => e.VendorAddress)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Warranty)
                    .HasMaxLength(5)
                    .HasColumnName("warranty");

                entity.Property(e => e.Weight).HasMaxLength(10);
            });

            modelBuilder.Entity<AssetsBill>(entity =>
            {
                entity.HasKey(e => e.BId);

                entity.ToTable("Assets_Bill");

                entity.HasIndex(e => new { e.BillNo, e.VendorName }, "UQ__Assets_B__66C08E2D39468A73")
                    .IsUnique();

                entity.Property(e => e.BId).HasColumnName("B_Id");

                entity.Property(e => e.BillNo).HasMaxLength(10);

                entity.Property(e => e.JenisKelamin)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorAddress).HasMaxLength(255);

                entity.Property(e => e.VendorName).HasMaxLength(255);
            });

            modelBuilder.Entity<AssetsBorrowRequest>(entity =>
            {
                entity.HasKey(e => e.BrId);

                entity.ToTable("Assets_Borrow_Request");

                entity.Property(e => e.BrId).HasColumnName("Br_Id");

                entity.Property(e => e.AId).HasColumnName("A_Id");

                entity.Property(e => e.DateOfApproval)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_Approval");

                entity.Property(e => e.DateOfPickup)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_pickup");

                entity.Property(e => e.DateOfRequest)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_Request");

                entity.Property(e => e.DateOfReturn)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_return");

                entity.Property(e => e.ReqStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Req_status");

                entity.Property(e => e.RequestingDeptId).HasColumnName("Requesting_dept_id");

                entity.HasOne(d => d.AIdNavigation)
                    .WithMany(p => p.AssetsBorrowRequests)
                    .HasForeignKey(d => d.AId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Assets_Bor__A_Id__4B0D20AB");
            });

            modelBuilder.Entity<AssetsDataCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Assets_DataCustomer");

                entity.Property(e => e.AId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("A_ID");

                entity.Property(e => e.CreaTedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreaTedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CusTomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CusTomerID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<AssetsDepartment>(entity =>
            {
                entity.HasKey(e => e.DId);

                entity.ToTable("Assets_Department");

                entity.HasIndex(e => e.DName, "UQ__Assets_D__F617FAB5D67FF29A")
                    .IsUnique();

                entity.Property(e => e.DId).HasColumnName("D_Id");

                entity.Property(e => e.DName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("D_name");

                entity.Property(e => e.Faculty)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UId).HasColumnName("U_Id");
            });

            modelBuilder.Entity<AssetsRepairRequest>(entity =>
            {
                entity.HasKey(e => e.RrId);

                entity.ToTable("Assets_Repair_Request");

                entity.Property(e => e.RrId).HasColumnName("Rr_Id");

                entity.Property(e => e.AId).HasColumnName("A_id");

                entity.Property(e => e.AmountActual)
                    .HasColumnType("money")
                    .HasColumnName("amount_actual");

                entity.Property(e => e.AmountEst)
                    .HasColumnType("money")
                    .HasColumnName("amount_est");

                entity.Property(e => e.DateOfApproval)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_Approval");

                entity.Property(e => e.DateOfRequest)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_request");

                entity.Property(e => e.ReqStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Req_status");
            });

            modelBuilder.Entity<AssetsScrapRequest>(entity =>
            {
                entity.HasKey(e => e.SrId);

                entity.ToTable("Assets_Scrap_Request");

                entity.Property(e => e.SrId).HasColumnName("Sr_Id");

                entity.Property(e => e.AId).HasColumnName("A_id");

                entity.Property(e => e.AmountReleased)
                    .HasColumnType("money")
                    .HasColumnName("Amount_Released");

                entity.Property(e => e.AmountWrittenOff)
                    .HasColumnType("money")
                    .HasColumnName("Amount_Written_off");

                entity.Property(e => e.DateOfApproval)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_Approval");

                entity.Property(e => e.DateOfRequest)
                    .HasColumnType("date")
                    .HasColumnName("Date_of_request");

                entity.Property(e => e.ReqStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Req_status");
            });

            modelBuilder.Entity<AssetsUser>(entity =>
            {
                entity.HasKey(e => e.UId);

                entity.ToTable("Assets_User");

                entity.HasIndex(e => e.Username, "UQ__Assets_U__536C85E42545724F")
                    .IsUnique();

                entity.Property(e => e.UId).HasColumnName("U_Id");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .HasMaxLength(20)
                    .HasColumnName("type");

                entity.Property(e => e.UContact)
                    .HasMaxLength(12)
                    .HasColumnName("U_contact");

                entity.Property(e => e.UEmail)
                    .HasMaxLength(255)
                    .HasColumnName("U_email");

                entity.Property(e => e.UFname)
                    .HasMaxLength(20)
                    .HasColumnName("U_fname");

                entity.Property(e => e.ULname)
                    .HasMaxLength(20)
                    .HasColumnName("U_lname");

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<BtnCampaign>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_Campaign");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Namacampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BraCustomerType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRA_Customer_Type");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

            
                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

               

                entity.Property(e => e.Type)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

             
            });

            modelBuilder.Entity<BtnDataKantor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_DataKantor");

                entity.Property(e => e.Alamat).HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jenis).HasMaxLength(255);

                entity.Property(e => e.KantorCabang).HasMaxLength(255);

                entity.Property(e => e.Kanwil).HasMaxLength(255);

                entity.Property(e => e.Kode).HasMaxLength(255);

                entity.Property(e => e.Kode2).HasMaxLength(255);

                entity.Property(e => e.Nama).HasMaxLength(255);

                entity.Property(e => e.NamaDaerah).HasMaxLength(255);

                entity.Property(e => e.NoTelp).HasMaxLength(255);
            });

            modelBuilder.Entity<BtnDataKantorOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_DataKantor_OLD");

                entity.Property(e => e.Alamat).HasMaxLength(255);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Jenis).HasMaxLength(255);

                entity.Property(e => e.KantorCabang).HasMaxLength(255);

                entity.Property(e => e.Kanwil).HasMaxLength(255);

                entity.Property(e => e.Kode).HasMaxLength(255);

                entity.Property(e => e.Kode2).HasMaxLength(255);

                entity.Property(e => e.Nama).HasMaxLength(255);

                entity.Property(e => e.NamaDaerah).HasMaxLength(255);

                entity.Property(e => e.NoTelp).HasMaxLength(255);
            });

            modelBuilder.Entity<BtnHistoryBlandingProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_history_blanding_product");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.CcId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cc_id");

                entity.Property(e => e.Createddate)
                    .HasColumnType("datetime")
                    .HasColumnName("createddate");

                entity.Property(e => e.Productname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("productname");
            });

            modelBuilder.Entity<BtnJenisNasabah>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_JenisNasabah");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Jenis)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnMBi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_mBI");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.IdBi)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_BI");

                entity.Property(e => e.KodeReport)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.NameReport)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnMOjk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_mOJK");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.IdOjk)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_OJK");

                entity.Property(e => e.KodeReport)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.NameReport)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnMPenyebab>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_mPenyebab");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdPenyebab)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_Penyebab");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.NamaPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnNomorRekening>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.ToTable("BTN_NomorRekening");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.NomorRekening)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnParamNotif>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_ParamNotif");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JumlahSla).HasColumnName("JumlahSLA");

                entity.Property(e => e.KeteranganSla)
                    .HasMaxLength(450)
                    .IsUnicode(false)
                    .HasColumnName("KeteranganSLA");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.WarnaSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WarnaSLA");
            });

            modelBuilder.Entity<BtnParamSla>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_ParamSLA");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JumlahSla).HasColumnName("JumlahSLA");

                entity.Property(e => e.KeteranganSla)
                    .HasMaxLength(450)
                    .IsUnicode(false)
                    .HasColumnName("KeteranganSLA");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WarnaSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WarnaSLA");
            });

            modelBuilder.Entity<BtnPenyebab>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_Penyebab");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.PenyebabDesc).IsUnicode(false);

                entity.Property(e => e.PenyebabName)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnReasonCall>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_ReasonCall");

                entity.Property(e => e.Color)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("color");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.ReasonCall)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnRptBiojk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_rptBIOJK");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdBi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_BI");

                entity.Property(e => e.IdOjk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_OJK");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnSkalaPriorita>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_SkalaPrioritas");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnStatusPelapor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_StatusPelapor");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("datecreate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dateupdate");

                entity.Property(e => e.DescName)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("userupdate");
            });

            modelBuilder.Entity<BtnSumberInformasi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_SumberInformasi");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnTrxAttchment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_Trx_Attchment");

                entity.Property(e => e.CusTomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CusTomerID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Filename)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTrx)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.FolderName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnTrxTicketFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_trxTicketFile");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileName)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JudulAttchmen)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BtnTrxTticket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BTN_trxTticket");

                entity.Property(e => e.Flag)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdPenyebab)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdStatusPelapor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LokasiPengaduan)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StrPenerima)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StrStatusPelapor)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TglKejadian).HasColumnType("date");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CampaignsDataArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("campaigns_data_archive");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.FileAttach)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.GroupBlast)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MsgBlast).IsUnicode(false);

                entity.Property(e => e.NoWa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoWA");

                entity.Property(e => e.StatusBlast)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CampaignsDataDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("campaigns_data_detail");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallbackReminder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignDataId).HasColumnName("CampaignDataID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PriorityScale)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingFile)
                    .HasMaxLength(550)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Empty')");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CampaignsDataReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("campaigns_data_reminder");

                entity.Property(e => e.Account)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignDataId).HasColumnName("CampaignDataID");

                entity.Property(e => e.Channel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ReminderDate).HasColumnType("datetime");

                entity.Property(e => e.StatusReminder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CampaignsDatum>(entity =>
            {
                entity.ToTable("campaigns_data");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Agent)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CallDescription).IsUnicode(false);

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.FileAttach)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.GroupBlast)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdgroupBlast).HasColumnName("IDGroupBlast");

                entity.Property(e => e.MsgBlast).IsUnicode(false);

                entity.Property(e => e.NoWa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoWA");

                entity.Property(e => e.StatusBlast)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TypeChannel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CampaignsHeader>(entity =>
            {
                entity.ToTable("campaigns_header");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CampaignImage)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignName)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StatusActive)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('YES')");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CampaignsHeaderDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("campaigns_header_detail");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetailDescription).IsUnicode(false);

                entity.Property(e => e.DetailName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LogicData)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('YES')");

                entity.Property(e => e.TypeCall)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Preview')");
            });

            modelBuilder.Entity<CampaignsScript>(entity =>
            {
                entity.ToTable("campaigns_script");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CampaignScript)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignScriptFooter)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignScriptHeader)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DetailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DetailID");

                entity.Property(e => e.StatusActive)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('YES')");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CantasTolRoadSegment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CANTAS_TolRoadSegment");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CdrGetWebhuk>(entity =>
            {
                entity.ToTable("CDR_getWebhuk");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AnsweredTime)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("answered_time");

                entity.Property(e => e.CallId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_id");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.CallTargets)
                    .IsUnicode(false)
                    .HasColumnName("call_targets");

                entity.Property(e => e.Callee)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("callee");

                entity.Property(e => e.CalleeDomain)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("callee_domain");

                entity.Property(e => e.Caller)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("caller");

                entity.Property(e => e.CallerDisplayName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("caller_display_name");

                entity.Property(e => e.CallerDomain)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("caller_domain");

                entity.Property(e => e.DateGetData)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DidCid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("did_cid");

                entity.Property(e => e.Direction)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("direction");

                entity.Property(e => e.EndedReason)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ended_reason");

                entity.Property(e => e.EndedTime)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ended_time");

                entity.Property(e => e.EventType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("event_type");

                entity.Property(e => e.FailCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("fail_code");

                entity.Property(e => e.FinalDest)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("final_dest");

                entity.Property(e => e.OutboundCallerId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("outbound_caller_id");

                entity.Property(e => e.RecordingFile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("recording_file");

                entity.Property(e => e.RequestDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("request_description");

                entity.Property(e => e.RequestId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("request_id");

                entity.Property(e => e.RingDuration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ring_duration");

                entity.Property(e => e.RingTime)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ring_time");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("session_id");

                entity.Property(e => e.StartTime)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("start_time");

                entity.Property(e => e.TalkDuration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("talk_duration");

                entity.Property(e => e.TenantId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("tenant_id");

                entity.Property(e => e.TenantName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("tenant_name");

                entity.Property(e => e.TxtGetWebhuk).HasColumnName("txt_GetWebhuk");
            });

            modelBuilder.Entity<CollTrxDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Coll_TrxDashboard");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Type)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CollTrxDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Coll_TrxDetail");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EskalasiTicket)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusData)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTagihan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTelepon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TanggalBayar).HasColumnType("date");

                entity.Property(e => e.Telepon)
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CollTrxDetailAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Coll_TrxDetailAttachment");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DetailID");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FileNameUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CollTrxHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Coll_TrxHeader");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Ready')");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JatuhTempo).HasColumnType("date");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.JumlahTagihan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaPinjaman)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodeFrom)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodePinjaman)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodeTo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTagihan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTelepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPinjaman).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TypePinjaman)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CollTrxHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Coll_TrxHistory");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Ready')");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateGetHistory)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTagihan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTelepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CollTrxHistoryTagihan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Coll_TrxHistoryTagihan");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JumlahTagihan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MetodePembayaran)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodeTagihan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TanggalBayar).HasColumnType("date");

                entity.Property(e => e.Telepon)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CollTrxReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Coll_TrxReport");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Ready')");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateReport)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JatuhTempo).HasColumnType("date");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.JumlahTagihan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaPinjaman)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodeFrom)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodePinjaman)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodeTo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTagihan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTelepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPinjaman).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TypePinjaman)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ConfigFeatureUidesk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ConfigFeatureUidesk");

                entity.Property(e => e.ConfigName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConfigStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CtiAuxcode>(entity =>
            {
                entity.HasKey(e => e.AuxCode);

                entity.ToTable("cti_auxcode");

                entity.Property(e => e.AuxCode).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CtiCallLog>(entity =>
            {
                entity.ToTable("cti_call_log");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGENT");

                entity.Property(e => e.Callid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CALLID");

                entity.Property(e => e.Calltype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CALLTYPE");

                entity.Property(e => e.Customerid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Duration)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DURATION");

                entity.Property(e => e.Endcall)
                    .HasColumnType("datetime")
                    .HasColumnName("ENDCALL");

                entity.Property(e => e.Ext)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXT");

                entity.Property(e => e.Phoneno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PHONENO");

                entity.Property(e => e.Startcall)
                    .HasColumnType("datetime")
                    .HasColumnName("STARTCALL");

                entity.Property(e => e.Statuscall)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUSCALL");

                entity.Property(e => e.Ticketid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKETID");
            });

            modelBuilder.Entity<CtiConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cti_config");

                entity.Property(e => e.Acw).HasColumnName("ACW");

                entity.Property(e => e.Aes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AES");

                entity.Property(e => e.AesPassword)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AesUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgentEndpoint)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("agentEndpoint");

                entity.Property(e => e.BrowserPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("browserPath");

                entity.Property(e => e.CallHistoryEndpoint)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("callHistoryEndpoint");

                entity.Property(e => e.DbName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dbName");

                entity.Property(e => e.DbPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dbPassword");

                entity.Property(e => e.DbUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dbUser");

                entity.Property(e => e.DialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dialCode");

                entity.Property(e => e.IPdb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("iPDb");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InboundEndpoint)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("inboundEndpoint");

                entity.Property(e => e.OutboundEndpoint)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("outboundEndpoint");

                entity.Property(e => e.PbxAutoIn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pbxAutoIn");

                entity.Property(e => e.PbxAux)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pbxAux");

                entity.Property(e => e.PbxLogOut)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pbxLogOut");

                entity.Property(e => e.PbxLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pbxLogin");

                entity.Property(e => e.Port)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("port");

                entity.Property(e => e.Theme)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Default')");
            });

            modelBuilder.Entity<CtiGetWebhuk>(entity =>
            {
                entity.ToTable("CTI_getWebhuk");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CallId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_id");

                entity.Property(e => e.Callee)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("callee");

                entity.Property(e => e.Caller)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("caller");

                entity.Property(e => e.CallerDisplayName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("caller_display_name");

                entity.Property(e => e.CdrId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cdr_id");

                entity.Property(e => e.DateGetData)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Direction)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("direction");

                entity.Property(e => e.EventType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("event_type");

                entity.Property(e => e.RequestId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("request_id");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("session_id");

                entity.Property(e => e.TenantId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("tenant_id");

                entity.Property(e => e.TenantName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("tenant_name");

                entity.Property(e => e.Time)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("time");

                entity.Property(e => e.TxtGetWebhuk).HasColumnName("txt_GetWebhuk");
            });

            modelBuilder.Entity<CtiRole>(entity =>
            {
                entity.ToTable("cti_role");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("updated_by")
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_date")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CtiType>(entity =>
            {
                entity.ToTable("cti_type");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("updated_by")
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_date")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CtiUser>(entity =>
            {
                entity.HasKey(e => e.Username);

                entity.ToTable("cti_user");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("created_by")
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EpicLogin).HasDefaultValueSql("((0))");

                entity.Property(e => e.LoginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Login_Date");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("password")
                    .HasDefaultValueSql("('12345')");

                entity.Property(e => e.PbxPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pbxPassword");

                entity.Property(e => e.PbxUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pbxUser");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pin");

                entity.Property(e => e.ReleaseBy)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("release_by");

                entity.Property(e => e.ReleaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("release_date");

                entity.Property(e => e.Role).HasColumnName("role");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdateBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("update_by")
                    .HasDefaultValueSql("('System')");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("update_date")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<DaWeeklyDetail>(entity =>
            {
                entity.ToTable("da_weekly_detail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.DaWeeklyMasterId).HasColumnName("da_weekly_master_id");

                entity.Property(e => e.Jumat)
                    .HasColumnName("jumat")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Kamis)
                    .HasColumnName("kamis")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Minggu)
                    .HasColumnName("minggu")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Rabu)
                    .HasColumnName("rabu")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Sabtu)
                    .HasColumnName("sabtu")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Selasa)
                    .HasColumnName("selasa")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Senin)
                    .HasColumnName("senin")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<DaWeeklyMaster>(entity =>
            {
                entity.ToTable("da_weekly_master");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AgentName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.EndDate).HasMaxLength(255);

                entity.Property(e => e.StartDate).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<DataMasterPriority>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataMasterPriority");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(255)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.Criticality)
                    .HasMaxLength(255)
                    .HasColumnName("Criticality ");

                entity.Property(e => e.MSubCategoryLv1Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv1Name");

                entity.Property(e => e.MSubCategoryLv2Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv2Name");

                entity.Property(e => e.MSubCategoryLv3Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv3Name");

                entity.Property(e => e.NameMcategory).HasMaxLength(255);

                entity.Property(e => e.Pic)
                    .HasMaxLength(255)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pic1)
                    .HasMaxLength(255)
                    .HasColumnName("PIC1");

                entity.Property(e => e.Pic2)
                    .HasMaxLength(255)
                    .HasColumnName("PIC2");

                entity.Property(e => e.SelfService).HasMaxLength(255);

                entity.Property(e => e.Slalayer1).HasColumnName("SLAlayer1");

                entity.Property(e => e.Slalayer2)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer2");

                entity.Property(e => e.Slalayer3)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer3");

                entity.Property(e => e.Solutionlayer1).HasMaxLength(255);

                entity.Property(e => e.Solutionlayer2).HasMaxLength(255);

                entity.Property(e => e.Solutionlayer3).HasMaxLength(255);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.Tickettag).HasMaxLength(255);

                entity.Property(e => e.Totalsla)
                    .HasMaxLength(255)
                    .HasColumnName("TOTALSLA");
            });

            modelBuilder.Entity<DataMasterRoadtek>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataMasterRoadtek");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(255)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.Criticality)
                    .HasMaxLength(255)
                    .HasColumnName("Criticality ");

                entity.Property(e => e.MSubCategoryLv1Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv1Name");

                entity.Property(e => e.MSubCategoryLv2Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv2Name");

                entity.Property(e => e.MSubCategoryLv3Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv3Name");

                entity.Property(e => e.NameMcategory).HasMaxLength(255);

                entity.Property(e => e.Pic)
                    .HasMaxLength(255)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pic1)
                    .HasMaxLength(255)
                    .HasColumnName("PIC1");

                entity.Property(e => e.Pic2)
                    .HasMaxLength(255)
                    .HasColumnName("PIC2");

                entity.Property(e => e.SelfServiceSelfTroubleShooting)
                    .HasMaxLength(255)
                    .HasColumnName("Self - service / self-trouble shooting?");

                entity.Property(e => e.Slalayer1)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer1");

                entity.Property(e => e.Slalayer2)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer2");

                entity.Property(e => e.Slalayer3)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer3");

                entity.Property(e => e.Solutionlayer2).HasMaxLength(255);

                entity.Property(e => e.Solutionlayer3).HasMaxLength(255);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.Tickettag).HasMaxLength(255);

                entity.Property(e => e.Totalsla)
                    .HasMaxLength(255)
                    .HasColumnName("TOTALSLA");
            });

            modelBuilder.Entity<DataMasterRoadtexSolutionLayer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataMasterRoadtexSolutionLayer");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(255)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.MSubCategoryLv1Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv1Name");

                entity.Property(e => e.MSubCategoryLv2Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv2Name");

                entity.Property(e => e.MSubCategoryLv3Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv3Name");

                entity.Property(e => e.NameMcategory).HasMaxLength(255);

                entity.Property(e => e.Pic)
                    .HasMaxLength(255)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pic1)
                    .HasMaxLength(255)
                    .HasColumnName("PIC1");

                entity.Property(e => e.Pic2)
                    .HasMaxLength(255)
                    .HasColumnName("PIC2");

                entity.Property(e => e.Slalayer1)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer1");

                entity.Property(e => e.Slalayer2)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer2");

                entity.Property(e => e.Slalayer3)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer3");

                entity.Property(e => e.Solutionlayer1).HasColumnType("ntext");

                entity.Property(e => e.Solutionlayer2).HasMaxLength(255);

                entity.Property(e => e.Solutionlayer3).HasMaxLength(255);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.Tickettag).HasMaxLength(255);
            });

            modelBuilder.Entity<DataMasterSolutionLayer1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DataMasterSolutionLayer1");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(255)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.MSubCategoryLv1Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv1Name");

                entity.Property(e => e.MSubCategoryLv2Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv2Name");

                entity.Property(e => e.MSubCategoryLv3Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv3Name");

                entity.Property(e => e.NameMcategory).HasMaxLength(255);

                entity.Property(e => e.Pic)
                    .HasMaxLength(255)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pic1)
                    .HasMaxLength(255)
                    .HasColumnName("PIC1");

                entity.Property(e => e.Pic2)
                    .HasMaxLength(255)
                    .HasColumnName("PIC2");

                entity.Property(e => e.Slalayer1)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer1");

                entity.Property(e => e.Slalayer2)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer2");

                entity.Property(e => e.Slalayer3)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer3");

                entity.Property(e => e.Solutionlayer1).HasMaxLength(255);

                entity.Property(e => e.Solutionlayer2).HasMaxLength(255);

                entity.Property(e => e.Solutionlayer3).HasMaxLength(255);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.Tickettag).HasMaxLength(255);
            });

            modelBuilder.Entity<DatakelolaComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_comments");

                entity.Property(e => e.CanPrivateReply)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("can_private_reply");

                entity.Property(e => e.CommentId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment_id");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.GettimeSocmedAt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("gettime_socmed_at");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("is_active");

                entity.Property(e => e.Jenis)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Messages)
                    .HasColumnType("text")
                    .HasColumnName("messages");

                entity.Property(e => e.PostId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("post_id");

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("profile_id");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("source_socmed");

                entity.Property(e => e.StatusType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("status_type");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            });

            modelBuilder.Entity<DatakelolaPost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_post");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.GettimeSocmedAt).HasColumnName("gettime_socmed_at");

                entity.Property(e => e.IsActive)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("is_active");

                entity.Property(e => e.Jenis)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Messages)
                    .HasColumnType("text")
                    .HasColumnName("messages");

                entity.Property(e => e.PageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("page_id");

                entity.Property(e => e.PostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("post_id");

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("profile_id");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("source_socmed");

                entity.Property(e => e.StatusType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("status_type");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            });

            modelBuilder.Entity<DatakelolaPostMedium>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_post_media");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("source_id");

                entity.Property(e => e.SourceTable)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("source_table");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

                entity.Property(e => e.UrlLocal)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("url_local");

                entity.Property(e => e.UrlOrigin)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("url_origin");
            });

            modelBuilder.Entity<DatakelolaUserProfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_user_profile");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Photo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("photo");

                entity.Property(e => e.ProfileId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("profile_id");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            });

            modelBuilder.Entity<DatakelolaVAgent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_v_agents");

                entity.Property(e => e.Aux)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("aux")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("company_id");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.InHandled)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("in_handled");

                entity.Property(e => e.LastHandledAt).HasColumnName("last_handled_at");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

                entity.Property(e => e.UserId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("user_id");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("username")
                    .HasComment("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<DatakelolaVAgenthandle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_v_agenthandles");

                entity.Property(e => e.Aux)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("aux");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("company_id");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.InHandled)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("in_handled");

                entity.Property(e => e.MaxHandle).HasColumnName("max_handle");

                entity.Property(e => e.SourceId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("source_id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.UserId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("user_id");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<DatakelolaVChannelUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_v_channelUsers");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_id")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.ChannelId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("channel_id");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("email")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Photo)
                    .HasColumnType("text")
                    .HasColumnName("photo")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            });

            modelBuilder.Entity<DatakelolaVChatbody>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_v_chatbodies");

                entity.Property(e => e.Attachment)
                    .HasColumnType("text")
                    .HasColumnName("attachment")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.AttachmentInfo)
                    .HasColumnType("text")
                    .HasColumnName("attachment_info")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.ChatHeaderId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("chat_header_id");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.HasAttachment)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("has_attachment");

                entity.Property(e => e.HasMigrate)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("has_migrate");

                entity.Property(e => e.HasSeen)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("has_seen");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("message")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.MessageId)
                    .HasColumnType("text")
                    .HasColumnName("message_id")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.ReplyTimeLapsed).HasColumnName("reply_time_lapsed");

                entity.Property(e => e.SenderId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("sender_id");

                entity.Property(e => e.SenderType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sender_type")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

                entity.Property(e => e.UserHandleId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("user_handle_id");
            });

            modelBuilder.Entity<DatakelolaVChatheader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_v_chatheaders");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_id");

                entity.Property(e => e.AdditionalData)
                    .HasColumnType("text")
                    .HasColumnName("additional_data");

                entity.Property(e => e.ChannelAccountId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("channel_account_id");

                entity.Property(e => e.ChannelId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("channel_id");

                entity.Property(e => e.ChannelName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelPageId).HasColumnName("channel_page_id");

                entity.Property(e => e.ChannelPagesId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("ChannelPagesID");

                entity.Property(e => e.ChannelPagesName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelUserId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("channel_user_id");

                entity.Property(e => e.ChannelUserLatestMessageAt).HasColumnName("channel_user_latest_message_at");

                entity.Property(e => e.ChatTicketStatusId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("chat_ticket_status_id");

                entity.Property(e => e.ChatWidgetUniqueId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("chat_widget_unique_id");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("company_id");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.EndedAt).HasColumnName("ended_at");

                entity.Property(e => e.HandleBy)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("handle_by");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.Note)
                    .HasColumnType("text")
                    .HasColumnName("note");

                entity.Property(e => e.StartChatWaitingResponAt).HasColumnName("start_chat_waiting_respon_at");

                entity.Property(e => e.StartedAt).HasColumnName("started_at");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subject");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ticket_number");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            });

            modelBuilder.Entity<DatakelolaVwTodayComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("datakelola_vw_TodayComments");

                entity.Property(e => e.CanPrivateReply)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("can_private_reply");

                entity.Property(e => e.CommentId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment_id");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.GettimeSocmedAt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("gettime_socmed_at");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("is_active");

                entity.Property(e => e.Jenis)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Messages)
                    .HasColumnType("text")
                    .HasColumnName("messages");

                entity.Property(e => e.PostId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("post_id");

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("profile_id");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("source_socmed");

                entity.Property(e => e.StatusType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("status_type");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            });

            modelBuilder.Entity<Dept>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Dept");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.IdGrup).ValueGeneratedOnAdd();

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaGrup).IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailUserIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("email_USER_IN");

                entity.Property(e => e.Admintool).HasColumnName("ADMINTOOL");

                entity.Property(e => e.Authority)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORITY");

                entity.Property(e => e.Chat).HasColumnName("CHAT");

                entity.Property(e => e.Email).HasColumnName("EMAIL");

                entity.Property(e => e.Facebook).HasColumnName("FACEBOOK");

                entity.Property(e => e.Fax).HasColumnName("FAX");

                entity.Property(e => e.HandleChat).HasColumnName("HANDLE_CHAT");

                entity.Property(e => e.Inbound).HasColumnName("INBOUND");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Linkstate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LINKSTATE");

                entity.Property(e => e.Login).HasColumnName("LOGIN");

                entity.Property(e => e.MaxChat).HasColumnName("MAX_CHAT");

                entity.Property(e => e.MaxEmail).HasColumnName("MAX_EMAIL");

                entity.Property(e => e.MaxQueue).HasColumnName("MAX_QUEUE");

                entity.Property(e => e.MaxSms).HasColumnName("MAX_SMS");

                entity.Property(e => e.Organization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION");

                entity.Property(e => e.Outbound).HasColumnName("OUTBOUND");

                entity.Property(e => e.Password)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Smsblast).HasColumnName("SMSBLAST");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Twitter).HasColumnName("TWITTER");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USER_NAME");

                entity.Property(e => e.Whatsapp).HasColumnName("WHATSAPP");
            });

            modelBuilder.Entity<FailedJob>(entity =>
            {
                entity.ToTable("failed_jobs");

                entity.HasIndex(e => e.Uuid, "failed_jobs_uuid_unique")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Connection)
                    .IsRequired()
                    .HasColumnName("connection");

                entity.Property(e => e.Exception)
                    .IsRequired()
                    .HasColumnName("exception");

                entity.Property(e => e.FailedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("failed_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Payload)
                    .IsRequired()
                    .HasColumnName("payload");

                entity.Property(e => e.Queue)
                    .IsRequired()
                    .HasColumnName("queue");

                entity.Property(e => e.Uuid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("uuid");
            });

            modelBuilder.Entity<FeatureCustomRoleuser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Feature_Custom_Roleuser");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DivisiCode)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.GroupAgent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LevelUser)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<FeatureNotaInteraction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("feature_nota_interaction");

                entity.Property(e => e.DateDisposition).HasColumnType("datetime");

                entity.Property(e => e.DatePosition)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.NomorNota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDisposition)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.StatusNota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserPosition)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FeatureNotum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Feature_Nota");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsiPesan)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.JudulNota)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.LampiranNota)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.LastNotaPosition)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NomorNota)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.PenerimaNota)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.PerihalNota)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SalinanDistribusi)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.StatusNota)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('OPEN')");

                entity.Property(e => e.TanggalNota).HasColumnType("date");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GetWebhuk>(entity =>
            {
                entity.ToTable("getWebhuk");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("CommentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DateGetData)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailHuk).HasColumnType("text");

                entity.Property(e => e.FromId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FromName)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsHidden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PageId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PageID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ParentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PermalinkUrl)
                    .IsUnicode(false)
                    .HasColumnName("PermalinkURL")
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.PostId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("PostID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceItem)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumberAgent)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TxtGetWebhuk).HasColumnName("txt_GetWebhuk");

                entity.Property(e => e.VerbData)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<GetWebhukIg>(entity =>
            {
                entity.ToTable("getWebhuk_ig");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("CommentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DateGetData)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailHuk).HasColumnType("text");

                entity.Property(e => e.FromId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FromName)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsHidden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PageId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PageID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ParentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PermalinkUrl)
                    .IsUnicode(false)
                    .HasColumnName("PermalinkURL")
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.PostId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("PostID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceItem)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxtGetWebhuk).HasColumnName("txt_GetWebhuk");

                entity.Property(e => e.VerbData)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<GetWebhukMultichat>(entity =>
            {
                entity.ToTable("getWebhuk_Multichat");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("CommentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DateGetData)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailHuk).HasColumnType("text");

                entity.Property(e => e.FromId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FromName)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsHidden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PageId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PageID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ParentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PermalinkUrl)
                    .IsUnicode(false)
                    .HasColumnName("PermalinkURL")
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.PostId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("PostID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceItem)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxtGetWebhuk).HasColumnName("txt_GetWebhuk");

                entity.Property(e => e.VerbData)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<GetWebhukTw>(entity =>
            {
                entity.ToTable("getWebhuk_tw");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("CommentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DateGetData)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailHuk).HasColumnType("text");

                entity.Property(e => e.FromId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FromName)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsHidden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PageId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PageID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ParentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PermalinkUrl)
                    .IsUnicode(false)
                    .HasColumnName("PermalinkURL")
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.PostId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("PostID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceItem)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxtGetWebhuk).HasColumnName("txt_GetWebhuk");

                entity.Property(e => e.VerbData)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<GetWebhukWa>(entity =>
            {
                entity.ToTable("getWebhuk_wa");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("CommentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DateGetData)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailHuk).HasColumnType("text");

                entity.Property(e => e.FromId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("FromID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FromName)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsHidden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PageId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PageID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ParentID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PermalinkUrl)
                    .IsUnicode(false)
                    .HasColumnName("PermalinkURL")
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.PostId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("PostID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceItem)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxtGetWebhuk).HasColumnName("txt_GetWebhuk");

                entity.Property(e => e.VerbData)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<IccAssignEmailHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_ASSIGN_EMAIL_HISTORY");

                entity.Property(e => e.Agent)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AGENT");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHANNELID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dated)
                    .HasColumnType("datetime")
                    .HasColumnName("DATED")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IvcId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.Note)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");
            });

            modelBuilder.Entity<IccAssignOutboundCall>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_ASSIGN_OUTBOUND_CALL");

                entity.Property(e => e.Agent)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AGENT");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHANNELID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dated)
                    .HasColumnType("datetime")
                    .HasColumnName("DATED")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Note)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");
            });

            modelBuilder.Entity<IccAuxHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_AUX_HISTORY");

                entity.Property(e => e.Auxdate)
                    .HasColumnType("datetime")
                    .HasColumnName("AUXDATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Auxdescription)
                    .IsUnicode(false)
                    .HasColumnName("AUXDESCRIPTION");

                entity.Property(e => e.Auxid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUXID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.State)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STATE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Userid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<IccCallTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_CALL_TEMP");

                entity.Property(e => e.Channel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Flag).HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IccChatHistoryQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_CHAT_HISTORY_QUEUE");

                entity.Property(e => e.Channeltype)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CHANNELTYPE")
                    .HasDefaultValueSql("('CHAT')");

                entity.Property(e => e.CompId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.Dated)
                    .HasColumnType("datetime")
                    .HasColumnName("DATED")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.IvcId)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationID");
            });

            modelBuilder.Entity<IccEmailAddressPassword>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_EMAIL_ADDRESS_PASSWORD");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Password)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IccEmailBlastTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_EMAIL_BLAST_TEMP");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Dateread)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEREAD");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.FileId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("file_id");

                entity.Property(e => e.Filename)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.StatusUpload)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");

                entity.Property(e => e.UserUpload)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IccGroupCorporate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_GROUP_CORPORATE");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.GroupCorporate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IccHistorySla>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_History_SLA");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Slasebelumnya)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SLASebelumnya");

                entity.Property(e => e.Slasesudahnya)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SLASesudahnya");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IccLdapSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_LDAP_Setting");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAtasan)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Ldapserver)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LDAPServer");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IccLogIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_LOG_IN");

                entity.Property(e => e.ActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTIVITY_DATE");

                entity.Property(e => e.AuxDescription)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("AUX_DESCRIPTION");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("date")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Userid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<IccMasterPbxlogin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_MasterPBXLogin");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Pbxacw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBXACW");

                entity.Property(e => e.Pbxaux)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBXAUX");

                entity.Property(e => e.Pbxin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBXIN");

                entity.Property(e => e.Pbxlogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBXLogin");

                entity.Property(e => e.Pbxlogout)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBXLogout");
            });

            modelBuilder.Entity<IccMasterPbxuser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_MasterPBXuser");

                entity.Property(e => e.Desc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId).HasColumnName("LoginID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<IccSurveyTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_SURVEY_TICKET");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.DescriptionText).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.RateSurvey).HasDefaultValueSql("((0))");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IccTimestamp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ICC_TIMESTAMP");

                entity.Property(e => e.Activity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVITY");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Menu)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MENU");

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<InvLic>(entity =>
            {
                entity.ToTable("INV_LIC");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActiveLic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FlagData)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NameChannel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SiteName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.ValLic)
                    .HasMaxLength(200)
                    .HasColumnName("ValLIC");
            });

            modelBuilder.Entity<InvTrxLic>(entity =>
            {
                entity.ToTable("INV_TRX_LIC");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateLicUsed)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NameChannel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLogin)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrcValidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IRC_VALIDATION");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NameUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Name_User");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IrcValidationTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IRC_VALIDATION_TEMP");

                entity.Property(e => e.Auth)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IvcUserIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("IVC_USER_IN");

                entity.Property(e => e.Admintool).HasColumnName("ADMINTOOL");

                entity.Property(e => e.Authority)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORITY");

                entity.Property(e => e.Chat).HasColumnName("CHAT");

                entity.Property(e => e.Email).HasColumnName("EMAIL");

                entity.Property(e => e.Facebook).HasColumnName("FACEBOOK");

                entity.Property(e => e.Fax).HasColumnName("FAX");

                entity.Property(e => e.HandleChat).HasColumnName("HANDLE_CHAT");

                entity.Property(e => e.IdAux)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("IdAUX");

                entity.Property(e => e.Inbound).HasColumnName("INBOUND");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Linkstate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LINKSTATE");

                entity.Property(e => e.Login).HasColumnName("LOGIN");

                entity.Property(e => e.MaxChat).HasColumnName("MAX_CHAT");

                entity.Property(e => e.MaxQueue).HasColumnName("MAX_QUEUE");

                entity.Property(e => e.Organization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION");

                entity.Property(e => e.Outbound).HasColumnName("OUTBOUND");

                entity.Property(e => e.Password)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Smsblast).HasColumnName("SMSBLAST");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Twitter).HasColumnName("TWITTER");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USER_NAME");

                entity.Property(e => e.Whatsapp).HasColumnName("WHATSAPP");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.ToTable("jobs");

                entity.Property(e => e.JobId)
                    .ValueGeneratedNever()
                    .HasColumnName("job_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.JobDescription)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("job_description");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("job_name");

                entity.Property(e => e.JobType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("job_type");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<KanDataHarianEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KAN_DataHarianEmail");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MaxHandle)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NowHandle)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NowHandleToday)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");
            });

            modelBuilder.Entity<Libur>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("libur");

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<LogCustomerChange>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__LOG_Cust__5E5499A832481D33");

                entity.ToTable("LOG_Customer_Change");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.ActivityUser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.LogTime).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAfter)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ValueBefore)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MAccountSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mAccountSetting");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.AccountPassword)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DateInsert)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Port)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Smtp)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SMTP");

                entity.Property(e => e.Type)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MAgent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mAgent");

                entity.Property(e => e.AgentId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AgentID");

                entity.Property(e => e.Flag)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Nama)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SkillCase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MAlatTest>(entity =>
            {
                entity.HasKey(e => e.KodeAlatTest);

                entity.ToTable("mAlatTest");

                entity.Property(e => e.KodeAlatTest)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Aktif)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.NamaAlatTest)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MApplikasi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mApplikasi");

                entity.Property(e => e.Address).HasColumnType("text");

                entity.Property(e => e.Chat)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Company_Name");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Create");

                entity.Property(e => e.Email)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Email_Address");

                entity.Property(e => e.Facebook)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.Fax)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Inbound)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Instagram)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LoginType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Login_Type");

                entity.Property(e => e.Outbound)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Sms)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Telegram)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.Ticket)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.Twitter)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("User_Create");
            });

            modelBuilder.Entity<MCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mCategory");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MCategory1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mCategory_#");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MCity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mCity");

                entity.Property(e => e.CityDesc).IsUnicode(false);

                entity.Property(e => e.CityId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CityID");

                entity.Property(e => e.CityName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CityStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.RegionId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RegionID");
            });

            modelBuilder.Entity<MCustomer>(entity =>
            {
                entity.HasKey(e => e.CustomerId);

                entity.ToTable("mCustomer");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AlamatIp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AlamatIP");

                entity.Property(e => e.AutoGenerateId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AutoGenerateID");

                entity.Property(e => e.BillingKota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillingProvinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Birth).HasColumnType("date");

                entity.Property(e => e.Cabang)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreateCustomer)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Facebook)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GroupId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GroupID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Home)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Instagram)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kaskus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

               

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Login).HasDefaultValueSql("((0))");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.NamaPerusahaan)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NetworkSocial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Noktp)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOKTP");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Nomor_Rekening");

                entity.Property(e => e.Office)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Others).IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("path");

                entity.Property(e => e.Pesan).IsUnicode(false);

                entity.Property(e => e.PolisNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Relations)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SiteIP");

                entity.Property(e => e.SitePassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('REGISTER')");

                entity.Property(e => e.StatusUpdated)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.Telepon)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tittle)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Twitter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreateCustomer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NPWP)
                .HasMaxLength(100)
                .IsUnicode(false);

                entity.Property(e => e.ContactDynamicId)
                  .HasMaxLength(100)
                  .IsUnicode(false);
               
            });

            modelBuilder.Entity<MGroupType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mGroupType");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupTypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("GroupTypeID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");
            });

            modelBuilder.Entity<MGrupPertanyaan>(entity =>
            {
                entity.HasKey(e => e.KodeGrup);

                entity.ToTable("mGrupPertanyaan");

                entity.Property(e => e.KodeGrup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Aktif)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateUpdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ItemGrup)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.KodeAlatTest)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MItemPenilaian>(entity =>
            {
                entity.HasKey(e => e.KodePenilaian);

                entity.ToTable("mItemPenilaian");

                entity.Property(e => e.KodePenilaian)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Aktif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dateupdate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.KodeAlatTest)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('XXXX')");

                entity.Property(e => e.KodePertanyaan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('XXXX')");

                entity.Property(e => e.NamaPenilaian)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nilai).HasDefaultValueSql("((0))");

                entity.Property(e => e.NoUrut)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("userupdate");
            });

            modelBuilder.Entity<MItemPertanyaan>(entity =>
            {
                entity.HasKey(e => e.KodePertanyaan);

                entity.ToTable("mItemPertanyaan");

                entity.Property(e => e.KodePertanyaan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('XXXXXXX')");

                entity.Property(e => e.Aktif)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscL)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DiscM)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ItemPertanyaan).IsUnicode(false);

                entity.Property(e => e.KodeGrup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Empty')");

                entity.Property(e => e.NoUrut).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MKaryawan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mKaryawan");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Handphone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JenisKelamin).HasColumnType("text");

                entity.Property(e => e.MasaKerja)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TanggalLahir).HasColumnType("date");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MKeyword>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mKeyword");

                entity.Property(e => e.FlagSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.TextKeywords)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Text_Keywords");
            });

            modelBuilder.Entity<MKnowledge>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mKnowledge");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TimeCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MLevelUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mLevelUser");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EscalationIdentity).HasDefaultValueSql("((1))");

                entity.Property(e => e.LevelUserId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LevelUserID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MNotif>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mNotif");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ParamAkhir)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParamAwal)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParamIsi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParamSearch)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MNotifChat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mNotif_chat");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("datecreate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Jenis)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("jenis");

                entity.Property(e => e.Notif)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("notif");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("usercreate");
            });

            modelBuilder.Entity<MOrganization>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mOrganization");

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CHANNEL_CODE");

                entity.Property(e => e.Compid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COMPID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEUPDATE");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Flag)
                    .HasColumnName("FLAG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Groupid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUPID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.OrganizationId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ORGANIZATION_ID");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("USERUPDATE");
            });

            modelBuilder.Entity<MPriority>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mPriority");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Jenis)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("jenis");
            });

            modelBuilder.Entity<MRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mRegion");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.RegionDesc).HasColumnType("text");

                entity.Property(e => e.RegionId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RegionID");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegionStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");
            });

            modelBuilder.Entity<MSession>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSession");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.SessionTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSeverity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSeverity");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Jenis)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("jenis");
            });

            modelBuilder.Entity<MSourceType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSourceType");

                entity.Property(e => e.Color)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("color");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Icon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketIdcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TicketIDCode");

                entity.Property(e => e.TypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TypeID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSpamCond>(entity =>
            {
                entity.ToTable("mSpamCond");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mStatus");

                entity.Property(e => e.Color)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Icon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.LblStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("lblStatus");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Reminder)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubCategoryLv1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSubCategoryLv1");

                entity.Property(e => e.CategoryId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubCategoryLv11>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSubCategoryLv1_#");

                entity.Property(e => e.CategoryId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubCategoryLv2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSubCategoryLv2");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdBi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_BI");

                entity.Property(e => e.Idhandling)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("IDHandling");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubCategoryLv21>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSubCategoryLv2_#");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdBi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_BI");

                entity.Property(e => e.Idhandling)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("IDHandling");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubCategoryLv211>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSubCategoryLv2_1");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdBi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_BI");

                entity.Property(e => e.Idhandling)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("IDHandling");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory21id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubCategoryLv3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSubCategoryLv3");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.ContractEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Enddate");

                entity.Property(e => e.ContractStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Startdate");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idkamus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDKamus");

                entity.Property(e => e.Layer)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.License)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Priority)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseAgent)
                    .IsUnicode(false)
                    .HasColumnName("Response_Agent");

                entity.Property(e => e.Severity)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StatusCustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Status_Customer");

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory21id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1ID");

                entity.Property(e => e.SubCategory2Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TujuanEskalasi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubCategoryLv31>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSubCategoryLv3_#");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.ContractEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Enddate");

                entity.Property(e => e.ContractStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Startdate");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idkamus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDKamus");

                entity.Property(e => e.License)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Priority)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseAgent).HasColumnName("Response_Agent");

                entity.Property(e => e.Severity)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StatusCustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Status_Customer");

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TujuanEskalasi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubCategoryLv4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mSubCategoryLv4");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.ContractEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Enddate");

                entity.Property(e => e.ContractStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Startdate");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idkamus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDKamus");

                entity.Property(e => e.Layer)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.License)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Priority)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseAgent)
                    .IsUnicode(false)
                    .HasColumnName("Response_Agent");

                entity.Property(e => e.Severity)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StatusCustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Status_Customer");

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.SubCategory4Id)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory4ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TujuanEskalasi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MSubkeyword>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mSubkeyword");

                entity.Property(e => e.FlagSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idsub)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("idsub");

                entity.Property(e => e.KeywordId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Keyword_ID");

                entity.Property(e => e.TextSubkeywords)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("text_subkeywords");
            });

            modelBuilder.Entity<MasterParam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("masterParam");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateReal).HasColumnType("date");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.Untuk)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MenuMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("menuMaster");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Flag)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MenuId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MenuID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Migration>(entity =>
            {
                entity.ToTable("migrations");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Batch).HasColumnName("batch");

                entity.Property(e => e.Migration1)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("migration");
            });

            modelBuilder.Entity<MsLevelUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("msLevelUser");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EscalationIdentity)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LevelUserId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LevelUserID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MsUser>(entity =>
            {
                entity.HasKey(e => e.Username);

                entity.ToTable("msUser");

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Acd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACD");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.ActiveChat).HasColumnName("ACTIVE_CHAT");

                entity.Property(e => e.Admintool).HasColumnName("ADMINTOOL");

                entity.Property(e => e.Authority)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORITY");

                entity.Property(e => e.Chat).HasColumnName("CHAT");

                entity.Property(e => e.Collections).HasColumnName("COLLECTIONS");

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateStam)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_STAM");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEUPDATE");

                entity.Property(e => e.DescAux)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DescAUX");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasColumnName("EMAIL");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.EmailRoute)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ROUTE")
                    .IsFixedLength(true);

                entity.Property(e => e.ExpDate).HasColumnType("date");

                entity.Property(e => e.Facebook).HasColumnName("FACEBOOK");

                entity.Property(e => e.Fax).HasColumnName("FAX");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FotoAgent)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GENDER");

                entity.Property(e => e.GroupCampaign)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CAMPAIGN");

                entity.Property(e => e.HandleChat).HasColumnName("HANDLE_CHAT");

                entity.Property(e => e.IdAux)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("IdAUX");

                entity.Property(e => e.Identifier).HasColumnName("IDENTIFIER");

                entity.Property(e => e.Inbound).HasColumnName("INBOUND");

                entity.Property(e => e.Include)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE")
                    .IsFixedLength(true);

                entity.Property(e => e.Instagram).HasColumnName("INSTAGRAM");

                entity.Property(e => e.Kirimemail)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("KIRIMEMAIL");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Linkstate)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LINKSTATE")
                    .IsFixedLength(true);

                entity.Property(e => e.Login).HasColumnName("LOGIN");

                entity.Property(e => e.MaxChat).HasColumnName("MAX_CHAT");

                entity.Property(e => e.MaxEmail).HasColumnName("MAX_EMAIL");

                entity.Property(e => e.MaxOutbound).HasColumnName("MAX_OUTBOUND");

                entity.Property(e => e.MaxQueue).HasColumnName("MAX_QUEUE");

                entity.Property(e => e.MaxSms).HasColumnName("MAX_SMS");

                entity.Property(e => e.MaxWa).HasColumnName("MAX_WA");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nik)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Organization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION");

                entity.Property(e => e.Outbound).HasColumnName("OUTBOUND");

                entity.Property(e => e.PassTemp)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PATH");

                entity.Property(e => e.PbxExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBX_EXT");

                entity.Property(e => e.PbxLoinId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBX_LOIN_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.SipUser)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SIP_User");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SITE_ID");

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Smsblast).HasColumnName("SMSBLAST");

                entity.Property(e => e.Sosmed).HasColumnName("SOSMED");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.StatusUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_USER");

                entity.Property(e => e.Telemarketing).HasColumnName("TELEMARKETING");

                entity.Property(e => e.TokenMeta).HasMaxLength(500);

                entity.Property(e => e.TsExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_EXT");

                entity.Property(e => e.TsName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_NAME");

                entity.Property(e => e.Twitter).HasColumnName("TWITTER");

                entity.Property(e => e.Unitkerja)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNITKERJA");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Userid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("USERID");

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USERUPDATE");

                entity.Property(e => e.VoiceRoute)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VOICE_ROUTE")
                    .IsFixedLength(true);

                entity.Property(e => e.WhatsAppAccountId).HasColumnName("WhatsApp_AccountID");

                entity.Property(e => e.Whatsapp).HasColumnName("WHATSAPP");
            });

            modelBuilder.Entity<MsUserTrustee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("msUserTrustee");

                entity.Property(e => e.ChCha)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CH_CHA");

                entity.Property(e => e.ChEma)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CH_EMA");

                entity.Property(e => e.ChFax)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CH_FAX");

                entity.Property(e => e.ChFcb)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CH_FCB");

                entity.Property(e => e.ChFky)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CH_FKY");

                entity.Property(e => e.ChSms)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CH_SMS");

                entity.Property(e => e.ChTky)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CH_TKY");

                entity.Property(e => e.ChTwt)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CH_TWT");

                entity.Property(e => e.Customer)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.Dashboard)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('TRUE')");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.GetSosmed)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('TRUE')");

                entity.Property(e => e.Grf)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("GRF");

                entity.Property(e => e.KeySetting)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('TRUE')");

                entity.Property(e => e.LevelUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelUserSbg)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MasterTable)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.MtCon)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_CON");

                entity.Property(e => e.MtCtt)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_CTT");

                entity.Property(e => e.MtCtw)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_CTW");

                entity.Property(e => e.MtDky)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_DKY");

                entity.Property(e => e.MtEad)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_EAD");

                entity.Property(e => e.MtEal)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_EAL");

                entity.Property(e => e.MtGty)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_GTY");

                entity.Property(e => e.MtSts)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_STS");

                entity.Property(e => e.MtSty)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_STY");

                entity.Property(e => e.MtTty)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MT_TTY");

                entity.Property(e => e.Post)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('TRUE')");

                entity.Property(e => e.Report)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('TRUE')");

                entity.Property(e => e.Rpt)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("RPT")
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.Sentimen)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('TRUE')");

                entity.Property(e => e.Tic)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TIC")
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.TicCt)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TIC_CT");

                entity.Property(e => e.TicTh)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TIC_TH");

                entity.Property(e => e.ToDoList)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('TRUE')");

                entity.Property(e => e.TrusteeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TrusteeID");

                entity.Property(e => e.Um)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.UmAds)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("UM_ADS");

                entity.Property(e => e.UmStp)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("UM_STP");

                entity.Property(e => e.Umanagemen)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("UManagemen")
                    .HasDefaultValueSql("('TRUE')");
            });

            modelBuilder.Entity<Msmenu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("msmenu");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.MenuId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MenuID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mtroleuser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MTROLEUser");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.RoleId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Role_id");

                entity.Property(e => e.RoleUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Role_user");
            });

            modelBuilder.Entity<Mtrustee>(entity =>
            {
                entity.HasKey(e => e.TrusteeId);

                entity.ToTable("MTrustee");

                entity.Property(e => e.TrusteeId).HasColumnName("TrusteeID");

                entity.Property(e => e.Ch)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CH");

                entity.Property(e => e.ChEma)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CH_EMA");

                entity.Property(e => e.ChTks)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CH_TKS");

                entity.Property(e => e.ChTwt)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CH_TWT");

                entity.Property(e => e.Ct)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CT");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Ds)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DS");

                entity.Property(e => e.Gf)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GF");

                entity.Property(e => e.Kb)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("KB");

                entity.Property(e => e.LevelUser)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LEVEL_USER");

                entity.Property(e => e.LevelUserSbg)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LEVEL_USER_SBG");

                entity.Property(e => e.Mt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MT");

                entity.Property(e => e.MtCon)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_CON");

                entity.Property(e => e.MtCtr)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_CTR");

                entity.Property(e => e.MtCtw)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_CTW");

                entity.Property(e => e.MtDky)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_DKY");

                entity.Property(e => e.MtEad)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_EAD");

                entity.Property(e => e.MtEal)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_EAL");

                entity.Property(e => e.MtGty)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_GTY");

                entity.Property(e => e.MtSts)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_STS");

                entity.Property(e => e.MtSty)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_STY");

                entity.Property(e => e.MtTty)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MT_TTY");

                entity.Property(e => e.Rp)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RP");

                entity.Property(e => e.Tik)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TIK");

                entity.Property(e => e.TkCrt)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TK_CRT");

                entity.Property(e => e.TkThs)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TK_THS");

                entity.Property(e => e.Um)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UM");

                entity.Property(e => e.UmAds)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UM_ADS");

                entity.Property(e => e.UmSup)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UM_SUP");
            });

            modelBuilder.Entity<Namabulan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("namabulan");

                entity.Property(e => e.Bulan)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.NamaBulan1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NamaBulan");
            });

            modelBuilder.Entity<NewDatamasterSheet2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NewDatamasterSheet2");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(255)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.Criticality)
                    .HasMaxLength(255)
                    .HasColumnName("Criticality ");

                entity.Property(e => e.MSubCategoryLv1Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv1Name");

                entity.Property(e => e.MSubCategoryLv2Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv2Name");

                entity.Property(e => e.MSubCategoryLv3Name)
                    .HasMaxLength(255)
                    .HasColumnName("mSubCategoryLv3Name");

                entity.Property(e => e.NameMcategory).HasMaxLength(255);

                entity.Property(e => e.Pic)
                    .HasMaxLength(255)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pic1)
                    .HasMaxLength(255)
                    .HasColumnName("PIC1");

                entity.Property(e => e.Pic2)
                    .HasMaxLength(255)
                    .HasColumnName("PIC2");

                entity.Property(e => e.SelfService).HasMaxLength(255);

                entity.Property(e => e.Slalayer1).HasColumnName("SLAlayer1");

                entity.Property(e => e.Slalayer2)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer2");

                entity.Property(e => e.Slalayer3)
                    .HasMaxLength(255)
                    .HasColumnName("SLAlayer3");

                entity.Property(e => e.Solutionlayer2).HasMaxLength(255);

                entity.Property(e => e.Solutionlayer3).HasMaxLength(255);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .HasMaxLength(255)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.Tickettag).HasMaxLength(255);

                entity.Property(e => e.Totalsla)
                    .HasMaxLength(255)
                    .HasColumnName("TOTALSLA");
            });

            modelBuilder.Entity<NewTAudit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("new_tAudit");

                entity.Property(e => e.ActivityUse)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.AuditTrialId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AuditTrialID");

                entity.Property(e => e.DateUse).HasColumnType("datetime");

                entity.Property(e => e.DescriptionUse).IsUnicode(false);

                entity.Property(e => e.ModuleUse)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserRole)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUse)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NewViewOutbundCall>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("New_View_Outbund_Call");

                entity.Property(e => e.Dcreated)
                    .HasColumnType("datetime")
                    .HasColumnName("DCreated");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Reason).HasColumnType("text");

                entity.Property(e => e.ReasonCall)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Ucreated)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("UCreated");
            });

            modelBuilder.Entity<NewViewReportOutbound>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("New_View_Report_Outbound");

                entity.Property(e => e.Dcreated)
                    .HasColumnType("datetime")
                    .HasColumnName("DCreated");

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Reason).HasColumnType("text");

                entity.Property(e => e.ReasonCall)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Ucreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UCreated");
            });

            modelBuilder.Entity<OutTrxDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Out_TrxDashboard");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutTrxDashboardDuration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Out_TrxDashboardDuration");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CallType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConvertSecond)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.StartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusAgent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutTrxDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Out_TrxDetail");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EskalasiTicket)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusData)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StatusTelepon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tanggal).HasColumnType("date");

                entity.Property(e => e.Telepon)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");
            });

            modelBuilder.Entity<OutTrxDetailAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Out_TrxDetailAttachment");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DetailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DetailID");

                entity.Property(e => e.FileName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FileNameUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutTrxHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Out_TrxHeader");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UrlFileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutTrxHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Out_TrxHistory");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateGetHistory)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UrlFileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutTrxReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Out_TrxReport");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateGetHistory).HasColumnType("datetime");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UrlFileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PasswordReset>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("password_resets");

                entity.HasIndex(e => e.Email, "password_resets_email_index");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("token");
            });

            modelBuilder.Entity<PbxVCdr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBX_V_CDR");

                entity.Property(e => e.Accountcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountcode")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Amaflags).HasColumnName("amaflags");

                entity.Property(e => e.Billsec).HasColumnName("billsec");

                entity.Property(e => e.Calldate).HasColumnName("calldate");

                entity.Property(e => e.Channel)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("channel")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Clid)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("clid")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Cnam)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cnam")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Cnum)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cnum")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Dcontext)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("dcontext")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Did)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("did")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Disposition)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("disposition")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Dst)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("dst")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.DstCnam)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dst_cnam")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Dstchannel)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("dstchannel")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Lastapp)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("lastapp")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Lastdata)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("lastdata")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.OutboundCnam)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("outbound_cnam")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.OutboundCnum)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("outbound_cnum")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Recordingfile)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("recordingfile")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Src)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("src")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Uniqueid)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("uniqueid")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Userfield)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("userfield")
                    .HasComment("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<PbxVCel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBX_V_CEL");

                entity.Property(e => e.Answer)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("ANSWER")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.BridgeEnter)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("BRIDGE_ENTER")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.BridgeExit)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("BRIDGE_EXIT")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.ChanEnd)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("CHAN_END")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.ChanStart)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("CHAN_START")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Destination)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Hangup)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("HANGUP")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.LinkedidEnd)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("LINKEDID_END")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.PositionCall)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Qstatsstatus)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("qstatsstatus")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.RecordingFile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.SourceCall)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.SourceContect)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.StateCall)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Uniqueid)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("uniqueid")
                    .HasComment("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<PbxVQstat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBX_V_QSTATS");

                entity.Property(e => e.Answer).HasColumnName("ANSWER");

                entity.Property(e => e.BridgeEnter).HasColumnName("BRIDGE_ENTER");

                entity.Property(e => e.BridgeExit).HasColumnName("BRIDGE_EXIT");

                entity.Property(e => e.ChanEnd).HasColumnName("CHAN_END");

                entity.Property(e => e.ChanStart).HasColumnName("CHAN_START");

                entity.Property(e => e.CombinedWaittime)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("combined_waittime");

                entity.Property(e => e.Destination)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Hangup).HasColumnName("HANGUP");

                entity.Property(e => e.LinkedidEnd).HasColumnName("LINKEDID_END");

                entity.Property(e => e.PositionCall)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.RecordingFile)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecordingFileOri)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ringtime)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("ringtime");

                entity.Property(e => e.SourceCall)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.SourceContect)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.StateCall)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Talktime)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("talktime");

                entity.Property(e => e.Uniqueid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("uniqueid")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Waittime)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("waittime");
            });

            modelBuilder.Entity<PbxVQstatsAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBX_V_QSTATS_ALL");

                entity.Property(e => e.Agent)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("agent")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Clid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("clid")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.CombinedWaittime)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("combined_waittime");

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.Datetimeconnect).HasColumnName("datetimeconnect");

                entity.Property(e => e.Datetimeend).HasColumnName("datetimeend");

                entity.Property(e => e.Did)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("did")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Event)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("event")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.Info1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info1")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info2")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info3")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info4")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info5)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info5")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Overflow)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("overflow");

                entity.Property(e => e.Position)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("position");

                entity.Property(e => e.Queue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("queue")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.RealUniqueid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("real_uniqueid")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Ringtime)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("ringtime");

                entity.Property(e => e.Talktime)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("talktime");

                entity.Property(e => e.Uniqueid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("uniqueid")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("url")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Waittime)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("waittime");
            });

            modelBuilder.Entity<PbxVQstatsFull>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBX_V_QSTATS_FULL");

                entity.Property(e => e.Agent)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("agent")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Datetime).HasColumnName("datetime");

                entity.Property(e => e.Event)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("event")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info1")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info2")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info3")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info4)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info4")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Info5)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("info5")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Qagent).HasColumnName("qagent");

                entity.Property(e => e.Qevent).HasColumnName("qevent");

                entity.Property(e => e.Qname).HasColumnName("qname");

                entity.Property(e => e.Queue)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("queue")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.QueueStatsId).HasColumnName("queue_stats_id");

                entity.Property(e => e.Uniqueid)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("uniqueid")
                    .HasComment("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<PbxVQstatsReportmonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBX_V_QSTATS_REPORTMONTHLY");

                entity.Property(e => e.EventId)
                    .IsRequired()
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("event_id")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.Labelreport)
                    .IsRequired()
                    .HasMaxLength(630)
                    .IsUnicode(false)
                    .HasColumnName("labelreport")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.RegDate).HasColumnName("reg_date");

                entity.Property(e => e.Urutan).HasColumnName("urutan");
            });

            modelBuilder.Entity<PersonalAccessToken>(entity =>
            {
                entity.ToTable("personal_access_tokens");

                entity.HasIndex(e => e.Token, "personal_access_tokens_token_unique")
                    .IsUnique();

                entity.HasIndex(e => new { e.TokenableType, e.TokenableId }, "personal_access_tokens_tokenable_type_tokenable_id_index");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Abilities).HasColumnName("abilities");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.LastUsedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("last_used_at");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("token");

                entity.Property(e => e.TokenableId).HasColumnName("tokenable_id");

                entity.Property(e => e.TokenableType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("tokenable_type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<PnSlaeskalasi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PN_SLAEskalasi");

                entity.Property(e => e.DateCloseTicket).HasColumnType("datetime");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateCreateTicket).HasColumnType("datetime");

                entity.Property(e => e.DateEskalasi).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InteractionId).HasColumnName("InteractionID");

                entity.Property(e => e.LevelUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QiscusTicketAdditionalInfo>(entity =>
            {
                entity.ToTable("qiscus_ticket_additional_infos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("key");

                entity.Property(e => e.QiscusTicketHeaderId).HasColumnName("qiscus_ticket_header_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("value");
            });

            modelBuilder.Entity<QiscusTicketAgent>(entity =>
            {
                entity.ToTable("qiscus_ticket_agents");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Avatar)
                    .HasMaxLength(255)
                    .HasColumnName("avatar");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<QiscusTicketCustomer>(entity =>
            {
                entity.ToTable("qiscus_ticket_customers");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Avatar)
                    .HasMaxLength(255)
                    .HasColumnName("avatar");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<QiscusTicketDetail>(entity =>
            {
                entity.ToTable("qiscus_ticket_details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnName("message");

                entity.Property(e => e.MessageType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("message_type");

                entity.Property(e => e.QiscusTicketHeaderId).HasColumnName("qiscus_ticket_header_id");

                entity.Property(e => e.QiscusTicketParticipantId).HasColumnName("qiscus_ticket_participant_id");

                entity.Property(e => e.QiscusTimestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("qiscus_timestamp");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<QiscusTicketDetailPayload>(entity =>
            {
                entity.ToTable("qiscus_ticket_detail_payloads");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("key");

                entity.Property(e => e.QiscusTicketDetailId).HasColumnName("qiscus_ticket_detail_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<QiscusTicketHeader>(entity =>
            {
                entity.ToTable("qiscus_ticket_headers");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ChannelId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("channel_id");

                entity.Property(e => e.ChannelName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("channel_name");

                entity.Property(e => e.ChannelType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("channel_type");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.CustomerId).HasColumnName("customer_id");

                entity.Property(e => e.IdChannel)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("id_channel");

                entity.Property(e => e.IdRoom)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("id_room");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnName("notes");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<QiscusTicketParticipant>(entity =>
            {
                entity.ToTable("qiscus_ticket_participants");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.QiscusTicketHeaderId).HasColumnName("qiscus_ticket_header_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("user_type");
            });

            modelBuilder.Entity<QiscusTicketServer>(entity =>
            {
                entity.ToTable("qiscus_ticket_servers");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Avatar)
                    .HasMaxLength(255)
                    .HasColumnName("avatar");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<RapihTTicketMapping>(entity =>
            {
                entity.HasKey(e => e.TicketNumber);

                entity.ToTable("Rapih_tTicket_Mapping");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint).HasColumnType("text");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesForce2018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesForce_2018");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOrigin)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOwner)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Karyawan)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubType1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesForce2019>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesForce_2019");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOrigin)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOwner)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Karyawan)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubType1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesForce2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesForce_2020");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOrigin)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOwner)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Karyawan)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubType1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesForce2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesForce_2021");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOrigin)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOwner)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Karyawan)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubType1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesForce2022>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesForce_2022");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOrigin)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOwner)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Karyawan)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubType1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesForce2023>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesForce_2023");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOrigin)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOwner)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Karyawan)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubType1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesForce2024>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesForce_2024");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOrigin)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CaseOwner)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Karyawan)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubType1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SubType4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesForceCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SalesForce_Customer");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Kota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScheduleNewJob>(entity =>
            {
                entity.ToTable("ScheduleNewJob");

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.CronExpression)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<SlaTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SlaTicket");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Feature)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Jenis)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SmlImageLogin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SML_ImageLogin");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            //modelBuilder.Entity<SmlMCustomerChannel>(entity =>
            //{
            //    entity.HasKey(e => e.ValueChannel);

            //    entity.ToTable("SML_mCustomerChannel");

            //    entity.Property(e => e.ValueChannel)
            //        .HasMaxLength(200)
            //        .IsUnicode(false);

            //    entity.Property(e => e.CustomerId)
            //        .HasMaxLength(50)
            //        .IsUnicode(false)
            //        .HasColumnName("CustomerID");

            //    entity.Property(e => e.DateCreate)
            //        .HasColumnType("datetime")
            //        .HasDefaultValueSql("(getdate())");

            //    entity.Property(e => e.DateUpdate).HasColumnType("datetime");

            //    entity.Property(e => e.FlagChannel)
            //        .HasMaxLength(30)
            //        .IsUnicode(false);

            //    entity.Property(e => e.Id)
            //        .ValueGeneratedOnAdd()
            //        .HasColumnName("ID");

            //    entity.Property(e => e.Status)
            //        .HasMaxLength(1)
            //        .IsUnicode(false)
            //        .HasDefaultValueSql("('N')");

            //    entity.Property(e => e.UserCreate)
            //        .HasMaxLength(200)
            //        .IsUnicode(false)
            //        .HasDefaultValueSql("('Admin')");

            //    entity.Property(e => e.UserUpdate)
            //        .HasMaxLength(200)
            //        .IsUnicode(false);
            //});

            modelBuilder.Entity<SmlMasterUnit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SML_MasterUnit");

                entity.Property(e => e.AlamatSurat)
                    .HasMaxLength(255)
                    .HasColumnName("alamat_surat");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.NmCust)
                    .HasMaxLength(255)
                    .HasColumnName("nm_cust");

                entity.Property(e => e.NoBast)
                    .HasMaxLength(255)
                    .HasColumnName("no_bast");

                entity.Property(e => e.NoHp)
                    .HasMaxLength(255)
                    .HasColumnName("no_hp");

                entity.Property(e => e.NoKtp)
                    .HasMaxLength(255)
                    .HasColumnName("no_ktp");

                entity.Property(e => e.TgSerah)
                    .HasMaxLength(255)
                    .HasColumnName("tg_serah");

                entity.Property(e => e.TglBast)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_bast");

                entity.Property(e => e.TglGaransi)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_garansi");

                entity.Property(e => e.TglValidFinance)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_valid_finance");

                entity.Property(e => e.TglValidTeknik)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_valid_teknik");

                entity.Property(e => e.Unitdesc)
                    .HasMaxLength(255)
                    .HasColumnName("unitdesc");

                entity.Property(e => e.Unitid)
                    .HasMaxLength(255)
                    .HasColumnName("unitid");
            });

            modelBuilder.Entity<SmlMasterUnitImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SML_MasterUnitImport");

                entity.Property(e => e.AlamatSurat)
                    .HasMaxLength(255)
                    .HasColumnName("alamat_surat");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.NmCust)
                    .HasMaxLength(255)
                    .HasColumnName("nm_cust");

                entity.Property(e => e.NoBast)
                    .HasMaxLength(255)
                    .HasColumnName("no_bast");

                entity.Property(e => e.NoHp)
                    .HasMaxLength(255)
                    .HasColumnName("no_hp");

                entity.Property(e => e.NoKtp)
                    .HasMaxLength(255)
                    .HasColumnName("no_ktp");

                entity.Property(e => e.TgSerah)
                    .HasMaxLength(255)
                    .HasColumnName("tg_serah");

                entity.Property(e => e.TglBast)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_bast");

                entity.Property(e => e.TglGaransi)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_garansi");

                entity.Property(e => e.TglValidFinance)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_valid_finance");

                entity.Property(e => e.TglValidTeknik)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_valid_teknik");

                entity.Property(e => e.Unitdesc)
                    .HasMaxLength(255)
                    .HasColumnName("unitdesc");

                entity.Property(e => e.Unitid)
                    .HasMaxLength(255)
                    .HasColumnName("unitid");
            });

            modelBuilder.Entity<SmlMasterUnitlama>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SML_MasterUnitlama");

                entity.Property(e => e.AlamatSurat)
                    .HasMaxLength(255)
                    .HasColumnName("alamat_surat");

                entity.Property(e => e.Block)
                    .HasMaxLength(255)
                    .HasColumnName("block");

                entity.Property(e => e.Blockdesc)
                    .HasMaxLength(255)
                    .HasColumnName("blockdesc");

                entity.Property(e => e.CaraByrdesc)
                    .HasMaxLength(255)
                    .HasColumnName("cara_byrdesc");

                entity.Property(e => e.Clusterdesc)
                    .HasMaxLength(255)
                    .HasColumnName("clusterdesc");

                entity.Property(e => e.Daya).HasColumnName("daya");

                entity.Property(e => e.Draftbastltv).HasColumnName("draftbastltv");

                entity.Property(e => e.Draftbastpromo).HasColumnName("draftbastpromo");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.FlagPln).HasColumnName("flag_pln");

                entity.Property(e => e.HrgJualnet).HasColumnName("hrg_jualnet");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.KdTrans)
                    .HasMaxLength(255)
                    .HasColumnName("kd_trans");

                entity.Property(e => e.LuasBgn).HasColumnName("luas_bgn");

                entity.Property(e => e.LuasTnh).HasColumnName("luas_tnh");

                entity.Property(e => e.MaterialNumber)
                    .HasMaxLength(255)
                    .HasColumnName("material_number");

                entity.Property(e => e.MeterAir).HasColumnName("meter_air");

                entity.Property(e => e.NmCust)
                    .HasMaxLength(255)
                    .HasColumnName("nm_cust");

                entity.Property(e => e.NoBast)
                    .HasMaxLength(255)
                    .HasColumnName("no_bast");

                entity.Property(e => e.NoBlok)
                    .HasMaxLength(255)
                    .HasColumnName("no_blok");

                entity.Property(e => e.NoHp)
                    .HasMaxLength(255)
                    .HasColumnName("no_hp");

                entity.Property(e => e.NoKtp)
                    .HasMaxLength(255)
                    .HasColumnName("no_ktp");

                entity.Property(e => e.NoPpjb)
                    .HasMaxLength(255)
                    .HasColumnName("no_ppjb");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .HasColumnName("number");

                entity.Property(e => e.Pinjampakai).HasColumnName("pinjampakai");

                entity.Property(e => e.PpnBgn).HasColumnName("ppn_bgn");

                entity.Property(e => e.PpnTnh).HasColumnName("ppn_tnh");

                entity.Property(e => e.Projectdesc)
                    .HasMaxLength(255)
                    .HasColumnName("projectdesc");

                entity.Property(e => e.Projectid)
                    .HasMaxLength(255)
                    .HasColumnName("projectid");

                entity.Property(e => e.Projectname)
                    .HasMaxLength(255)
                    .HasColumnName("projectname");

                entity.Property(e => e.Sbudesc)
                    .HasMaxLength(255)
                    .HasColumnName("sbudesc");

                entity.Property(e => e.SoNumber)
                    .HasMaxLength(255)
                    .HasColumnName("so_number");

                entity.Property(e => e.Stawal).HasColumnName("stawal");

                entity.Property(e => e.Stotomatis).HasColumnName("stotomatis");

                entity.Property(e => e.TgSerah)
                    .HasMaxLength(255)
                    .HasColumnName("tg_serah");

                entity.Property(e => e.TglBast)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_bast");

                entity.Property(e => e.TglGaransi)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_garansi");

                entity.Property(e => e.TglKunci1)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_kunci1");

                entity.Property(e => e.TglKuncifull)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_kuncifull");

                entity.Property(e => e.TglLahir)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_lahir");

                entity.Property(e => e.TglPpjb)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_ppjb");

                entity.Property(e => e.TglSo)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_so");

                entity.Property(e => e.TglValidFinance)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_valid_finance");

                entity.Property(e => e.TglValidTeknik)
                    .HasMaxLength(255)
                    .HasColumnName("tgl_valid_teknik");

                entity.Property(e => e.Unitdesc)
                    .HasMaxLength(255)
                    .HasColumnName("unitdesc");

                entity.Property(e => e.Unitid)
                    .HasMaxLength(255)
                    .HasColumnName("unitid");

                entity.Property(e => e.Xml2sap).HasColumnName("xml2sap");
            });

            modelBuilder.Entity<SmlUnitPelanggan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SML_UnitPelanggan");

                entity.Property(e => e.ClusterDesc)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.NmCust)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("nm_cust");

                entity.Property(e => e.NoBast)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("no_bast");

                entity.Property(e => e.ProjectDesc)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipToUnit)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SbuDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TgSerlah)
                    .HasColumnType("date")
                    .HasColumnName("tg_serlah");

                entity.Property(e => e.TglBast)
                    .HasColumnType("date")
                    .HasColumnName("tgl_bast");

                entity.Property(e => e.TglGaransi)
                    .HasColumnType("date")
                    .HasColumnName("tgl_garansi");

                entity.Property(e => e.TglValidFinance)
                    .HasColumnType("date")
                    .HasColumnName("tgl_valid_finance");

                entity.Property(e => e.TglValidTeknik)
                    .HasColumnType("date")
                    .HasColumnName("tgl_valid_teknik");

                entity.Property(e => e.UnitDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UnitID");
            });

            modelBuilder.Entity<SmsBlast>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sms_Blast");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date");

                entity.Property(e => e.Flag).HasColumnName("flag");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdUpload)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id_upload");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.Phonenumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("phonenumber");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_date");
            });

            modelBuilder.Entity<SocialMediaAttachAll>(entity =>
            {
                entity.HasKey(e => new { e.SocialMediaChatId, e.FileUrl })
                    .HasName("pk_SocialMediaAttach_All");

                entity.ToTable("SocialMediaAttach_All");

                entity.Property(e => e.SocialMediaChatId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SocialMediaChatID");

                entity.Property(e => e.FileUrl)
                    .HasMaxLength(6500)
                    .IsUnicode(false)
                    .HasColumnName("FileURL");

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.SourceChat)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaChatTw>(entity =>
            {
                entity.HasKey(e => new { e.ChatId, e.DateGetdm })
                    .HasName("pk_SocialMediaChat_TW");

                entity.ToTable("SocialMediaChat_TW");

                entity.Property(e => e.ChatId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ChatID");

                entity.Property(e => e.DateGetdm)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DateGETDM");

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.AppsId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AppsID");

                entity.Property(e => e.AppsName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChatType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerPicUrl)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("CustomerPicURL")
                    .HasDefaultValueSql("('https://icons.iconarchive.com/icons/icons8/windows-8/64/City-No-Camera-icon.png')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ReceiveLocation)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiveName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RecipientId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("RecipientID");

                entity.Property(e => e.SenderId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SenderID");

                entity.Property(e => e.SenderLocation)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SenderName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SessionConvId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SessionConvID");

                entity.Property(e => e.SosmedAgent)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Sosmed_Agent");

                entity.Property(e => e.SosmedDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sosmed_Distribution_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SourceAppIdDm)
                    .IsUnicode(false)
                    .HasColumnName("SourceAppIdDM");
            });

            modelBuilder.Entity<SocialMediaChatTwAgent>(entity =>
            {
                entity.HasKey(e => e.ChatId);

                entity.ToTable("SocialMediaChat_TW_Agent");

                entity.Property(e => e.ChatId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ChatID");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.DateGet).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<SocialMediaDataAction>(entity =>
            {
                entity.HasKey(e => new { e.SocmedId, e.SocmedActionDo })
                    .HasName("pk_SocmedIDSocmedActionDo");

                entity.ToTable("SocialMediaData_Action");

                entity.Property(e => e.SocmedId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SocmedID");

                entity.Property(e => e.SocmedActionDo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateAction).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.DescAction).IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Socmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SocmedSource)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SocmedSourceDetail)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaDetail>(entity =>
            {
                entity.HasKey(e => e.DetailSosmed);

                entity.ToTable("SocialMediaDetail");

                entity.Property(e => e.DetailSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MediaUrl).HasColumnName("MediaURL");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaDetailIg>(entity =>
            {
                entity.HasKey(e => new { e.DetailSosmed, e.HeaderSosmed })
                    .HasName("pk_SocialMediaDetailIGActionDo");

                entity.ToTable("SocialMediaDetail_IG");

                entity.Property(e => e.DetailSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SosmedAgent)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("Sosmed_Agent");

                entity.Property(e => e.SosmedDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sosmed_Distribution_Date");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaDetailReply>(entity =>
            {
                entity.HasKey(e => e.DetailSosmedReply);

                entity.ToTable("SocialMediaDetail_Reply");

                entity.Property(e => e.DetailSosmedReply)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.DetailSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MediaUrl)
                    .IsUnicode(false)
                    .HasColumnName("MediaURL");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaDetailReplyIg>(entity =>
            {
                entity.HasKey(e => e.DetailSosmedReply);

                entity.ToTable("SocialMediaDetail_Reply_IG");

                entity.Property(e => e.DetailSosmedReply)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.DetailSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaDetailReplyTw>(entity =>
            {
                entity.HasKey(e => e.DetailSosmedReply);

                entity.ToTable("SocialMediaDetail_Reply_TW");

                entity.Property(e => e.DetailSosmedReply)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.DetailSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaDetailTw>(entity =>
            {
                entity.HasKey(e => e.DetailSosmed);

                entity.ToTable("SocialMediaDetail_TW");

                entity.Property(e => e.DetailSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderParentId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("HeaderParentID");

                entity.Property(e => e.HeaderSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaDistribution>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SocialMediaDistribution");

                entity.Property(e => e.AgentId)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.SocialMediaHeaderId)
                    .IsRequired()
                    .HasMaxLength(450)
                    .IsUnicode(false)
                    .HasColumnName("SocialMediaHeaderID");

                entity.Property(e => e.SocialMediaType)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaGetHashtag>(entity =>
            {
                entity.ToTable("SocialMediaGet_Hashtags");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hashtags).HasMaxLength(350);

                entity.Property(e => e.SocialPostId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SocialPostID");

                entity.Property(e => e.SourceSocialMedia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");
            });

            modelBuilder.Entity<SocialMediaHeader>(entity =>
            {
                entity.HasKey(e => e.HeaderSosmed);

                entity.ToTable("SocialMediaHeader");

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SosmedAgent)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("Sosmed_Agent");

                entity.Property(e => e.SosmedDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sosmed_Distribution_Date");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaHeaderIg>(entity =>
            {
                entity.HasKey(e => e.HeaderSosmed);

                entity.ToTable("SocialMediaHeader_IG");

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LikesCount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Likes_Count")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MediaType)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MediaUrl)
                    .IsUnicode(false)
                    .HasColumnName("MediaURL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaHeaderMention>(entity =>
            {
                entity.ToTable("SocialMediaHeaderMention");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.AgentTicketNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.CommentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("CommentID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.MediaType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MediaUrl)
                    .IsUnicode(false)
                    .HasColumnName("MediaURL");

                entity.Property(e => e.PermalinkUrl)
                    .IsUnicode(false)
                    .HasColumnName("PermalinkURL");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SosmedAgent)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("Sosmed_Agent");

                entity.Property(e => e.SosmedDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sosmed_Distribution_Date");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaHeaderMentionReply>(entity =>
            {
                entity.ToTable("SocialMediaHeaderMention_Reply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("CommentID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SosmedAgent)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("Sosmed_Agent");

                entity.Property(e => e.SosmedDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sosmed_Distribution_Date");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaHeaderTw>(entity =>
            {
                entity.HasKey(e => e.HeaderSosmed);

                entity.ToTable("SocialMediaHeader_TW");

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SosmedAgent)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Sosmed_Agent");

                entity.Property(e => e.SosmedDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sosmed_Distribution_Date");

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaLike>(entity =>
            {
                entity.ToTable("SocialMediaLike");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("CommentID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("ParentID");

                entity.Property(e => e.PostId)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("PostID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ReactionType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaLikeTw>(entity =>
            {
                entity.ToTable("SocialMediaLike_TW");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("CommentID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("ParentID");

                entity.Property(e => e.PostId)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("PostID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ReactionType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaLogInteraction>(entity =>
            {
                entity.ToTable("SocialMediaLogInteraction");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Agentname)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateTimeSocial)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SocialAccount)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SocialChannel)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SocialDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SocialMediaId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SocialMediaID");

                entity.Property(e => e.StatusData)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaPhoto>(entity =>
            {
                entity.HasKey(e => e.DetailSosmed);

                entity.ToTable("SocialMediaPhoto");

                entity.Property(e => e.DetailSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FileUrl)
                    .IsUnicode(false)
                    .HasColumnName("FileURL");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaPhotoTw>(entity =>
            {
                entity.HasKey(e => e.DetailSosmed);

                entity.ToTable("SocialMediaPhoto_TW");

                entity.Property(e => e.DetailSosmed)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.FileUrl)
                    .IsUnicode(false)
                    .HasColumnName("FileURL");

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProfileEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSocmed)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaUserProfile>(entity =>
            {
                entity.ToTable("SocialMediaUserProfile");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.SocialMediaCharacter)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SocialMediaId)
                    .HasMaxLength(450)
                    .IsUnicode(false)
                    .HasColumnName("SocialMediaID");

                entity.Property(e => e.SocialMediaName)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.SocialMediaPhoto)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.SocialMediaType)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SosmedGetHistoryDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sosmed_GetHistoryData");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("CommentID");

                entity.Property(e => e.DateGetSosmed)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FlagData)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MediaType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MediaUrl)
                    .IsUnicode(false)
                    .HasColumnName("MediaURL");

                entity.Property(e => e.Username)
                    .HasMaxLength(450)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StMenuTodolist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ST_Menu_Todolist");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Day).HasColumnName("DAY");

                entity.Property(e => e.FilterDinamis)
                    .HasColumnType("datetime")
                    .HasColumnName("FILTER_DINAMIS");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<TCloseTicket>(entity =>
            {
                entity.HasKey(e => e.TicketNumber);

                entity.ToTable("tCloseTicket");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCloseActual).HasColumnType("datetime");

                entity.Property(e => e.DateCloseAuto).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Sla)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SLA");

                entity.Property(e => e.StatusTicket)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tCustomer");

                entity.Property(e => e.Alamat).IsUnicode(false);

                entity.Property(e => e.AlamatIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AlamatIP");

                entity.Property(e => e.CustId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CustID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LastDateCreate).HasColumnType("datetime");

                entity.Property(e => e.Nama)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pesan)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Phone1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SkillCase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDispatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tDispatch");

                entity.Property(e => e.AlasanDispatch).HasColumnType("text");

                entity.Property(e => e.AlasanDispatchPic)
                    .HasColumnType("text")
                    .HasColumnName("AlasanDispatchPIC")
                    .HasDefaultValueSql("('Kosong')");

                entity.Property(e => e.DateDispatch).HasColumnType("datetime");

                entity.Property(e => e.DateDispatchPic)
                    .HasColumnType("datetime")
                    .HasColumnName("DateDispatchPIC");

                entity.Property(e => e.DateFeedBackPictoCu)
                    .HasColumnType("datetime")
                    .HasColumnName("DateFeedBackPICtoCU");

                entity.Property(e => e.DateOverSla)
                    .HasColumnType("datetime")
                    .HasColumnName("DateOverSLA");

                entity.Property(e => e.GoToLeader)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NO')");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.OverSla)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("OverSLA");

                entity.Property(e => e.ReAssign)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NO')");

                entity.Property(e => e.StatusDispatch)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TDispatchId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("tDispatchID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserDispatch)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserDispatchPic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserDispatchPIC")
                    .HasDefaultValueSql("('Kosong')");

                entity.Property(e => e.UserReAssignPictoCu)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserReAssignPICtoCU");
            });

            modelBuilder.Entity<TEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tEmail");

                entity.Property(e => e.GetId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("getID");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<TEmailIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tEMAIL_IN");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EMAIL_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<TEmailInDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tEmail_IN_Detail");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Path)
                    .IsUnicode(false)
                    .HasColumnName("PATH");
            });

            modelBuilder.Entity<TEmailTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tEmail_Temp");

                entity.Property(e => e.FileData)
                    .IsUnicode(false)
                    .HasColumnName("file_data");
            });

            modelBuilder.Entity<TEmailTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tEmailTicket");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.EmailBody).HasColumnType("text");

                entity.Property(e => e.EmailFrom)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailSubject)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TInteraction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInteraction");

                entity.Property(e => e.AgentCreate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DispatchNota)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NO')");

                entity.Property(e => e.DispatchTicket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NO')");

                entity.Property(e => e.DispatchToDept)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.DispatchToLayer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DispatchToUserName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('None')");

                entity.Property(e => e.DispatchType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchTypeName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchValueName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.FirstCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.GenesysId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InteractionType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Escalation')");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.ResponseComplaint).IsRequired();

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTicket>(entity =>
            {
                entity.HasKey(e => e.TicketNumber);

                entity.ToTable("tTicket");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AlamatPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALAMAT_PELAPOR");

                entity.Property(e => e.Attch).IsUnicode(false);

                entity.Property(e => e.CategoryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("channelid");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CompId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.ComplaintLevel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateAgentResponse).HasColumnType("datetime");

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateCreateReal).HasColumnType("datetime");

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DetailComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DispatchDivisiTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispatch_divisi_tgl");

                entity.Property(e => e.DispatchTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispatch_tgl");

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Dispatch_user");

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_PELAPOR");

                entity.Property(e => e.ExtendId).HasColumnName("ExtendID");

                entity.Property(e => e.ExtendName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendSla).HasColumnName("ExtendSLA");

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.FlagGroupTicket)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_GROUP_TICKET")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FlagOutbound)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.GroupTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdTabel)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Idlevel3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDLevel3");

                entity.Property(e => e.IndividuId).HasColumnName("IndividuID");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KirimEmail)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NO')");

                entity.Property(e => e.KirimEmailLayer)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LayerCreateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.NamaPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NAMA_PELAPOR");

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationID");

                entity.Property(e => e.OverClockSystem)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason).HasColumnType("text");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhonePelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_PELAPOR");

                entity.Property(e => e.Posting)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Severity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Slaori)
                    .HasColumnName("SLAORI")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SlaresponseAgent).HasColumnName("SLAResponseAgent");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory21ID)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory21ID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SubCategory1Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1Name")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SubCategory2Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory2Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.SubCategory3Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketGroup)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketGroupName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSource)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UnitID");

                entity.Property(e => e.UnitKerjaAgent)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserClose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VendorID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTicketExtendSla>(entity =>
            {
                entity.HasKey(e => e.TicketNumber);

                entity.ToTable("tTicket_extendSLA");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Idextend)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDExtend");

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TTicketSatu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tTicketSatus");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TUideskMultichatHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_UIDESK_MULTICHAT_HEADERS");

                entity.Property(e => e.ChannelName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelPagesName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateShort)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DurasiChat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.HandleName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NoWa)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NoWA");

                entity.Property(e => e.NoteChat).IsUnicode(false);

                entity.Property(e => e.SessionId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SessionID");

                entity.Property(e => e.StartTime)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusChat)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TUideskMultichatHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t_UIDESK_MULTICHAT_HISTORY");

                entity.Property(e => e.AccountName).IsUnicode(false);

                entity.Property(e => e.Agentname).IsUnicode(false);

                entity.Property(e => e.Attachment)
                    .IsUnicode(false)
                    .HasColumnName("attachment");

                entity.Property(e => e.AttachmentInfo)
                    .IsUnicode(false)
                    .HasColumnName("attachment_info");

                entity.Property(e => e.ChatHeaderId)
                    .IsUnicode(false)
                    .HasColumnName("chat_header_id");

                entity.Property(e => e.Code)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.CompanyId)
                    .IsUnicode(false)
                    .HasColumnName("company_id");

                entity.Property(e => e.CreatedAt)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("created_at");

                entity.Property(e => e.HandleBy)
                    .IsUnicode(false)
                    .HasColumnName("handle_by");

                entity.Property(e => e.HasAttachment)
                    .IsUnicode(false)
                    .HasColumnName("has_attachment");

                entity.Property(e => e.HasSeen)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("has_seen");

                entity.Property(e => e.Id)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.JamCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.MessageId)
                    .IsUnicode(false)
                    .HasColumnName("message_id");

                entity.Property(e => e.ReplyTimeLapsed)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("reply_time_lapsed");

                entity.Property(e => e.SenderId)
                    .IsUnicode(false)
                    .HasColumnName("sender_id");

                entity.Property(e => e.SenderType)
                    .IsUnicode(false)
                    .HasColumnName("sender_type");

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .IsUnicode(false)
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserHandleId)
                    .IsUnicode(false)
                    .HasColumnName("user_handle_id");

                entity.Property(e => e.Usercreate)
                    .IsUnicode(false)
                    .HasColumnName("usercreate");

                entity.Property(e => e.Username).IsUnicode(false);
            });

            modelBuilder.Entity<TaurusMEksternal>(entity =>
            {
                entity.ToTable("Taurus_mEksternal");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CompanyAddress)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyContact)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyEmail)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.NameEksternal)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.PicHp)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PIC_HP");

                entity.Property(e => e.TypeOfEksternal)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Wa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WA");
            });

            modelBuilder.Entity<TaurusMEscalationType>(entity =>
            {
                entity.ToTable("Taurus_mEscalationType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.NameEscalation)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TbSimulasi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tb_simulasi");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Idproses).HasColumnName("idproses");

                entity.Property(e => e.Numbersim)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("numbersim");
            });

            modelBuilder.Entity<TeleTrmKategoriProduk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrmKategoriProduk");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Produk)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Yes')");
            });

            modelBuilder.Entity<TeleTrmKategoriProdukDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrmKategoriProdukDetail");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProdukDetailName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Yes')");
            });

            modelBuilder.Entity<TeleTrxDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrxDashboard");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Type)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TeleTrxHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrxHeader");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Ready')");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TeleTrxHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrxHistory");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Ready')");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateGetHistory)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TeleTrxNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrxNote");

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EskalasiTicket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Note).HasColumnType("text");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TeleTrxNoteCall>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrxNote_Call");

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EskalasiTicket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Note).HasColumnType("text");

                entity.Property(e => e.RecordingId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("RecordingID");

                entity.Property(e => e.RecordingUrl)
                    .IsUnicode(false)
                    .HasColumnName("RecordingURL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TeleTrxProduk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrxProduk");

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetailProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DetailProdukID");

                entity.Property(e => e.DetailProdukName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Hubungan)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JatuhTempo).HasColumnType("date");

                entity.Property(e => e.Keterangan).HasColumnType("text");

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.ProdukName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusData)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Telepon)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TeleponHubungan)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TeleTrxReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrxReport");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Call)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CallReason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountingCall)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateGetHistory).HasColumnType("datetime");

                entity.Property(e => e.DistributionBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistributionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JobTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Negara)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProdukId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProdukID");

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UploadBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UploadID");

                entity.Property(e => e.UploadStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TeleTrxTask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tele_TrxTask");

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetailTask)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Kategori)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NamaTask)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NextTask)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Priority)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reminder)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempApplicationSetup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_ApplicationSetup");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Menu)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MENU");

                entity.Property(e => e.Url)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<TempBackupRestore>(entity =>
            {
                entity.HasKey(e => e.Idbackup);

                entity.ToTable("Temp_BackupRestore");

                entity.Property(e => e.Idbackup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDBackup");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescriptionBackup).IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailNotif>(entity =>
            {
                entity.ToTable("temp_EmailNotif");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.JenisNotif)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailNotifKategori>(entity =>
            {
                entity.ToTable("temp_EmailNotif_Kategori");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.IdemailNotif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailNotif");

                entity.Property(e => e.JenisKategori)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailNotifKategoriM>(entity =>
            {
                entity.ToTable("temp_EmailNotif_Kategori_m");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.JenisKategori)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailNotifRelated>(entity =>
            {
                entity.ToTable("temp_EmailNotif_Related");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.IdemailKategori)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailKategori");

                entity.Property(e => e.JenisRelated)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailNotifRelatedList>(entity =>
            {
                entity.ToTable("temp_EmailNotif_Related_List");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IdemailNotif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailNotif");

                entity.Property(e => e.IdemailNotifKategori)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailNotifKategori");

                entity.Property(e => e.IdemailRelated)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailRelated");

                entity.Property(e => e.JenisList)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LayerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LayerID");

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.UnitCaseId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UnitCaseID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailNotifRelatedListM>(entity =>
            {
                entity.ToTable("temp_EmailNotif_Related_List_m");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.JenisList)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailNotifRelatedListTrx>(entity =>
            {
                entity.ToTable("temp_EmailNotif_Related_List_trx");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IdemailNotif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailNotif");

                entity.Property(e => e.IdemailNotifKategori)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailNotifKategori");

                entity.Property(e => e.IdemailRelated)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailRelated");

                entity.Property(e => e.IdemailRelatedList)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDEmailRelatedList");

                entity.Property(e => e.JenisList)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LayerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LayerID");

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.UnitCaseId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UnitCaseID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailNotifRelatedM>(entity =>
            {
                entity.ToTable("temp_EmailNotif_Related_m");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.JenisRelated)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmailReasonCode>(entity =>
            {
                entity.ToTable("Temp_EmailReasonCode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BodyEmail).IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ReasonCodeId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ReasonCodeID");

                entity.Property(e => e.SubjectEmail).IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEscalation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_Escalation");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FlowChart)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FlowType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempExtendSubCategory>(entity =>
            {
                entity.ToTable("Temp_ExtendSubCategory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.NameExtend)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempGroupingCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_GroupingCustomer");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TrxFromCustomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TrxFromCustomerID");

                entity.Property(e => e.TrxToCustomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TrxToCustomerID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempKotakThread>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_KotakThread");

                entity.Property(e => e.ChannelData)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempKotakTodolist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_KotakTodolist");

                entity.Property(e => e.StatusData)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempLogNewHelpdesk>(entity =>
            {
                entity.ToTable("Temp_Log_New_Helpdesk");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescriptionLog).IsUnicode(false);

                entity.Property(e => e.LogType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempMasterDataShopee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_MasterDataShopee");

                entity.Property(e => e.Categ)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Code1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Code2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Column8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("column_8");

                entity.Property(e => e.L1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.L2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.L3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Urut)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempParentNumberId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_ParentNumberID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.NoteAction)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ReasonParent).HasColumnType("text");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempPbxReportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_PBX_ReportDaily");

                entity.Property(e => e.Answer)
                    .HasColumnType("datetime")
                    .HasColumnName("ANSWER");

                entity.Property(e => e.BridgeEnter)
                    .HasColumnType("datetime")
                    .HasColumnName("BRIDGE_ENTER");

                entity.Property(e => e.BridgeExit)
                    .HasColumnType("datetime")
                    .HasColumnName("BRIDGE_EXIT");

                entity.Property(e => e.ChanEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("CHAN_END");

                entity.Property(e => e.ChanStart)
                    .HasColumnType("datetime")
                    .HasColumnName("CHAN_START");

                entity.Property(e => e.Destination).IsUnicode(false);

                entity.Property(e => e.Hangup)
                    .HasColumnType("datetime")
                    .HasColumnName("HANGUP");

                entity.Property(e => e.LinkedidEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("LINKEDID_END");

                entity.Property(e => e.PositionCall).IsUnicode(false);

                entity.Property(e => e.SourceCall).IsUnicode(false);

                entity.Property(e => e.SourceContect).IsUnicode(false);

                entity.Property(e => e.StateCall).IsUnicode(false);

                entity.Property(e => e.Uniqueid)
                    .IsUnicode(false)
                    .HasColumnName("uniqueid");

                entity.Property(e => e.Username).IsUnicode(false);
            });

            modelBuilder.Entity<TempRSla>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_R_SLA");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerUnit)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.OverSlareal).HasColumnName("OverSLAReal");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UsedDaySla).HasColumnName("UsedDaySLA");

                entity.Property(e => e.UsedDaySlaok)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAOK");

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WithinSla)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("WithinSLA");
            });

            modelBuilder.Entity<TempRSurveyCsat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempR_SurveyCSAT");

                entity.Property(e => e.Channel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateCsat)
                    .HasColumnType("datetime")
                    .HasColumnName("DateCSAT");

                entity.Property(e => e.ResultCsat)
                    .HasMaxLength(550)
                    .IsUnicode(false)
                    .HasColumnName("ResultCSAT");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(105)
                    .IsUnicode(false);

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ValueDetail).IsUnicode(false);

                entity.Property(e => e.ValueDetailX)
                    .IsUnicode(false)
                    .HasColumnName("ValueDEtailX");
            });

            modelBuilder.Entity<TempResultsCsat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempResultsCsat");

                entity.Property(e => e.Channel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ResultCsat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ResultCSAT");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValueDetail)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempResultsSla>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempResultsSLA");

                entity.Property(e => e.DateCloseTicket).HasColumnType("datetime");

                entity.Property(e => e.DateCreateTicket).HasColumnType("datetime");

                entity.Property(e => e.DateEskalasi).HasColumnType("datetime");

                entity.Property(e => e.InteractionId).HasColumnName("InteractionID");

                entity.Property(e => e.LevelUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Slaescalasi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SLAEscalasi");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempResultsSm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempResultsSMS");

                entity.Property(e => e.CampaintName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("campaintName");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.FlagDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("flag_description");

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.Phonenumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phonenumber");

                entity.Property(e => e.StsDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sts_description");
            });

            modelBuilder.Entity<TempRfcExtendSubStatus>(entity =>
            {
                entity.ToTable("Temp_RFC_ExtendSubStatus");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.NameStatus)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Sla)
                    .HasColumnName("SLA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sla1)
                    .HasColumnName("SLA_1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StatusID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempRfcInsertHtml>(entity =>
            {
                entity.ToTable("Temp_RFC_InsertHTML");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Htmlbody)
                    .IsUnicode(false)
                    .HasColumnName("HTMLBody");

                entity.Property(e => e.KategoriEmail)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UseThis)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Yes')");
            });

            modelBuilder.Entity<TempRowTodolist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_rowTodolist");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AlamatPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALAMAT_PELAPOR");

                entity.Property(e => e.Attch).IsUnicode(false);

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("channelid");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CompId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.ComplaintLevel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateAgentResponse).HasColumnType("datetime");

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateCreateReal).HasColumnType("datetime");

                entity.Property(e => e.DetailComplaint).IsUnicode(false);

                entity.Property(e => e.DispatchDivisiTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispatch_divisi_tgl");

                entity.Property(e => e.DispatchTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispatch_tgl");

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Dispatch_user");

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_PELAPOR");

                entity.Property(e => e.ExtendId).HasColumnName("ExtendID");

                entity.Property(e => e.ExtendSla).HasColumnName("ExtendSLA");

                entity.Property(e => e.FlagGroupTicket)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_GROUP_TICKET");

                entity.Property(e => e.GenesysId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.GroupTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdTabel)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Idlevel3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDLevel3");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KirimEmail)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.KirimEmailLayer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NAMA_PELAPOR");

                entity.Property(e => e.Nik)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationID");

                entity.Property(e => e.OverClockSystem)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhonePelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_PELAPOR");

                entity.Property(e => e.Posting)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint).IsUnicode(false);

                entity.Property(e => e.Severity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.SlaresponseAgent).HasColumnName("SLAResponseAgent");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory1Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory2Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.SubCategory3Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketGroup)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketGroupName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSource)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UnitID");

                entity.Property(e => e.UserClose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempSettingHiStoryTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_SettingHiStoryTransaction");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FilterDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempSettingParameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_SettingParameter");

                entity.Property(e => e.Ciflength).HasColumnName("CIFLength");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Niklength).HasColumnName("NIKLength");

                entity.Property(e => e.PathHtml)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PathHTML");

                entity.Property(e => e.UploadDirectoryAttachment)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ViewDirectoryAttachment)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempSettingSurvey>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_SettingSurvey");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostUrlsurvey)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("HostURLSurvey");

                entity.Property(e => e.IconCsat)
                    .HasMaxLength(550)
                    .IsUnicode(false)
                    .HasColumnName("IconCSAT");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Type)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UrlBke)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("URL_BKE");

                entity.Property(e => e.UrlEmoticon)
                    .IsUnicode(false)
                    .HasColumnName("URL_Emoticon");

                entity.Property(e => e.UrlInvision)
                    .HasMaxLength(550)
                    .IsUnicode(false)
                    .HasColumnName("URL_Invision");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempSurvey>(entity =>
            {
                entity.ToTable("Temp_Survey");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActiveSurvey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Active_Survey");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.DescSurvey)
                    .IsUnicode(false)
                    .HasColumnName("Desc_Survey");

                entity.Property(e => e.DirectionSurvey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Direction_Survey");

                entity.Property(e => e.HtmlSurvey)
                    .IsUnicode(false)
                    .HasColumnName("HTML_Survey");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UniqueId)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UrlSurvey)
                    .HasMaxLength(550)
                    .IsUnicode(false)
                    .HasColumnName("URL_Survey");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempTrxChangePswd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_TrxChangePswd");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TrxDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TrxNewPassword)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TrxPassword)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TrxUsername)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempTrxCsat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_TrxCSAT");

                entity.Property(e => e.Channel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateCsat)
                    .HasColumnType("datetime")
                    .HasColumnName("DateCSAT")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ResultCsat)
                    .IsUnicode(false)
                    .HasColumnName("ResultCSAT");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempTrxCsatDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_TrxCSAT_Detail");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.ValueDetail)
                    .HasMaxLength(600)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TemplateBlast>(entity =>
            {
                entity.ToTable("templateBlast");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.StatusMsg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('YES')");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.UrlAttcach).IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TestDataTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Test_DataTicket");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason).HasColumnType("text");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TestTable>(entity =>
            {
                entity.HasKey(e => e.KeyNya);

                entity.ToTable("testTable");

                entity.Property(e => e.KeyNya)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.NameNya)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrDataSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TR_Data_Setting");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DateBy)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrLdapSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TR_LDAP_SETTING");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Ldapurl)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LDAPURL");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<TrOutboundCall>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TR_OutboundCall");

                entity.Property(e => e.Dcreated)
                    .HasColumnType("datetime")
                    .HasColumnName("DCreated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Reason).HasColumnType("text");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Ucreated)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("UCreated");
            });

            modelBuilder.Entity<TrOutboundCallDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TR_OutboundCall_Detail");

                entity.Property(e => e.Dcreated)
                    .HasColumnType("datetime")
                    .HasColumnName("DCreated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HeaderId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HeaderID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Reason).HasColumnType("text");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Ucreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UCreated");
            });

            modelBuilder.Entity<TrReleaseLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TR_ReleaseLog");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ReleaseBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReleaseFromLayer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseToLayer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrTemplateNotifikasiEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TR_TemplateNotifikasiEmail");

                entity.Property(e => e.Body).HasColumnType("text");

                entity.Property(e => e.BodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("Body_HTML");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FooterHtml)
                    .IsUnicode(false)
                    .HasColumnName("Footer_HTML");

                entity.Property(e => e.HeaderHtml)
                    .IsUnicode(false)
                    .HasColumnName("Header_HTML");

                entity.Property(e => e.HtmlTest)
                    .IsUnicode(false)
                    .HasColumnName("HTML_Test");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrThread>(entity =>
            {
                entity.HasKey(e => e.GenesysNumber)
                    .HasName("PK_TR_THREAD_1");

                entity.ToTable("TR_THREAD");

                entity.Property(e => e.GenesysNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountContactId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AccountContactID");

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AgentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DatePickup).HasColumnType("datetime");

                entity.Property(e => e.DateTransaction).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.FlagingEmailReply)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAGING_EMAIL_REPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PhoneChat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.Subject).IsUnicode(false);

                entity.Property(e => e.TableNumberId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TableNumberID");

                entity.Property(e => e.TableThreadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TableThreadID");

                entity.Property(e => e.ThreadAsset)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadAssetId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadAssetID");

                entity.Property(e => e.ThreadCategory)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadCategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ThreadCategoryID");

                entity.Property(e => e.ThreadChannelDetail).IsUnicode(false);

                entity.Property(e => e.ThreadCustomerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadDepartment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadDepartmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ThreadDepartmentID");

                entity.Property(e => e.ThreadDescription).IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.ThreadPriority)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadProblem).IsUnicode(false);

                entity.Property(e => e.ThreadProblemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ThreadProblemID");

                entity.Property(e => e.ThreadReason).HasColumnType("text");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Inbound')");

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrThreadActivity>(entity =>
            {
                entity.ToTable("TR_THREAD_ACTIVITY");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ChannelId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChannelID");

                entity.Property(e => e.ChannelName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.DateLastInteraction)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrThreadArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TR_THREAD_ARCHIVE");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountContactId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AccountContactID");

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DatePickup).HasColumnType("datetime");

                entity.Property(e => e.DateSolving)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateTransaction).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.FlagingEmailReply)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAGING_EMAIL_REPLY");

                entity.Property(e => e.GenesysNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PhoneChat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.Subject).IsUnicode(false);

                entity.Property(e => e.TableNumberId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TableNumberID");

                entity.Property(e => e.TableThreadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TableThreadID");

                entity.Property(e => e.ThreadAsset)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadAssetId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadAssetID");

                entity.Property(e => e.ThreadCategory)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadCategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ThreadCategoryID");

                entity.Property(e => e.ThreadChannelDetail).IsUnicode(false);

                entity.Property(e => e.ThreadCustomerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadDepartment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadDepartmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ThreadDepartmentID");

                entity.Property(e => e.ThreadDescription).IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.ThreadPriority)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadProblem).IsUnicode(false);

                entity.Property(e => e.ThreadProblemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ThreadProblemID");

                entity.Property(e => e.ThreadReason).HasColumnType("text");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Inbound')");

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrThreadTemp>(entity =>
            {
                entity.HasKey(e => e.ThreadId);

                entity.ToTable("TR_THREAD_TEMP");

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountContactId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AccountContactID");

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DatePickup).HasColumnType("datetime");

                entity.Property(e => e.GenesysNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PhoneChat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadCustomerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Inbound')");

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrTypeNotifikasiEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TR_TypeNotifikasiEmail");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmAgentProductCampaignUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmAgentProductCampaignUser");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("agent_name");

                entity.Property(e => e.AuxId).HasColumnName("AuxID");

                entity.Property(e => e.ChannelName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("channel_name");

                entity.Property(e => e.ChannelName1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChannelName");

                entity.Property(e => e.Channelid).HasColumnName("channelid");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("createdby");

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GENDER");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Maxhandle).HasColumnName("maxhandle");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nowhandle).HasColumnName("nowhandle");

                entity.Property(e => e.ProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("product_campaign");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("product_id");
            });

            modelBuilder.Entity<TrmCampaignScript>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCampaignScript");

                entity.Property(e => e.CampaignScript)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignScriptFooter)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignScriptHeader)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.StatusActive)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("mCategory");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmCategoryDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCategoryDetail");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdBi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_BI");

                entity.Property(e => e.Idhandling)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("IDHandling");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmCategoryDetail21>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCategoryDetail_2_1");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryTopic)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdBi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_BI");

                entity.Property(e => e.Idhandling)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("IDHandling");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory21id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1ID");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmCategoryReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCategoryReason");

                entity.Property(e => e.CategoryDetail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryNew)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractEnddate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Enddate");

                entity.Property(e => e.ContractStartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Startdate");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idkamus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDKamus");

                entity.Property(e => e.Layer)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.License)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Priority)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseAgent)
                    .IsUnicode(false)
                    .HasColumnName("Response_Agent");

                entity.Property(e => e.Severity)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCustomer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Status_Customer");

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory21id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1ID");

                entity.Property(e => e.SubCategory2Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory3Id)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TujuanEscalation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TujuanEskalasi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmCategoryType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCategoryType");

                entity.Property(e => e.CategoryId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmChannel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmChannel");

                entity.Property(e => e.Color)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("color");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Icon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TicketIdcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TicketIDCode");

                entity.Property(e => e.TypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TypeID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmCountingOutboundCallAgent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCountingOutboundCallAgent");

                entity.Property(e => e.Agent)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("color");
            });

            modelBuilder.Entity<TrmCountingOutboundCallStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCountingOutboundCallStatus");

                entity.Property(e => e.Callstatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("callstatus");

                entity.Property(e => e.Color)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("color");
            });

            modelBuilder.Entity<TrmCsCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCsCategory");

                entity.Property(e => e.Datecreate).HasColumnType("datetime");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dateupdate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userupdate");
            });

            modelBuilder.Entity<TrmCsStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCsStatus");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("datecreate");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dateupdate");

                entity.Property(e => e.DescName)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.StatusName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("userupdate");
            });

            modelBuilder.Entity<TrmCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCustomer");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AlamatIp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AlamatIP");

                entity.Property(e => e.Birth).HasColumnType("date");

                entity.Property(e => e.Cabang)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreateCustomer).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Facebook)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FlagChannel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GroupId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.Home)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Instagram)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kaskus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaPerusahaan)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NetworkSocial)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Noktp)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOKTP");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Nomor_Rekening");

                entity.Property(e => e.Office)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Others).HasColumnType("text");

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("path");

                entity.Property(e => e.Pesan).IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Relations)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SiteIP");

                entity.Property(e => e.SitePassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusUpdated)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tittle)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Twitter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreateCustomer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ValueChannel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            //modelBuilder.Entity<TrmCustomerChannel>(entity =>
            //{
            //    entity.HasNoKey();

            //    entity.ToView("TrmCustomerChannel");

            //    entity.Property(e => e.AgentName).IsUnicode(false);

            //    entity.Property(e => e.CustomerId)
            //        .HasMaxLength(50)
            //        .IsUnicode(false)
            //        .HasColumnName("CustomerID");

            //    entity.Property(e => e.DateCreate).HasColumnType("datetime");

            //    entity.Property(e => e.FlagChannel)
            //        .HasMaxLength(30)
            //        .IsUnicode(false);

            //    entity.Property(e => e.Id).HasColumnName("ID");

            //    entity.Property(e => e.Name)
            //        .HasMaxLength(500)
            //        .IsUnicode(false);

            //    entity.Property(e => e.StatusColor)
            //        .IsRequired()
            //        .HasMaxLength(7)
            //        .IsUnicode(false);

            //    entity.Property(e => e.StatusNya)
            //        .IsRequired()
            //        .HasMaxLength(9)
            //        .IsUnicode(false);

            //    entity.Property(e => e.UserCreate)
            //        .HasMaxLength(200)
            //        .IsUnicode(false);

            //    entity.Property(e => e.ValueChannel)
            //        .IsRequired()
            //        .HasMaxLength(200)
            //        .IsUnicode(false);
            //});

            modelBuilder.Entity<TrmCustomerUnion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmCustomerUnion");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AlamatIp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AlamatIP");

                entity.Property(e => e.AutoGenerateId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AutoGenerateID");

                entity.Property(e => e.BillingKota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillingProvinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Birth).HasColumnType("date");

                entity.Property(e => e.Cabang)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreateCustomer).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Facebook)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GroupId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.Home)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Instagram)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kaskus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kecamatan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kelurahan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KodePos)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaPerusahaan)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NetworkSocial)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Noktp)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOKTP");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Nomor_Rekening");

                entity.Property(e => e.Office)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Others).IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("path");

                entity.Property(e => e.Pesan).IsUnicode(false);

                entity.Property(e => e.PolisNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Relations)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SiteIP");

                entity.Property(e => e.SitePassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusUpdated)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tittle)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Twitter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreateCustomer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmDataBucket>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmDataBucket");

                entity.Property(e => e.CallCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_created_date");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_reason");

                entity.Property(e => e.CallerId).HasColumnName("CallerID");

                entity.Property(e => e.Channel)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DataIdnumber)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("DataIDNumber");

                entity.Property(e => e.DateDistribution).HasColumnType("datetime");

                entity.Property(e => e.DateQue).HasColumnType("datetime");

                entity.Property(e => e.DescriptionQue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");
            });

            modelBuilder.Entity<TrmEpicUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmEpicUser");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date");

                entity.Property(e => e.Gender)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GENDER");

                entity.Property(e => e.LoginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Login_Date");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.PbxPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pbxPassword");

                entity.Property(e => e.PbxUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pbxUser");

                entity.Property(e => e.Pin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pin");

                entity.Property(e => e.Role).HasColumnName("role");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdateBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("update_by");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("update_date");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<TrmGroupAgent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmGroupAgent");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.IdGrup).ValueGeneratedOnAdd();

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaGrup).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmJourneyTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmJourneyTicket");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AgentCreate).IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateThread)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DetailComplaint).IsUnicode(false);

                entity.Property(e => e.GenesysNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InteractionId).HasColumnName("InteractionID");

                entity.Property(e => e.LevelUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadDescription).IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmLoginAgentOutbound>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmLoginAgentOutbound");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("agent_name");

                entity.Property(e => e.Channelid).HasColumnName("channelid");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("createdby");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdAux)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("IdAUX");

                entity.Property(e => e.Login).HasColumnName("LOGIN");

                entity.Property(e => e.Maxhandle).HasColumnName("maxhandle");

                entity.Property(e => e.Nowhandle).HasColumnName("nowhandle");

                entity.Property(e => e.Outbound).HasColumnName("OUTBOUND");

                entity.Property(e => e.ProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("product_campaign");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<TrmMenuApplication2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmMenuApplication2");

                entity.Property(e => e.Activity)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DivId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DivID");

                entity.Property(e => e.Icon)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Param)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubMenuId).HasColumnName("SubMenuID");

                entity.Property(e => e.SubMenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmMenuApplication3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmMenuApplication3");

                entity.Property(e => e.DivId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DivID");

                entity.Property(e => e.MenuId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MenuID");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MenuTreeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Param)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SubMenuId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SubMenuID");

                entity.Property(e => e.SubMenuIdtree).HasColumnName("SubMenuIDTree");

                entity.Property(e => e.SubMenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmMenuPreviledge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmMenuPreviledge");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.MenuIdtree)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MenuIDTree");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MenuTreeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubMenuId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubMenuID");

                entity.Property(e => e.SubMenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UrlUser1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UrlUser2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UrlUser3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<TrmNotificationUserAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmNotificationUserAddress");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Department)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.NamaGrup).IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Organization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.StatusUser)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TicketClosed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_CLOSED");

                entity.Property(e => e.TicketCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_CREATE");

                entity.Property(e => e.TicketEskalasi)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_ESKALASI");

                entity.Property(e => e.TicketOverSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_OVER_SLA");

                entity.Property(e => e.Unitkerja)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNITKERJA");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Vendor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR");
            });

            modelBuilder.Entity<TrmOrg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmOrg");

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CHANNEL_CODE");

                entity.Property(e => e.Compid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COMPID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEUPDATE");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Flag).HasColumnName("FLAG");

                entity.Property(e => e.Groupid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUPID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.OrganizationId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ORGANIZATION_ID");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("USERUPDATE");
            });

            modelBuilder.Entity<TrmPriorityScale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmPriorityScale");

                entity.Property(e => e.Datecreate).HasColumnType("datetime");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmProductName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmProductName");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NamaPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Product_Created");

                entity.Property(e => e.ProductDated)
                    .HasColumnType("datetime")
                    .HasColumnName("Product_Dated");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.ProductStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Product_Status");

                entity.Property(e => e.ProductTypeId).HasColumnName("Product_TypeID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmProductType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmProductType");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdPenyebab)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_Penyebab");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmReminder");

                entity.Property(e => e.Account)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignDataId).HasColumnName("CampaignDataID");

                entity.Property(e => e.CampaignName)
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionReminder).IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ReminderDate).HasColumnType("datetime");

                entity.Property(e => e.StatusReminder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmSettingUserManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmSettingUserManagement");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LevelUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LevelUserID");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.MenuIdtree)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MenuIDTree");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MenuTreeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubMenuId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubMenuID");

                entity.Property(e => e.SubMenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TrmStatusTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmStatusTicket");

                entity.Property(e => e.Color)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Icon)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.LblStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("lblStatus");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Reminder)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.StatusData)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmTemplateBlast>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmTemplateBlast");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.StatusMsg)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.UrlAttcach).IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmThread>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmThread");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AgentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.GenesysNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneChat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadCustomerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadDescription)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmTicketNoteInternal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmTicketNoteInternal");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.ExtractResponse).IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LengthResponse).HasColumnName("lengthResponse");

                entity.Property(e => e.Note)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.Property(e => e.Ticketnumber)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TICKETNUMBER");

                entity.Property(e => e.Usercreate)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<TrmTicketReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmTicketReminder");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DescriptionReminder).IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JudulReminder)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Tanggal).HasMaxLength(4000);

                entity.Property(e => e.TanggalReminder).HasColumnType("date");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate).IsUnicode(false);
            });

            modelBuilder.Entity<TrmTicketUserCreate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmTicketUserCreate");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AlamatPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALAMAT_PELAPOR");

                entity.Property(e => e.Attch).IsUnicode(false);

                entity.Property(e => e.CategoryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("channelid");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CompId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.ComplaintLevel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateAgentResponse).HasColumnType("datetime");

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateCreateReal).HasColumnType("datetime");

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DetailComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DispatchDivisiTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispatch_divisi_tgl");

                entity.Property(e => e.DispatchTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispatch_tgl");

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Dispatch_user");

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_PELAPOR");

                entity.Property(e => e.ExtendId).HasColumnName("ExtendID");

                entity.Property(e => e.ExtendName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendSla).HasColumnName("ExtendSLA");

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.FlagGroupTicket)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_GROUP_TICKET");

                entity.Property(e => e.FlagOutbound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.GroupTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdTabel)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Idlevel3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDLevel3");

                entity.Property(e => e.IndividuId).HasColumnName("IndividuID");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KirimEmail)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.KirimEmailLayer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Layer)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.LayerCreateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NAMA_PELAPOR");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationID");

                entity.Property(e => e.OverClockSystem)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason).HasColumnType("text");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhonePelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_PELAPOR");

                entity.Property(e => e.Posting)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RefID");

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Severity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Slaori).HasColumnName("SLAORI");

                entity.Property(e => e.SlaresponseAgent).HasColumnName("SLAResponseAgent");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory1Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory21id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1ID");

                entity.Property(e => e.SubCategory21name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1Name");

                entity.Property(e => e.SubCategory2Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory2Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.SubCategory3Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketGroup)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketGroupName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSource)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UnitID");

                entity.Property(e => e.UnitKerjaAgent)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserClose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VendorID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmTypeComplaint>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmTypeComplaint");

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NameExtend)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrmUserAdd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmUserAdd");

                entity.Property(e => e.Chat).HasColumnName("CHAT");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasColumnName("EMAIL");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.Facebook).HasColumnName("FACEBOOK");

                entity.Property(e => e.Inbound).HasColumnName("INBOUND");

                entity.Property(e => e.Instagram).HasColumnName("INSTAGRAM");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaGrup).IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Organization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.Outbound).HasColumnName("OUTBOUND");

                entity.Property(e => e.Password)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Site)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.TokenMeta).HasMaxLength(500);

                entity.Property(e => e.Twitter).HasColumnName("TWITTER");

                entity.Property(e => e.Unitkerja)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNITKERJA");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Whatsapp).HasColumnName("WHATSAPP");
            });

            modelBuilder.Entity<TrmUserEscalation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmUserEscalation");

                entity.Property(e => e.Acd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACD");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.ActiveChat).HasColumnName("ACTIVE_CHAT");

                entity.Property(e => e.Admintool).HasColumnName("ADMINTOOL");

                entity.Property(e => e.Authority)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORITY");

                entity.Property(e => e.Chat).HasColumnName("CHAT");

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateStam)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_STAM");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEUPDATE");

                entity.Property(e => e.DescAux)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DescAUX");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasColumnName("EMAIL");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.EmailRoute)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ROUTE")
                    .IsFixedLength(true);

                entity.Property(e => e.ExpDate).HasColumnType("date");

                entity.Property(e => e.Facebook).HasColumnName("FACEBOOK");

                entity.Property(e => e.Fax).HasColumnName("FAX");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupCampaign)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CAMPAIGN");

                entity.Property(e => e.HandleChat).HasColumnName("HANDLE_CHAT");

                entity.Property(e => e.IdAux)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("IdAUX");

                entity.Property(e => e.Identifier).HasColumnName("IDENTIFIER");

                entity.Property(e => e.Inbound).HasColumnName("INBOUND");

                entity.Property(e => e.Include)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE")
                    .IsFixedLength(true);

                entity.Property(e => e.Instagram).HasColumnName("INSTAGRAM");

                entity.Property(e => e.Kirimemail)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("KIRIMEMAIL");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Linkstate)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LINKSTATE")
                    .IsFixedLength(true);

                entity.Property(e => e.Login).HasColumnName("LOGIN");

                entity.Property(e => e.MaxChat).HasColumnName("MAX_CHAT");

                entity.Property(e => e.MaxEmail).HasColumnName("MAX_EMAIL");

                entity.Property(e => e.MaxOutbound).HasColumnName("MAX_OUTBOUND");

                entity.Property(e => e.MaxQueue).HasColumnName("MAX_QUEUE");

                entity.Property(e => e.MaxSms).HasColumnName("MAX_SMS");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nik)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Organization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.Outbound).HasColumnName("OUTBOUND");

                entity.Property(e => e.PassTemp)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PATH");

                entity.Property(e => e.PbxExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBX_EXT");

                entity.Property(e => e.PbxLoinId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBX_LOIN_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.SipUser)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SIP_User");

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Smsblast).HasColumnName("SMSBLAST");

                entity.Property(e => e.Sosmed).HasColumnName("SOSMED");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.StatusUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_USER");

                entity.Property(e => e.TsExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_EXT");

                entity.Property(e => e.TsName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_NAME");

                entity.Property(e => e.Twitter).HasColumnName("TWITTER");

                entity.Property(e => e.Unitkerja)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNITKERJA");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USERUPDATE");

                entity.Property(e => e.VoiceRoute)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VOICE_ROUTE")
                    .IsFixedLength(true);

                entity.Property(e => e.Whatsapp).HasColumnName("WHATSAPP");
            });

            modelBuilder.Entity<TrmViewHistoryInboxEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewHistoryInboxEmail");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.Cnt).HasColumnName("CNT");

                entity.Property(e => e.CompId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DateBlending)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_BLENDING");

                entity.Property(e => e.Datereceive)
                    .HasColumnType("datetime")
                    .HasColumnName("datereceive");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Ecc1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ecc1");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagHandling)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_HANDLING");

                entity.Property(e => e.FlagingEmailReply)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAGING_EMAIL_REPLY");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId).HasColumnName("IVC_ID");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationID");

                entity.Property(e => e.OriginalTime)
                    .HasColumnType("datetime")
                    .HasColumnName("original_time");

                entity.Property(e => e.Path).IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RefID");

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TrmViewHistoryOutboxEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewHistoryOutboxEmail");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.AttachmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_ID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Dateread)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEREAD");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId).HasColumnName("IVC_ID");

                entity.Property(e => e.IvcIdIn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID_IN");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TrmViewNotificationUserAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewNotificationUserAddress");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Department)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.TicketClosed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_CLOSED");

                entity.Property(e => e.TicketCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_CREATE");

                entity.Property(e => e.TicketEskalasi)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_ESKALASI");

                entity.Property(e => e.TicketOverSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_OVER_SLA");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Vendor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR");
            });

            modelBuilder.Entity<TrmViewOutboundHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewOutboundHeader");

                entity.Property(e => e.CallAddress)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_address");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallApproveBy)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_approve_by");

                entity.Property(e => e.CallApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_approve_date");

                entity.Property(e => e.CallBiayaAkuisisi1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_biaya_akuisisi_1");

                entity.Property(e => e.CallBiayaAkuisisi1Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_1_add");

                entity.Property(e => e.CallBiayaAkuisisi2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_biaya_akuisisi_2");

                entity.Property(e => e.CallBiayaAkuisisi2Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_2_add");

                entity.Property(e => e.CallBiayaAkuisisi3Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_3_add");

                entity.Property(e => e.CallBiayaAkuisisi4Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_4_add");

                entity.Property(e => e.CallBiayaAkuisisi5Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_5_add");

                entity.Property(e => e.CallCaraBayar)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_cara_bayar");

                entity.Property(e => e.CallCounting).HasColumnName("call_counting");

                entity.Property(e => e.CallCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_created_by");

                entity.Property(e => e.CallCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_created_date");

                entity.Property(e => e.CallDescription)
                    .IsUnicode(false)
                    .HasColumnName("call_description");

                entity.Property(e => e.CallDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_distribution_date");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallFlagHandle)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_flag_handle");

                entity.Property(e => e.CallFlagingNasabah)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_flaging_nasabah");

                entity.Property(e => e.CallJenisDarlink)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_darlink");

                entity.Property(e => e.CallJenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_kelamin");

                entity.Property(e => e.CallManfaatTambahanRider)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_manfaat_tambahan_rider");

                entity.Property(e => e.CallModulType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_modul_type");

                entity.Property(e => e.CallNamaAhliWaris)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_ahli_waris");

                entity.Property(e => e.CallNamaProduct)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_product");

                entity.Property(e => e.CallNamaTenagaPenjualan)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tenaga_penjualan");

                entity.Property(e => e.CallNamaTertanggung)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tertanggung");

                entity.Property(e => e.CallName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallNominalCoi)
                    .HasColumnType("date")
                    .HasColumnName("call_nominal_COI");

                entity.Property(e => e.CallNominalCor)
                    .HasColumnType("date")
                    .HasColumnName("call_nominal_COR");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPolisNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallPremiDasarBerkala)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_premi_dasar_berkala");

                entity.Property(e => e.CallPremiTopup)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_premi_topup");

                entity.Property(e => e.CallProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_product_campaign");

                entity.Property(e => e.CallProductId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_product_id");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_reason");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_selesai");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.CallTanggalDebet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_tanggal_debet");

                entity.Property(e => e.CallTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_number");

                entity.Property(e => e.CallTicketStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_status");

                entity.Property(e => e.CallUangPertanggungan)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_uang_pertanggungan");

                entity.Property(e => e.CallUploadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.CallUploadStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_status");

                entity.Property(e => e.DateCreate).HasMaxLength(4000);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<TrmViewOutboundRider>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewOutboundRider");

                entity.Property(e => e.CallCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_created");

                entity.Property(e => e.CallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_date");

                entity.Property(e => e.CallManfaat)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("call_manfaat");

                entity.Property(e => e.CallNominal)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("call_nominal");

                entity.Property(e => e.CallNominalFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_nominal_format");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallUploadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<TrmViewPreviewAttachmentSending>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewPreviewAttachmentSending");

                entity.Property(e => e.AttachmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_ID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEUPDATE");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Encode)
                    .HasColumnType("text")
                    .HasColumnName("ENCODE");

                entity.Property(e => e.Filename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("FILENAME");

                entity.Property(e => e.Filesize)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FILESIZE");

                entity.Property(e => e.Filetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FILETYPE");

                entity.Property(e => e.Flag)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG");

                entity.Property(e => e.FlagEvent)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_EVENT");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IvcId).HasColumnName("IVC_ID");

                entity.Property(e => e.IvcidTableSending).HasColumnName("IVCID_TableSending");

                entity.Property(e => e.Ticketnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TICKETNUMBER");

                entity.Property(e => e.Url)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<TrmViewTransaksiOutboundDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewTransaksiOutboundDetail");

                entity.Property(e => e.Acd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACD");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.ActiveChat).HasColumnName("ACTIVE_CHAT");

                entity.Property(e => e.Admintool).HasColumnName("ADMINTOOL");

                entity.Property(e => e.Authority)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORITY");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallAgentName)
                    .IsUnicode(false)
                    .HasColumnName("call_agent_name");

                entity.Property(e => e.CallCustomerType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_customer_type");

                entity.Property(e => e.CallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_date");

                entity.Property(e => e.CallDescriptionDetail)
                    .IsUnicode(false)
                    .HasColumnName("call_description_detail");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallOutboundId).HasColumnName("call_outbound_id");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_reason");

                entity.Property(e => e.CallReasonDetail)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_reason_detail");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.CallTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_number");

                entity.Property(e => e.CallTicketStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_status");

                entity.Property(e => e.Chat).HasColumnName("CHAT");

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateStam)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_STAM");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEUPDATE");

                entity.Property(e => e.DescAux)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DescAUX");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasColumnName("EMAIL");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.EmailRoute)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ROUTE")
                    .IsFixedLength(true);

                entity.Property(e => e.ExpDate).HasColumnType("date");

                entity.Property(e => e.Facebook).HasColumnName("FACEBOOK");

                entity.Property(e => e.Fax).HasColumnName("FAX");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FotoAgent)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.GroupCampaign)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CAMPAIGN");

                entity.Property(e => e.HandleChat).HasColumnName("HANDLE_CHAT");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdAux)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("IdAUX");

                entity.Property(e => e.Identifier).HasColumnName("IDENTIFIER");

                entity.Property(e => e.Inbound).HasColumnName("INBOUND");

                entity.Property(e => e.Include)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE")
                    .IsFixedLength(true);

                entity.Property(e => e.Instagram).HasColumnName("INSTAGRAM");

                entity.Property(e => e.Kirimemail)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("KIRIMEMAIL");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Linkstate)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LINKSTATE")
                    .IsFixedLength(true);

                entity.Property(e => e.Login).HasColumnName("LOGIN");

                entity.Property(e => e.MaxChat).HasColumnName("MAX_CHAT");

                entity.Property(e => e.MaxEmail).HasColumnName("MAX_EMAIL");

                entity.Property(e => e.MaxOutbound).HasColumnName("MAX_OUTBOUND");

                entity.Property(e => e.MaxQueue).HasColumnName("MAX_QUEUE");

                entity.Property(e => e.MaxSms).HasColumnName("MAX_SMS");

                entity.Property(e => e.MaxWa).HasColumnName("MAX_WA");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nik)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Organization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION");

                entity.Property(e => e.Outbound).HasColumnName("OUTBOUND");

                entity.Property(e => e.PassTemp)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PATH");

                entity.Property(e => e.PbxExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBX_EXT");

                entity.Property(e => e.PbxLoinId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBX_LOIN_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.SipUser)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SIP_User");

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Smsblast).HasColumnName("SMSBLAST");

                entity.Property(e => e.Sosmed).HasColumnName("SOSMED");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.StatusUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_USER");

                entity.Property(e => e.TsExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_EXT");

                entity.Property(e => e.TsName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_NAME");

                entity.Property(e => e.Twitter).HasColumnName("TWITTER");

                entity.Property(e => e.Unitkerja)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNITKERJA");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USERUPDATE");

                entity.Property(e => e.VoiceRoute)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VOICE_ROUTE")
                    .IsFixedLength(true);

                entity.Property(e => e.WhatsAppAccountId).HasColumnName("WhatsApp_AccountID");

                entity.Property(e => e.Whatsapp).HasColumnName("WHATSAPP");
            });

            modelBuilder.Entity<TrmViewTransaksiOutboundDetailHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewTransaksiOutboundDetailHeader");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallCustomerType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_customer_type");

                entity.Property(e => e.CallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_date");

                entity.Property(e => e.CallDescriptionDetail)
                    .IsUnicode(false)
                    .HasColumnName("call_description_detail");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallJenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_kelamin");

                entity.Property(e => e.CallName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallOutboundId).HasColumnName("call_outbound_id");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_reason");

                entity.Property(e => e.CallReasonDetail)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_reason_detail");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.CallTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_number");

                entity.Property(e => e.CallTicketStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_status");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<TrmViewTransaksiOutboundHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewTransaksiOutboundHeader");

                entity.Property(e => e.CallAddress)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_address");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallApproveBy)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_approve_by");

                entity.Property(e => e.CallApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_approve_date");

                entity.Property(e => e.CallBiayaAkuisisi1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_biaya_akuisisi_1");

                entity.Property(e => e.CallBiayaAkuisisi1Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_1_add");

                entity.Property(e => e.CallBiayaAkuisisi1AddFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_biaya_akuisisi_1_add_format");

                entity.Property(e => e.CallBiayaAkuisisi2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_biaya_akuisisi_2");

                entity.Property(e => e.CallBiayaAkuisisi2Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_2_add");

                entity.Property(e => e.CallBiayaAkuisisi2AddFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_biaya_akuisisi_2_add_format");

                entity.Property(e => e.CallBiayaAkuisisi3Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_3_add");

                entity.Property(e => e.CallBiayaAkuisisi3AddFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_biaya_akuisisi_3_add_format");

                entity.Property(e => e.CallBiayaAkuisisi4Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_4_add");

                entity.Property(e => e.CallBiayaAkuisisi4AddFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_biaya_akuisisi_4_add_format");

                entity.Property(e => e.CallBiayaAkuisisi5Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_5_add");

                entity.Property(e => e.CallBiayaAkuisisi5AddFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_biaya_akuisisi_5_add_format");

                entity.Property(e => e.CallCaraBayar)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_cara_bayar");

                entity.Property(e => e.CallCounting).HasColumnName("call_counting");

                entity.Property(e => e.CallCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_created_by");

                entity.Property(e => e.CallCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_created_date");

                entity.Property(e => e.CallDescription)
                    .IsUnicode(false)
                    .HasColumnName("call_description");

                entity.Property(e => e.CallDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_distribution_date");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallFlagHandle)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_flag_handle");

                entity.Property(e => e.CallFlagingNasabah)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_flaging_nasabah");

                entity.Property(e => e.CallJenisDarlink)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_darlink");

                entity.Property(e => e.CallJenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_kelamin");

                entity.Property(e => e.CallManfaatTambahanRider)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_manfaat_tambahan_rider");

                entity.Property(e => e.CallNamaAhliWaris)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_ahli_waris");

                entity.Property(e => e.CallNamaProduct)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_product");

                entity.Property(e => e.CallNamaTenagaPenjualan)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tenaga_penjualan");

                entity.Property(e => e.CallNamaTertanggung)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tertanggung");

                entity.Property(e => e.CallName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallNominalCoi)
                    .HasColumnType("date")
                    .HasColumnName("call_nominal_COI");

                entity.Property(e => e.CallNominalCor)
                    .HasColumnType("date")
                    .HasColumnName("call_nominal_COR");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPolisNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallPremiDasarBerkala)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_premi_dasar_berkala");

                entity.Property(e => e.CallPremiDasarBerkalaFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_premi_dasar_berkala_format");

                entity.Property(e => e.CallPremiTopup)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_premi_topup");

                entity.Property(e => e.CallPremiTopupFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_premi_topup_format");

                entity.Property(e => e.CallProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_product_campaign");

                entity.Property(e => e.CallProductId).HasColumnName("call_product_id");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_reason");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_selesai");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.CallTanggalDebet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_tanggal_debet");

                entity.Property(e => e.CallTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_number");

                entity.Property(e => e.CallTicketStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_status");

                entity.Property(e => e.CallUangPertanggungan)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_uang_pertanggungan");

                entity.Property(e => e.CallUangPertanggunganFormat)
                    .HasMaxLength(4000)
                    .HasColumnName("call_uang_pertanggungan_format");

                entity.Property(e => e.CallUploadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.CallUploadStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_status");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<TrmViewTransaksiOutboundReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewTransaksiOutboundReminder");

                entity.Property(e => e.Acd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACD");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.ActiveChat).HasColumnName("ACTIVE_CHAT");

                entity.Property(e => e.Admintool).HasColumnName("ADMINTOOL");

                entity.Property(e => e.Authority)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUTHORITY");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallAgentName)
                    .IsUnicode(false)
                    .HasColumnName("call_agent_name");

                entity.Property(e => e.CallCustomerType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_customer_type");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallOutboundId).HasColumnName("call_outbound_id");

                entity.Property(e => e.CallPhoneHome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_home");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPhoneOffice)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_office");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_product_campaign");

                entity.Property(e => e.CallReminderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_reminder_date");

                entity.Property(e => e.CallReminderDescription)
                    .IsUnicode(false)
                    .HasColumnName("call_reminder_description");

                entity.Property(e => e.CallReminderStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_reminder_status");

                entity.Property(e => e.CallReminderSubject)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_reminder_subject");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_selesai");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.CallUploadId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.Chat).HasColumnName("CHAT");

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateStam)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_STAM");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEUPDATE");

                entity.Property(e => e.DescAux)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DescAUX");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasColumnName("EMAIL");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.EmailRoute)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ROUTE")
                    .IsFixedLength(true);

                entity.Property(e => e.ExpDate).HasColumnType("date");

                entity.Property(e => e.Facebook).HasColumnName("FACEBOOK");

                entity.Property(e => e.Fax).HasColumnName("FAX");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FotoAgent)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.GroupCampaign)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CAMPAIGN");

                entity.Property(e => e.HandleChat).HasColumnName("HANDLE_CHAT");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdAux)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("IdAUX");

                entity.Property(e => e.Identifier).HasColumnName("IDENTIFIER");

                entity.Property(e => e.Inbound).HasColumnName("INBOUND");

                entity.Property(e => e.Include)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDE")
                    .IsFixedLength(true);

                entity.Property(e => e.Instagram).HasColumnName("INSTAGRAM");

                entity.Property(e => e.Kirimemail)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("KIRIMEMAIL");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Linkstate)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LINKSTATE")
                    .IsFixedLength(true);

                entity.Property(e => e.Login).HasColumnName("LOGIN");

                entity.Property(e => e.MaxChat).HasColumnName("MAX_CHAT");

                entity.Property(e => e.MaxEmail).HasColumnName("MAX_EMAIL");

                entity.Property(e => e.MaxOutbound).HasColumnName("MAX_OUTBOUND");

                entity.Property(e => e.MaxQueue).HasColumnName("MAX_QUEUE");

                entity.Property(e => e.MaxSms).HasColumnName("MAX_SMS");

                entity.Property(e => e.MaxWa).HasColumnName("MAX_WA");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nik)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Organization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION");

                entity.Property(e => e.Outbound).HasColumnName("OUTBOUND");

                entity.Property(e => e.PassTemp)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PATH");

                entity.Property(e => e.PbxExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBX_EXT");

                entity.Property(e => e.PbxLoinId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PBX_LOIN_ID");

                entity.Property(e => e.Role)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROLE");

                entity.Property(e => e.SipUser)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SIP_User");

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Smsblast).HasColumnName("SMSBLAST");

                entity.Property(e => e.Sosmed).HasColumnName("SOSMED");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.StatusUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_USER");

                entity.Property(e => e.TsExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_EXT");

                entity.Property(e => e.TsName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_NAME");

                entity.Property(e => e.Twitter).HasColumnName("TWITTER");

                entity.Property(e => e.Unitkerja)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNITKERJA");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Userid).HasColumnName("USERID");

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USERUPDATE");

                entity.Property(e => e.VoiceRoute)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VOICE_ROUTE")
                    .IsFixedLength(true);

                entity.Property(e => e.WhatsAppAccountId).HasColumnName("WhatsApp_AccountID");

                entity.Property(e => e.Whatsapp).HasColumnName("WHATSAPP");
            });

            modelBuilder.Entity<TrmViewUideskTrxOutboundHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TrmViewUIDESK_TrxOutboundHeader");

                entity.Property(e => e.CallAddress)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_address");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallApproveBy)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_approve_by");

                entity.Property(e => e.CallApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_approve_date");

                entity.Property(e => e.CallBiayaAkuisisi1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_biaya_akuisisi_1");

                entity.Property(e => e.CallBiayaAkuisisi1Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_1_add");

                entity.Property(e => e.CallBiayaAkuisisi2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_biaya_akuisisi_2");

                entity.Property(e => e.CallBiayaAkuisisi2Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_2_add");

                entity.Property(e => e.CallBiayaAkuisisi3Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_3_add");

                entity.Property(e => e.CallBiayaAkuisisi4Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_4_add");

                entity.Property(e => e.CallBiayaAkuisisi5Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_5_add");

                entity.Property(e => e.CallCaraBayar)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_cara_bayar");

                entity.Property(e => e.CallCounting).HasColumnName("call_counting");

                entity.Property(e => e.CallCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_created_by");

                entity.Property(e => e.CallCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_created_date");

                entity.Property(e => e.CallDescription)
                    .IsUnicode(false)
                    .HasColumnName("call_description");

                entity.Property(e => e.CallDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_distribution_date");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallFlagHandle)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_flag_handle");

                entity.Property(e => e.CallFlagingNasabah)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_flaging_nasabah");

                entity.Property(e => e.CallJenisDarlink)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_darlink");

                entity.Property(e => e.CallJenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_kelamin");

                entity.Property(e => e.CallManfaatTambahanRider)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_manfaat_tambahan_rider");

                entity.Property(e => e.CallNamaAhliWaris)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_ahli_waris");

                entity.Property(e => e.CallNamaProduct)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_product");

                entity.Property(e => e.CallNamaTenagaPenjualan)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tenaga_penjualan");

                entity.Property(e => e.CallNamaTertanggung)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tertanggung");

                entity.Property(e => e.CallName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallNominalCoi)
                    .HasColumnType("date")
                    .HasColumnName("call_nominal_COI");

                entity.Property(e => e.CallNominalCor)
                    .HasColumnType("date")
                    .HasColumnName("call_nominal_COR");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPhoneNumberTrim)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number_trim");

                entity.Property(e => e.CallPolisNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallPremiDasarBerkala)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_premi_dasar_berkala");

                entity.Property(e => e.CallPremiTopup)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_premi_topup");

                entity.Property(e => e.CallProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_product_campaign");

                entity.Property(e => e.CallProductId).HasColumnName("call_product_id");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_reason");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_selesai");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.CallTanggalDebet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_tanggal_debet");

                entity.Property(e => e.CallTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_number");

                entity.Property(e => e.CallTicketStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_status");

                entity.Property(e => e.CallUangPertanggungan)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_uang_pertanggungan");

                entity.Property(e => e.CallUploadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.CallUploadStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_status");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<Txbackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TXBACKUP");

                entity.Property(e => e.Backupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("BACKUPDATE");

                entity.Property(e => e.Deletefile)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("DELETEFILE");

                entity.Property(e => e.Destinationpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESTINATIONPATH");

                entity.Property(e => e.Enddate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Hours)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HOURS");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Sourcepath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SOURCEPATH");

                entity.Property(e => e.Startdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Totalrecord)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOTALRECORD");

                entity.Property(e => e.Totalrecordexecute)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOTALRECORDEXECUTE");
            });

            modelBuilder.Entity<Txbackupsetup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TXBACKUPSETUP");

                entity.Property(e => e.Apppath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APPPATH");

                entity.Property(e => e.Delfile)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DELFILE");

                entity.Property(e => e.Destpath)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESTPATH");

                entity.Property(e => e.Hours)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HOURS");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Monthlength)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MONTHLENGTH");

                entity.Property(e => e.Mp3folder)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MP3FOLDER");

                entity.Property(e => e.Options)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OPTIONS");

                entity.Property(e => e.Process)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROCESS");

                entity.Property(e => e.Schedule)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SCHEDULE");

                entity.Property(e => e.Videofolder)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VIDEOFOLDER");
            });

            modelBuilder.Entity<UideskCustomerChannel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UIDESK_CustomerChannel");
            });

            modelBuilder.Entity<UideskEmailAuthType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("UIDESK_EmailAuthType");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.AuthType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("authType");
            });

            modelBuilder.Entity<UideskEmailService>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("UIDESK_EmailServices");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<UideskEmailServiceMethod>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("UIDESK_EmailServiceMethod");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<UideskEmailSignature>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("UIDESK_EmailSignature");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Signature)
                    .IsUnicode(false)
                    .HasColumnName("signature");
            });

            modelBuilder.Entity<UideskForgotPasswordTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_ForgotPasswordTemplate");

                entity.Property(e => e.Body)
                    .IsUnicode(false)
                    .HasColumnName("BODY");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Subject)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<UideskFoto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_Foto");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskListQue>(entity =>
            {
                entity.HasKey(e => new { e.DataIdnumber, e.Channel })
                    .HasName("pk_ListQue");

                entity.ToTable("UIDESK_LIST_QUE");

                entity.Property(e => e.DataIdnumber)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("DataIDNumber");

                entity.Property(e => e.Channel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateDistribution).HasColumnType("datetime");

                entity.Property(e => e.DateQue)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescriptionQue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");
            });

            modelBuilder.Entity<UideskListQueCollection>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_LIST_QUE_COLLECTION");

                entity.Property(e => e.Channel)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DataIdnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DataIDNumber");

                entity.Property(e => e.DateDistribution).HasColumnType("datetime");

                entity.Property(e => e.DateQue).HasColumnType("datetime");

                entity.Property(e => e.DescriptionQue)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");
            });

            modelBuilder.Entity<UideskListQueOutbound>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_LIST_QUE_OUTBOUND");

                entity.Property(e => e.Channel)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DataIdnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DataIDNumber");

                entity.Property(e => e.DateDistribution).HasColumnType("datetime");

                entity.Property(e => e.DateQue).HasColumnType("datetime");

                entity.Property(e => e.DescriptionQue)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");
            });

            modelBuilder.Entity<UideskListQueTelemarketing>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_LIST_QUE_TELEMARKETING");

                entity.Property(e => e.Channel)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DataIdnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DataIDNumber");

                entity.Property(e => e.DateDistribution).HasColumnType("datetime");

                entity.Property(e => e.DateQue).HasColumnType("datetime");

                entity.Property(e => e.DescriptionQue)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");
            });

            modelBuilder.Entity<UideskLogChangePassword>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_logChangePassword");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TrxDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TrxNewPassword)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TrxPassword)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TrxUserCreate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TrxUsername)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskMergeTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_MERGE_TICKET");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.StatusSebelum)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TicketGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WaktuPenggabungan).HasColumnType("datetime");
            });

            modelBuilder.Entity<UideskNotificationAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_NotificationAddress");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.TicketClosed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_CLOSED");

                entity.Property(e => e.TicketCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_CREATE");

                entity.Property(e => e.TicketEskalasi)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_ESKALASI");

                entity.Property(e => e.TicketOverSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TICKET_OVER_SLA");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Vendor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VENDOR")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<UideskNotificationSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_NotificationSetting");

                entity.Property(e => e.Category)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<UideskNotificationTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_NotificationTemplate");

                entity.Property(e => e.Body)
                    .IsUnicode(false)
                    .HasColumnName("BODY");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CATEGORY");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Footer)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FOOTER");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Subject)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECT");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<UideskOfficeHour>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_OFFICE_HOUR");

                entity.Property(e => e.EndTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.StartTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TypeHour)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskProductName>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_ProductName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProductCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Product_Created");

                entity.Property(e => e.ProductDated)
                    .HasColumnType("datetime")
                    .HasColumnName("Product_Dated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.ProductStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Product_Status");

                entity.Property(e => e.ProductTypeId).HasColumnName("Product_TypeID");
            });

            modelBuilder.Entity<UideskServerProfile>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("UIDESK_ServerProfile");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.DbName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("db_name");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.ServerName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("server_name");

                entity.Property(e => e.UserLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_login");
            });

            modelBuilder.Entity<UideskServerProtocol>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("UIDESK_ServerProtocol");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("usercreate");
            });

            modelBuilder.Entity<UideskServerProtocolOut>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("UIDESK_ServerProtocolOut");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("usercreate");
            });

            modelBuilder.Entity<UideskSmsBlast>(entity =>
            {
                entity.ToTable("UIDESK_SMS_BLAST");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CampaintName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("campaintName");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateSchedule)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSchedule");

                entity.Property(e => e.Flag).HasColumnName("flag");

                entity.Property(e => e.IdUpload)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id_upload");

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.Phonenumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phonenumber");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status_id");

                entity.Property(e => e.Updatedate)
                    .HasColumnType("datetime")
                    .HasColumnName("updatedate");
            });

            modelBuilder.Entity<UideskSocialAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId);

                entity.ToTable("UIDESK_SOCIAL_ACCOUNT");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.AccountToken)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.AccountUrl)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("AccountURL");

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.SocialMedia)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SourceID");

                entity.Property(e => e.Webhook)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskSocialMediaAccount>(entity =>
            {
                entity.HasKey(e => e.Idnya);

                entity.ToTable("UIDESK_SocialMediaAccount");

                entity.Property(e => e.Idnya)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDNya");

                entity.Property(e => e.FollowerCount).HasColumnName("follower_count");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsBusinessFollowUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("is_business_follow_user");

                entity.Property(e => e.IsUserFollowBusiness)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("is_user_follow_business");

                entity.Property(e => e.IsVerifiedUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("is_verified_user");

                entity.Property(e => e.NameNya)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.ProfilePic)
                    .IsUnicode(false)
                    .HasColumnName("profile_pic");

                entity.Property(e => e.SocialMedia)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(350)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTempNoteInstan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_Temp_NoteInstan");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Note)
                    .HasColumnType("text")
                    .HasColumnName("NOTE");

                entity.Property(e => e.NumberId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NUMBER_ID");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<UideskTempNoteInternal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_Temp_NoteInternal");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Note)
                    .IsUnicode(false)
                    .HasColumnName("NOTE");

                entity.Property(e => e.Ticketnumber)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TICKETNUMBER");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<UideskThreadAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_ThreadAttachment");

                entity.Property(e => e.CusTomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CusTomerID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileSize)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Filename)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTrx)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.FolderName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTicketAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TicketAttachment");

                entity.Property(e => e.CusTomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CusTomerID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileSize)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Filename)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTrx)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.FolderName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InteractionId).HasColumnName("InteractionID");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTicketReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TicketReminder");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DescriptionReminder).IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.JudulReminder)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TanggalReminder).HasColumnType("date");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmAux>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmAux");

                entity.Property(e => e.AuxType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate).HasColumnType("datetime");

                entity.Property(e => e.Deskripsi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.TimeLimit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmCustomerStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmCustomerStatus");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("datecreate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dateupdate");

                entity.Property(e => e.DescName)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Na)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Userupdate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("userupdate");
            });

            modelBuilder.Entity<UideskTrmCustomerUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmCustomerUpload");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AlamatIp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AlamatIP");

                entity.Property(e => e.AutoGenerateId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AutoGenerateID");

                entity.Property(e => e.BillingKota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillingProvinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Birth).HasColumnType("date");

                entity.Property(e => e.Cabang)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreateCustomer).HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Facebook)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GroupId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GroupID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Home)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Instagram)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.JenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Kaskus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Kota)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.NamaPerusahaan)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NetworkSocial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Noktp)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOKTP");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Nomor_Rekening");

                entity.Property(e => e.Office)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Others).IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("path");

                entity.Property(e => e.Pesan).IsUnicode(false);

                entity.Property(e => e.PolisNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Provinsi)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Relations)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SiteIP");

                entity.Property(e => e.SitePassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusUpdated)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telepon)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tittle)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Twitter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreateCustomer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmDashboardCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmDashboardCustomer");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.StatusData)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmDashboardVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmDashboardVendor");

                entity.Property(e => e.StatusData)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("VendorID");
            });

            modelBuilder.Entity<UideskTrmEmailAccount>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("UIDESK_TrmEmailAccounts");

                entity.Property(e => e.RecId).HasColumnName("rec_id");

                entity.Property(e => e.Clientid)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("clientid");

                entity.Property(e => e.Clientsecret)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("clientsecret");

                entity.Property(e => e.EmailServiceMethodId).HasColumnName("email_service_method_id");

                entity.Property(e => e.EmailSignitureId).HasColumnName("email_signiture_id");

                entity.Property(e => e.EncryptedConnection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("encrypted_connection")
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.EncryptedConnectionOut)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("encrypted_connection_out")
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.IncomingAccountName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incoming_account_name");

                entity.Property(e => e.IncomingAuthtype).HasColumnName("incoming_authtype");

                entity.Property(e => e.IncomingBackUp)
                    .IsUnicode(false)
                    .HasColumnName("incoming_back_up");

                entity.Property(e => e.IncomingPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incoming_password");

                entity.Property(e => e.IncomingPort)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incoming_port")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.IncomingServer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incoming_server");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NeedLogin)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OutgoingAccountName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("outgoing_account_name");

                entity.Property(e => e.OutgoingBackUp)
                    .IsUnicode(false)
                    .HasColumnName("outgoing_back_up");

                entity.Property(e => e.OutgoingPassword)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("outgoing_password");

                entity.Property(e => e.OutgoingPort)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("outgoing_port")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.OutgoingServer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("outgoing_server");

                entity.Property(e => e.PublicUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("public_url");

                entity.Property(e => e.ServerProfileId).HasColumnName("server_profile_id");

                entity.Property(e => e.ServerProtocol)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("server_protocol");

                entity.Property(e => e.ServerProtocolOut)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("server_protocol_out");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmEscalationIndividu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmEscalationIndividu");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Notifikasi)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TrxDateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TrxDepartment)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TrxFlag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TrxInteractionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TrxInteractionID");

                entity.Property(e => e.TrxUserCreate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TrxUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmFilterDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmFilterDate");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Enddate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENDDATE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Startdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STARTDATE");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<UideskTrmForgotPassword>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmForgotPassword");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_CREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.Encrypt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENCRYPT");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<UideskTrmHoliday>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmHolidays");

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("END_DATE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<UideskTrmJumlahFilter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmJumlahFilter");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Jumlah).HasColumnName("JUMLAH");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<UideskTrmMappingAccount>(entity =>
            {
                entity.ToTable("UIDESK_TrmMappingAccount");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FlagChannel)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProductChannel)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsernameThirdParty)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.UsernameUidesk)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmMaxHandle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmMaxHandle");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.MaxHandle).HasColumnName("max_handle");
            });

            modelBuilder.Entity<UideskTrmProductName>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmProductName");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmReasonCall>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmReasonCall");

                entity.Property(e => e.Color)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("color");

                entity.Property(e => e.Datecreate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Kode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.ReasonCall)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrmReasonCallParamater>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmReasonCallParamater");

                entity.Property(e => e.CallCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_created");

                entity.Property(e => e.CallDated)
                    .HasColumnType("datetime")
                    .HasColumnName("call_dated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallJumlah)
                    .HasColumnName("call_jumlah")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrmSosialMedium>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmSosialMedia");

                entity.Property(e => e.AccountCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("account_create");

                entity.Property(e => e.AccountDate)
                    .HasColumnType("datetime")
                    .HasColumnName("account_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.AccountPassword)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("account_password");

                entity.Property(e => e.AccountStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_status");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_type");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrmStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrmStatus");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.ValueStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VALUE_STATUS");
            });

            modelBuilder.Entity<UideskTrxAgentProductCampaign>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxAgentProductCampaign");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("agent_name");

                entity.Property(e => e.AuxId)
                    .HasColumnName("AuxID")
                    .HasDefaultValueSql("((9))");

                entity.Property(e => e.ChannelName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("channel_name");

                entity.Property(e => e.Channelid).HasColumnName("channelid");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("created_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("createdby");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Login).HasDefaultValueSql("((0))");

                entity.Property(e => e.Maxhandle)
                    .HasColumnName("maxhandle")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NowHandleToday).HasDefaultValueSql("((0))");

                entity.Property(e => e.Nowhandle)
                    .HasColumnName("nowhandle")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Proces).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("product_campaign");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("product_id");
            });

            modelBuilder.Entity<UideskTrxAux>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxAux");

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AuxDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuxDateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AuxDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AuxEndDate).HasColumnType("datetime");

                entity.Property(e => e.AuxId).HasColumnName("AuxID");

                entity.Property(e => e.AuxState).HasDefaultValueSql("((0))");

                entity.Property(e => e.AuxUserName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrxBlending>(entity =>
            {
                entity.ToTable("UIDESK_Trx_Blending");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ChannelId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChannelID");

                entity.Property(e => e.ChannelName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrxEmailDetail>(entity =>
            {
                entity.ToTable("UIDESK_TrxEmailDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEUPDATE");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION")
                    .HasDefaultValueSql("('OUT')");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.EmbedName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMBED_NAME");

                entity.Property(e => e.Encode)
                    .HasColumnType("text")
                    .HasColumnName("ENCODE");

                entity.Property(e => e.Filename)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("FILENAME");

                entity.Property(e => e.Filesize)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FILESIZE");

                entity.Property(e => e.Filetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FILETYPE");

                entity.Property(e => e.Flag)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.FlagEvent)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_EVENT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Forward)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FORWARD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IvcId).HasColumnName("IVC_ID");

                entity.Property(e => e.Ticketnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TICKETNUMBER");

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Url)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("USERCREATE");
            });

            modelBuilder.Entity<UideskTrxEmailSendingResult>(entity =>
            {
                entity.HasKey(e => e.IvcId);

                entity.ToTable("UIDESK_TrxEmailSendingResult");

                entity.Property(e => e.IvcId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.SentDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<UideskTrxInboxEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxInboxEmail");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.Cnt).HasColumnName("CNT");

                entity.Property(e => e.CompId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.DateBlending)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_BLENDING");

                entity.Property(e => e.Datereceive)
                    .HasColumnType("datetime")
                    .HasColumnName("datereceive");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Ecc1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ecc1");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FlagHandling)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_HANDLING")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FlagingEmailReply)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAGING_EMAIL_REPLY")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationID");

                entity.Property(e => e.OriginalTime)
                    .HasColumnType("datetime")
                    .HasColumnName("original_time");

                entity.Property(e => e.Path).IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RefID");

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<UideskTrxLogReleaseLogin>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxLogReleaseLogin");

                entity.Property(e => e.ReleaseCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("release_created");

                entity.Property(e => e.ReleaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("release_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReleaseId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("release_id");

                entity.Property(e => e.ReleaseType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("release_type");

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("release_user");
            });

            modelBuilder.Entity<UideskTrxLoginActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxLoginActivity");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LoginBrowser)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginChannel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoginDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LoginDescription)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId).HasColumnName("LoginID");

                entity.Property(e => e.LoginIpaddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LoginIPAddress");

                entity.Property(e => e.LoginPassword)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LoginUserName)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UideskTrxOutboundCallStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxOutboundCallStatus");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("createdby");

                entity.Property(e => e.Createddate)
                    .HasColumnType("datetime")
                    .HasColumnName("createddate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<UideskTrxOutboundDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxOutboundDetail");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallCustomerType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_customer_type");

                entity.Property(e => e.CallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallDescriptionDetail)
                    .IsUnicode(false)
                    .HasColumnName("call_description_detail");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallOutboundId).HasColumnName("call_outbound_id");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_reason");

                entity.Property(e => e.CallReasonDetail)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_reason_detail");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.CallTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_number");

                entity.Property(e => e.CallTicketStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_status");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrxOutboundFund>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxOutbound_Fund");

                entity.Property(e => e.CallCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_created");

                entity.Property(e => e.CallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallJenisInvestasi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_investasi");

                entity.Property(e => e.CallPersentaseAlokasi)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_persentase_alokasi");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallUploadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrxOutboundHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxOutboundHeader");

                entity.Property(e => e.CallAddress)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_address");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallApproveBy)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_approve_by");

                entity.Property(e => e.CallApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_approve_date");

                entity.Property(e => e.CallBiayaAkuisisi1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_biaya_akuisisi_1");

                entity.Property(e => e.CallBiayaAkuisisi1Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_1_add");

                entity.Property(e => e.CallBiayaAkuisisi2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_biaya_akuisisi_2");

                entity.Property(e => e.CallBiayaAkuisisi2Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_2_add");

                entity.Property(e => e.CallBiayaAkuisisi3Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_3_add");

                entity.Property(e => e.CallBiayaAkuisisi4Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_4_add");

                entity.Property(e => e.CallBiayaAkuisisi5Add)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_biaya_akuisisi_5_add");

                entity.Property(e => e.CallCaraBayar)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_cara_bayar");

                entity.Property(e => e.CallCounting)
                    .HasColumnName("call_counting")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_created_by");

                entity.Property(e => e.CallCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_created_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallDescription)
                    .IsUnicode(false)
                    .HasColumnName("call_description");

                entity.Property(e => e.CallDistributionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_distribution_date");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallFlagHandle)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_flag_handle")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallFlagingNasabah)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_flaging_nasabah");

                entity.Property(e => e.CallJenisDarlink)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_darlink");

                entity.Property(e => e.CallJenisKelamin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_jenis_kelamin");

                entity.Property(e => e.CallManfaatTambahanRider)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_manfaat_tambahan_rider");

                entity.Property(e => e.CallModulType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_modul_type")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallNamaAhliWaris)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_ahli_waris");

                entity.Property(e => e.CallNamaProduct)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_product");

                entity.Property(e => e.CallNamaTenagaPenjualan)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tenaga_penjualan");

                entity.Property(e => e.CallNamaTertanggung)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tertanggung");

                entity.Property(e => e.CallName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallNominalCoi)
                    .HasColumnType("date")
                    .HasColumnName("call_nominal_COI");

                entity.Property(e => e.CallNominalCor)
                    .HasColumnType("date")
                    .HasColumnName("call_nominal_COR");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPolisNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallPremiDasarBerkala)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_premi_dasar_berkala");

                entity.Property(e => e.CallPremiTopup)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_premi_topup");

                entity.Property(e => e.CallProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_product_campaign");

                entity.Property(e => e.CallProductId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_product_id");

                entity.Property(e => e.CallReason)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_reason");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_selesai")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallTanggalDebet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_tanggal_debet");

                entity.Property(e => e.CallTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_number");

                entity.Property(e => e.CallTicketStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("call_ticket_status");

                entity.Property(e => e.CallUangPertanggungan)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("call_uang_pertanggungan");

                entity.Property(e => e.CallUploadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.CallUploadStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrxOutboundNamaAhliWari>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxOutbound_NamaAhliWaris");

                entity.Property(e => e.CallCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_created");

                entity.Property(e => e.CallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallNamaAhliWaris)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_ahli_waris");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallUploadId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrxOutboundReminder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxOutboundReminder");

                entity.Property(e => e.CallAgent)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_agent");

                entity.Property(e => e.CallCustomerType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_customer_type");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallOutboundId).HasColumnName("call_outbound_id");

                entity.Property(e => e.CallPhoneHome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_home");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPhoneOffice)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_office");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallProductCampaign)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_product_campaign");

                entity.Property(e => e.CallReminderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_reminder_date");

                entity.Property(e => e.CallReminderDescription)
                    .IsUnicode(false)
                    .HasColumnName("call_reminder_description");

                entity.Property(e => e.CallReminderStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_reminder_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallReminderSubject)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("call_reminder_subject");

                entity.Property(e => e.CallSelesai)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("call_selesai")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("call_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CallUploadId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrxOutboundRider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxOutbound_Rider");

                entity.Property(e => e.CallCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_created");

                entity.Property(e => e.CallDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallManfaat)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("call_manfaat");

                entity.Property(e => e.CallNominal)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("call_nominal");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallUploadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrxOutboundSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxOutbound_Summary");

                entity.Property(e => e.CallApiRows).HasColumnName("call_api_rows");

                entity.Property(e => e.CallUploadCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_created");

                entity.Property(e => e.CallUploadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("call_upload_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CallUploadFilename)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_filename");

                entity.Property(e => e.CallUploadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_id");

                entity.Property(e => e.CallUploadRows).HasColumnName("call_upload_rows");

                entity.Property(e => e.CallUploadType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("call_upload_type");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<UideskTrxSendEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxSendEmail");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.AttachmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_ID");

                entity.Property(e => e.Cnt)
                    .HasColumnName("CNT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Dateread)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEREAD");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Forward)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FORWARD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.IvcIdIn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID_IN");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RefID");

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<UideskTrxSendEmailBlast>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UIDESK_TrxSendEmailBlast");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.AttachmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_ID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Dateread)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEREAD");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.IvcIdIn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID_IN");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<UideskTrxSendEmailBlastResult>(entity =>
            {
                entity.HasKey(e => e.IvcId)
                    .HasName("PK_UIDESK_TrxSendEmailBlast");

                entity.ToTable("UIDESK_TrxSendEmailBlastResult");

                entity.Property(e => e.IvcId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.SentDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<UideskVendorTaskboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UIDESK_VendorTaskboard");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("channelid");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DetailComplaint).IsUnicode(false);

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Dispatch_user");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jenisnasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("jenisnasabah");

                entity.Property(e => e.Kirimemail)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("kirimemail");

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NamaPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NAMA_PELAPOR");

                entity.Property(e => e.NamePic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NamePIC");

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Nomorrekening)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nomorrekening");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhonePelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_PELAPOR");

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Skalaprioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("skalaprioritas");

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory2Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsedDaySla).HasColumnName("UsedDaySLA");

                entity.Property(e => e.UsedDaySlaok)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAOK");

                entity.Property(e => e.VendorId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VendorID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WarnSlanya)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WarnSLANya");

                entity.Property(e => e.WithinSla)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("WithinSLA");
            });

            modelBuilder.Entity<UideskViewReportingEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UIDESK_View_ReportingEmail");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.Datereceive)
                    .HasColumnType("datetime")
                    .HasColumnName("datereceive");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.IvcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.RefId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RefID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("users");

                entity.HasIndex(e => e.Email, "users_email_unique")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("email");

                entity.Property(e => e.EmailVerifiedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("email_verified_at");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("password");

                entity.Property(e => e.RememberToken)
                    .HasMaxLength(100)
                    .HasColumnName("remember_token");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<User1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("User1");

                entity.Property(e => e.Activity)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DivId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DivID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Icon)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MenuId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MenuID");

                entity.Property(e => e.MenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<User2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("User2");

                entity.Property(e => e.Activity)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.DivId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DivID");

                entity.Property(e => e.Icon)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.Param)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SubMenuId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SubMenuID");

                entity.Property(e => e.SubMenuName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<User3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("User3");

                entity.Property(e => e.DivId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DivID");

                entity.Property(e => e.MenuId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MenuID");

                entity.Property(e => e.MenuTreeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Param)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.SubMenuId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("SubMenuID");

                entity.Property(e => e.SubMenuIdtree)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SubMenuIDTree");

                entity.Property(e => e.Url)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<User4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("User4");

                entity.Property(e => e.Access)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LevelUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LevelUserID");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.MenuIdtree)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MenuIDTree");

                entity.Property(e => e.SubMenuId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubMenuID");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<UserSettingChannel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USER_SettingChannel");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DetailMenuName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MenuId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MenuID");

                entity.Property(e => e.Param)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SubMenuId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubMenuID");

                entity.Property(e => e.SubMenuName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V24jam>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_24jam");

                entity.Property(e => e.JamNya)
                    .HasMaxLength(14)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2DatakelolaSocialmediaBucket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_DATAKELOLA_SOCIALMEDIA_BUCKET");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.CommentId)
                    .HasMaxLength(450)
                    .IsUnicode(false)
                    .HasColumnName("comment_id");

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateDistribusi).HasColumnType("datetime");

                entity.Property(e => e.DateHandle).HasColumnType("datetime");

                entity.Property(e => e.DateReply).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Jenis)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusData)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NEW')");
            });

            modelBuilder.Entity<V2UideskAddressEmailService>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_UIDESK_AddressEmailService");

                entity.Property(e => e.Datecreate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATECREATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ADDRESS");

                entity.Property(e => e.EmailType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_TYPE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<V2UideskDatakelola>(entity =>
            {
                entity.ToTable("V2_UIDESK_DATAKELOLA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CompanyToken)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.UrlDatakelola)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2UideskReleaseOutboundSubmitLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_UIDESK_ReleaseOutboundSubmit_log");

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TransaksiId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TransaksiID");

                entity.Property(e => e.TransaksiTotal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransaksiValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2UideskSyncTableTicketAgent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_UIDESK_Sync_TableTicketAgent");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.SyncCreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sync_CreatedBy");

                entity.Property(e => e.SyncData)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Sync_Data");

                entity.Property(e => e.SyncDataThread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Sync_Data_Thread");

                entity.Property(e => e.SyncDateCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("Sync_DateCreated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SyncGroup)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sync_Group");

                entity.Property(e => e.SyncName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sync_Name");

                entity.Property(e => e.SyncSite)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sync_Site");

                entity.Property(e => e.SyncStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Sync_Status");

                entity.Property(e => e.SyncStatusThread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Sync_Status_Thread");

                entity.Property(e => e.SyncUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sync_UserName");
            });

            modelBuilder.Entity<V2UideskTableDashboardAgentMail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_UIDESK_TableDashboardAgentMail");

                entity.Property(e => e.Agent)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.EmailNotResponse)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailQiwing)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailReceived)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EmailResponse)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2UideskTrmLayer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_UIDESK_TrmLayer");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<V2UideskTrmMasterSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_UIDESK_TrmMasterSite");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Location)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Site)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<V2UideskTrmNomorWa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_UIDESK_TrmNomorWA");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.NomorWa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NomorWA");

                entity.Property(e => e.Site)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");
            });

            modelBuilder.Entity<V2UideskTrxTableDashboardOutboundDuration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V2_UIDESK_TrxTableDashboard_OutboundDuration");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.StatusAgent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VAdmin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_admin");

                entity.Property(e => e.ChannelInvision).HasMaxLength(128);
            });

            modelBuilder.Entity<VAllCustomerChannel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_AllCustomerChannel");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FlagChannel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ValueChannel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VAlldatatrx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_alldatatrx");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AlamatPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALAMAT_PELAPOR");

                entity.Property(e => e.Attch).IsUnicode(false);

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("channelid");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CompId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.ComplaintLevel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DateAgentResponse).HasColumnType("datetime");

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateCreateReal).HasColumnType("datetime");

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DetailComplaint).IsUnicode(false);

                entity.Property(e => e.DispatchDivisiTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispatch_divisi_tgl");

                entity.Property(e => e.DispatchTgl)
                    .HasColumnType("datetime")
                    .HasColumnName("Dispatch_tgl");

                entity.Property(e => e.DispatchType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Dispatch_user");

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_PELAPOR");

                entity.Property(e => e.ExtendId).HasColumnName("ExtendID");

                entity.Property(e => e.ExtendName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendSla).HasColumnName("ExtendSLA");

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.ExtractComplaint).IsUnicode(false);

                entity.Property(e => e.ExtractResponse).IsUnicode(false);

                entity.Property(e => e.FlagGroupTicket)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_GROUP_TICKET");

                entity.Property(e => e.FlagOutbound)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.GroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.GroupTicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdPenyebab)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdStatusPelapor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdTabel)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Idlevel3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDLevel3");

                entity.Property(e => e.IndividuId).HasColumnName("IndividuID");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.KirimEmail)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.KirimEmailLayer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Layer)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LayerCreateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LengthComplaint).HasColumnName("lengthComplaint");

                entity.Property(e => e.LengthResponse).HasColumnName("lengthResponse");

                entity.Property(e => e.LokasiPengaduan)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Na)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NamaPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NAMA_PELAPOR");

                entity.Property(e => e.NamaPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationID");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.OverClockSystem)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason).HasColumnType("text");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhonePelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_PELAPOR");

                entity.Property(e => e.Posting)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint).IsUnicode(false);

                entity.Property(e => e.Severity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Slaori).HasColumnName("SLAORI");

                entity.Property(e => e.SlaresponseAgent).HasColumnName("SLAResponseAgent");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StrPenerima)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.StrStatusPelapor)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory1ID");

                entity.Property(e => e.SubCategory1Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory21id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1ID");

                entity.Property(e => e.SubCategory21name)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2_1Name");

                entity.Property(e => e.SubCategory2Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory2ID");

                entity.Property(e => e.SubCategory2Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SubCategory3ID");

                entity.Property(e => e.SubCategory3Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TglKejadian).HasColumnType("date");

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketGroup)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketGroupName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSource)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("UnitID");

                entity.Property(e => e.UnitKerjaAgent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserClose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VendorID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VBtnEmailRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BTN_EMAIL_rpt");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGENT");

                entity.Property(e => e.Blanding)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("blanding");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Incoming)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("incoming");

                entity.Property(e => e.Outgoing)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("outgoing");
            });

            modelBuilder.Entity<VBtnHi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BTN_HIS");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AlamatPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALAMAT_PELAPOR");

                entity.Property(e => e.Bulan).HasColumnName("bulan");

                entity.Property(e => e.Cabang)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("channelid");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerUnit).HasMaxLength(255);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DetailComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Dispatch_user");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmailPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_PELAPOR");

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LokasiPengaduan).HasMaxLength(255);

                entity.Property(e => e.NamaPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NAMA_PELAPOR");

                entity.Property(e => e.NamePic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NamePIC");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhonePelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_PELAPOR");

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory2Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Tahun).HasColumnName("tahun");

                entity.Property(e => e.TanggalCloseSystem)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TanggalFilter).HasColumnType("date");

                entity.Property(e => e.TglKejadian)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Unitid)
                    .HasMaxLength(255)
                    .HasColumnName("unitid");

                entity.Property(e => e.UsedDaySla).HasColumnName("UsedDaySLA");

                entity.Property(e => e.UsedDaySlagroup)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAGroup");

                entity.Property(e => e.UsedDaySlaok)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAOK");

                entity.Property(e => e.WithinSla)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("WithinSLA");
            });

            modelBuilder.Entity<VChannel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_channel");

                entity.Property(e => e.ChannelInvision).HasMaxLength(128);

                entity.Property(e => e.DescriptionChannel)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VChartTicketLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ChartTicketLine");

                entity.Property(e => e.JamNya)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityOther).HasColumnName("Security & Other");

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VCreateTicketHour>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_CreateTicketHours");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JamNya)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VCustomerAllChannel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_CustomerAllChannel");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.FlagChannel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ValueChannel)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VDataThread>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_data_thread");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountContactId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AccountContactID");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.ThreadCustomerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VEmailNotifikasi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EmailNotifikasi");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.AttachmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_ID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Dateread)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEREAD");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.IvcIdIn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID_IN");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<VEmailOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_emailOUT");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.AttachmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ATTACHMENT_ID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Dra)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("dra");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.ExtractString).IsUnicode(false);

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<VEmailRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_EMAIL_rpt");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGENT");

                entity.Property(e => e.Blanding)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("blanding");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Incoming)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("incoming");

                entity.Property(e => e.Outgoing)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("outgoing");
            });

            modelBuilder.Entity<VEmailin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_emailin");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Dra)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("dra");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.Expr1).IsUnicode(false);

                entity.Property(e => e.Expr2).IsUnicode(false);

                entity.Property(e => e.ExtractString).IsUnicode(false);

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path).IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<VHiStoryTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_hiStoryTransaction");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateClose).HasMaxLength(30);

                entity.Property(e => e.DateCreate).HasMaxLength(30);

                entity.Property(e => e.DetailComplaint).IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysNumber)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason).HasColumnType("text");

                entity.Property(e => e.ResponComplaint).IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VInteraction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Interaction");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentCreate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DispatchTicket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToDept)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToLayer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToUserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.FirstCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdTabel)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InteractionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.OrganizationName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.ResponseComplaint)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Tanggal)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("tanggal");

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VLayerReady>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_layerReady");

                entity.Property(e => e.AgentCreateX)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToLayer)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NotaDinas)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UnitCase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitKerja)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VMasterReportLabel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_MasterReportLabel");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdBi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_BI");

                entity.Property(e => e.IdOjk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_OJK");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.NameReportBi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NameReportBI");

                entity.Property(e => e.NameReportOjk)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NameReportOJK");
            });

            modelBuilder.Entity<VParentNumberReporting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ParentNumber_Reporting");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint).HasColumnType("text");

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSlaReporting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SLA_Reporting");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerUnit)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.OverSlareal).HasColumnName("OverSLAReal");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsedDaySla).HasColumnName("UsedDaySLA");

                entity.Property(e => e.UsedDaySlaok)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAOK");

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WithinSla)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("WithinSLA");
            });

            modelBuilder.Entity<VSumComplaintLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SumComplaintLevel");

                entity.Property(e => e.Usercreate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("usercreate");
            });

            modelBuilder.Entity<VSumTodayCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SumTodayCategory");

                entity.Property(e => e.DayNya)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("dayNya");

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ticket)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UnitKerjaAgent)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSumYesterdayCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SumYesterdayCategory");

                entity.Property(e => e.DayNya)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("dayNya");

                entity.Property(e => e.Ticket)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VThreadReporting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Thread_Reporting");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountContactId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AccountContactID");

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateInbox).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.GenesysNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneChat)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.ThreadReason).HasColumnType("text");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TypeData)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Transaction");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint).HasColumnType("text");

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VUideskMultichatHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_UIDESK_MULTICHAT_HISTORY");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Agentname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Attachment)
                    .HasColumnType("text")
                    .HasColumnName("attachment")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.AttachmentInfo)
                    .HasColumnType("text")
                    .HasColumnName("attachment_info")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.ChatHeaderId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("chat_header_id");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("code")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.CompanyId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("CompanyID");

                entity.Property(e => e.CreatedAt).HasColumnName("created_at");

                entity.Property(e => e.HandleBy)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("handle_by");

                entity.Property(e => e.HasAttachment)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("has_attachment");

                entity.Property(e => e.HasSeen)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("has_seen");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("message")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.MessageId)
                    .HasColumnType("text")
                    .HasColumnName("message_id")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.ReplyTimeLapsed).HasColumnName("reply_time_lapsed");

                entity.Property(e => e.SenderId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("sender_id");

                entity.Property(e => e.SenderType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sender_type")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .HasComment("Latin1_General_CI_AS");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

                entity.Property(e => e.UserHandleId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("user_handle_id");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Latin1_General_CI_AS");
            });

            modelBuilder.Entity<VUmursosmed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_umursosmed");

                entity.Property(e => e.Total).HasColumnName("total");
            });

            modelBuilder.Entity<VVerbalToWrittenReporting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_VerbalToWritten_Reporting");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateLogWritten).HasColumnType("datetime");

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionLog).IsUnicode(false);

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.GenesysId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LogType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint).HasColumnType("text");

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewEmailReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_email_report");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.Blanding)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("blanding");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Emailcustomer)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("emailcustomer");

                entity.Property(e => e.Emailserver)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("emailserver");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Incoming)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("incoming");

                entity.Property(e => e.Outgoing)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("outgoing");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportMultichat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_Multichat");

                entity.Property(e => e.ChatId)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("ChatID");

                entity.Property(e => e.ChatType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.SenderName)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.SosmedAgent)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Sosmed_Agent");
            });

            modelBuilder.Entity<VtrxEmailTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VTrx_EmailTransaction");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.Agent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.AttachmentIvcid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AttachmentIVCID");

                entity.Property(e => e.Cnt).HasColumnName("CNT");

                entity.Property(e => e.CompId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CUSTOMER_ID");

                entity.Property(e => e.Dateblending)
                    .HasColumnType("datetime")
                    .HasColumnName("dateblending");

                entity.Property(e => e.Datereceive)
                    .HasColumnType("datetime")
                    .HasColumnName("datereceive");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Ebcc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EBCC");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.EbodyText)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_TEXT");

                entity.Property(e => e.Ecc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ECC");

                entity.Property(e => e.Ecc1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ecc1");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.FaxStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FAX_STATUS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GroupId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GroupID");

                entity.Property(e => e.Handled)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HANDLED");

                entity.Property(e => e.IvcId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.JenisEmailInternal)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL_INTERNAL");

                entity.Property(e => e.NumOfPages)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationID");

                entity.Property(e => e.OriginalTime)
                    .HasColumnType("datetime")
                    .HasColumnName("original_time");

                entity.Property(e => e.Path).IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Pictujuan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICTujuan");

                entity.Property(e => e.Reading)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Routed)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROUTED");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

           
          
            modelBuilder.Entity<BRAPriority>(entity =>
            {
                entity.ToTable("BRA_Priority");

               
                entity.HasKey(e => e.Id);

               
                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsRequired(false); 

                entity.Property(e => e.SLA)
                    .IsRequired(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(150)
                    .IsRequired(false); 

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .IsRequired(false); 

               
            });

            modelBuilder.Entity<BraNamaKantor>(entity =>
            {
                // Specify the table name
                entity.ToTable("BRA_Nama_Kantor");

                // Configure the primary key
                entity.HasKey(e => e.Id);

                // Configure properties
                entity.Property(e => e.NamaKantor)
                      .HasMaxLength(200)
                      .IsRequired(false); // Nullable

                entity.Property(e => e.Telepon)
                      .HasMaxLength(50)
                      .IsRequired(false); // Nullable

                entity.Property(e => e.Email)
                      .HasMaxLength(150)
                      .IsRequired(false); // Nullable

                entity.Property(e => e.CreatedBy)
                      .HasMaxLength(150)
                      .IsRequired(false); // Nullable

                entity.Property(e => e.CreatedDate)
                      .HasColumnType("datetime")
                      .IsRequired(false); // Nullable

                entity.Property(e => e.Alamat)
                      .HasMaxLength(1000)
                      .IsRequired(false); // Nullable
            });

            modelBuilder.Entity<VwAutoClosed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AutoClosed");

                entity.Property(e => e.CategoryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.EksekusiAutoClosed)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.JenisParam)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.LastDatInteraction).HasColumnType("datetime");

                entity.Property(e => e.RowNum).HasColumnName("row_num");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAutoClosedRfcStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AutoClosed_RFC_Status");

                entity.Property(e => e.CategoryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.EksekusiAutoClosed)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.JenisParam)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.LastDatInteraction).HasColumnType("datetime");

                entity.Property(e => e.RowNum).HasColumnName("row_num");

                entity.Property(e => e.Sla3).HasColumnName("SLA_3");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAutoClosedRfcStatusDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AutoClosed_RFC_Status_Doc");

                entity.Property(e => e.CategoryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.EksekusiAutoClosed)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.JenisParam)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false);

                entity.Property(e => e.LastDatInteraction).HasColumnType("datetime");

                entity.Property(e => e.RowNum).HasColumnName("row_num");

                entity.Property(e => e.Sla10).HasColumnName("SLA_10");

                entity.Property(e => e.Sla20).HasColumnName("SLA_20");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCampaignsDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_campaigns_data");

                entity.Property(e => e.CustId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustID");

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileAttach)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.GroupBlast)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idcampaigns).HasColumnName("IDCampaigns");

                entity.Property(e => e.MsgBlast).IsUnicode(false);

                entity.Property(e => e.NoWa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NoWA");

                entity.Property(e => e.StatusBlast)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwEmailList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmailList");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.JenisKategori)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.JenisNotif)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.JenisRelated)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LayerId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LayerID");

                entity.Property(e => e.RowNum).HasColumnName("row_num");

                entity.Property(e => e.UnitCaseId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UnitCaseID");
            });

            modelBuilder.Entity<VwEmailListRelease>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_EmailList_Release");

                entity.Property(e => e.JenisKategori)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.JenisNotif)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.JenisRelated)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LayerId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LayerID");

                entity.Property(e => e.RowNum).HasColumnName("row_num");
            });

            modelBuilder.Entity<VwInvChannel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_INV_CHANNEL");

                entity.Property(e => e.Inbound).HasColumnName("INBOUND");

                entity.Property(e => e.NameNya)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<VwJourneyTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_journey_ticket");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateGetSosmed).HasColumnType("datetime");

                entity.Property(e => e.DateNya)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FlagTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .IsRequired()
                    .HasMaxLength(650);

                entity.Property(e => e.ProfileId).HasColumnName("ProfileID");

                entity.Property(e => e.StatusType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwNotaDina>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_nota_dinas");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDisposition).HasColumnType("datetime");

                entity.Property(e => e.DatePosition).HasColumnType("datetime");

                entity.Property(e => e.Expr2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Expr3)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsiPesan)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.JudulNota)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.Keterangan).IsUnicode(false);

                entity.Property(e => e.LampiranNota)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.LastNotaPosition)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NomorNota)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.PenerimaNota)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.PerihalNota)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.SalinanDistribusi)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDisposition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusNota)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TanggalNota).HasColumnType("date");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserPosition)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwNotaDinasGroupby>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_nota_dinas_groupby");

                entity.Property(e => e.StatusDisposition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRSla>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_R_SLA");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerUnit)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.OverSlareal).HasColumnName("OverSLAReal");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UsedDaySla).HasColumnName("UsedDaySLA");

                entity.Property(e => e.UsedDaySlaok)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAOK");

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WithinSla)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("WithinSLA");
            });

            modelBuilder.Entity<VwRSlaNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_R_SLA_NEW");

                entity.Property(e => e.DateClose).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.OverSlanya).HasColumnName("OverSLANya");

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.StatusSla)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("StatusSLA");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwRfcMilestone>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_RFC_Milestone");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateResponse).HasColumnType("datetime");

                entity.Property(e => e.InteractionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwTempTodolist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_temp_todolist");

                entity.Property(e => e.AgentCreateX)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("channelid");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DetailComplaint).IsUnicode(false);

                entity.Property(e => e.DispatchToLayer)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Dispatch_user");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jenisnasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("jenisnasabah");

                entity.Property(e => e.Kirimemail)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("kirimemail");

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NamaPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NAMA_PELAPOR");

                entity.Property(e => e.NamePic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NamePIC");

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Nomorrekening)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nomorrekening");

                entity.Property(e => e.NotaDinas)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhonePelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_PELAPOR");

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Skalaprioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("skalaprioritas");

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory2Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UnitCase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitKerja)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsedDaySla).HasColumnName("UsedDaySLA");

                entity.Property(e => e.UsedDaySlaangka)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAAngka");

                entity.Property(e => e.UsedDaySlaok)
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAOK");

                entity.Property(e => e.VendorId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VendorID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WarnSlanya)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WarnSLANya");

                entity.Property(e => e.WithinSla)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("WithinSLA");
            });

            modelBuilder.Entity<VwTempTodolistTanpainteraction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_temp_todolist_tanpainteraction");

                entity.Property(e => e.AgentCreateX)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Channelid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("channelid");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DetailComplaint).IsUnicode(false);

                entity.Property(e => e.DispatchToLayer)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Dispatch_user");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jenisnasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("jenisnasabah");

                entity.Property(e => e.Kirimemail)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("kirimemail");

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NamaPelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NAMA_PELAPOR");

                entity.Property(e => e.NamePic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NamePIC");

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.Nomorrekening)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nomorrekening");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhonePelapor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PHONE_PELAPOR");

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Skalaprioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("skalaprioritas");

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory1Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory2Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategory3Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SumberInformasi)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UnitCase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitKerja)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsedDaySla).HasColumnName("UsedDaySLA");

                entity.Property(e => e.UsedDaySlaangka)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAAngka");

                entity.Property(e => e.UsedDaySlaok)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAOK");

                entity.Property(e => e.VendorId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VendorID");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WarnSlanya)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WarnSLANya");

                entity.Property(e => e.WithinSla)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("WithinSLA");
            });

            modelBuilder.Entity<VwTinteraction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_tinteraction");

                entity.Property(e => e.AgentCreate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgentCreateX)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DispatchNota)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchTicket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToDept)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToLayer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToUserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchTypeName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchValueName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.FirstCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InteractionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.NotaDinas)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseComplaint).IsRequired();

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwTinteractionNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_tinteraction_new");

                entity.Property(e => e.AgentCreate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgentCreateX).IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DispatchNota)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchTicket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToDept)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToLayer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToUserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchTypeName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchValueName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.FirstCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InteractionId).HasColumnName("InteractionID");

                entity.Property(e => e.InteractionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LengthResponse).HasColumnName("lengthResponse");

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.ResponseComplaint).IsRequired();

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TanggalNya)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwUrlIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_url_in");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.IvcId).HasColumnName("IVC_ID");

                entity.Property(e => e.Url)
                    .IsUnicode(false)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<VwUrlOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_url_out");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.IvcId).HasColumnName("IVC_ID");

                entity.Property(e => e.Url)
                    .IsUnicode(false)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<VwWagentListconversation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_wagent_listconversation");

                entity.Property(e => e.ASenderName)
                    .HasMaxLength(255)
                    .HasColumnName("aSenderName");

                entity.Property(e => e.ConversationId).HasColumnName("ConversationID");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.Nomor)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("nomor");

                entity.Property(e => e.SenderName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.StatusWa)
                    .HasMaxLength(255)
                    .HasColumnName("StatusWA");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.WaAccount)
                    .HasMaxLength(255)
                    .HasColumnName("WA_Account");

                entity.Property(e => e.WaMWhatsappAccountId).HasColumnName("WA_mWhatsapp_account_id");

                entity.Property(e => e.Wid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("wid");
            });

            modelBuilder.Entity<VwWrittenVerbal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_WrittenVerbal");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Logic)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.NameExtend)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RowNum).HasColumnName("row_num");

                entity.Property(e => e.RunningSla).HasColumnName("RunningSLA");

                entity.Property(e => e.SlaExtend).HasColumnName("SLA_EXTEND");

                entity.Property(e => e.SlaLogic).HasColumnName("SLA_LOGIC");

                entity.Property(e => e.SlaSub3).HasColumnName("SLA_SUB3");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WbAllGetDataaux>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WB_AllGetDATAAux");

                entity.Property(e => e.Col1)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col10)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col12)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col13)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col14)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col15)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col2)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col3)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col4)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col5)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col6)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col7)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col8)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col9)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WbAllGetDataeng>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WB_AllGetDATAEng");

                entity.Property(e => e.Col1)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col10)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col12)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col13)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col14)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col15)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col2)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col3)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col4)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col5)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col6)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col7)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col8)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col9)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WbAllGetDataind>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WB_AllGetDATAInd");

                entity.Property(e => e.Col1)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col10)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col12)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col13)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col14)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col15)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col2)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col3)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col4)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col5)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col6)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col7)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col8)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col9)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WbAllGetDataout>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WB_AllGetDATAOut");

                entity.Property(e => e.Col1)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col10)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col12)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col13)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col14)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col15)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col2)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col3)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col4)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col5)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col6)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col7)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col8)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col9)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WbAllGetDatasum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WB_AllGetDATASum");

                entity.Property(e => e.Col1)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col10)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col12)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col13)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col14)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col15)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col2)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col3)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col4)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col5)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col6)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col7)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col8)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col9)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WbAllGetDatum>(entity =>
            {
                entity.ToTable("WB_AllGetDATA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Col1)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col10)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col12)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col13)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col14)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col15)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col2)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col3)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col4)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col5)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col6)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col7)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col8)
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.Col9)
                    .HasMaxLength(550)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WbInboundPrio>(entity =>
            {
                entity.ToTable("WB_InboundPrio");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.AuxReason)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EmptyNya)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Extension)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idcms)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("IDCMS");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LoginID");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.StateNya)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TimeNya)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WbInboundUwallboard>(entity =>
            {
                entity.ToTable("WB_InboundUwallboard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.AuxReason)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EmptyNya)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Extension)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idcms)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("IDCMS");

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LoginID");

                entity.Property(e => e.Na)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NA");

                entity.Property(e => e.StateNya)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TimeNya)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WellTrxDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Well_TrxDashboard");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<XtraLoginActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("XtraLoginActivity");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<XtraRepotCallHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("XtraRepot_CallHistory");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AGENT");

                entity.Property(e => e.Callid)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CALLID");

                entity.Property(e => e.Calltype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CALLTYPE");

                entity.Property(e => e.Customerid)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERID");

                entity.Property(e => e.Duration)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("DURATION");

                entity.Property(e => e.Endcall)
                    .HasColumnType("datetime")
                    .HasColumnName("ENDCALL");

                entity.Property(e => e.Ext)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EXT");

                entity.Property(e => e.Id)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Phoneno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PHONENO");

                entity.Property(e => e.Startcall)
                    .HasColumnType("datetime")
                    .HasColumnName("STARTCALL");

                entity.Property(e => e.Statuscall)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("STATUSCALL");

                entity.Property(e => e.Ticketid)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TICKETID");

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("USERNAME");
            });

            modelBuilder.Entity<_4ReportAux>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_Aux");

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AuxAgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuxDate).HasColumnType("datetime");

                entity.Property(e => e.AuxDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AuxEndDate).HasColumnType("datetime");

                entity.Property(e => e.AuxId).HasColumnName("AuxID");

                entity.Property(e => e.AuxInterval)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AuxSiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuxType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuxUserName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportBaseTrx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_base_trx");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CusStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateSolved).HasColumnType("datetime");

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Divisi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Hp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HP");

                entity.Property(e => e.JenisNasabah)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NewClosedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NewDateClosed).HasColumnType("datetime");

                entity.Property(e => e.NewDateSolved).HasColumnType("datetime");

                entity.Property(e => e.NewStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NewUserSolved)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.No)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentChild)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberCreated)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentNumberDate).HasColumnType("datetime");

                entity.Property(e => e.ParentNumberId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ParentNumberID");

                entity.Property(e => e.ParentReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseUser)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint).HasColumnType("text");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SkalaPrioritas)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla).HasColumnName("SLA");

                entity.Property(e => e.StrPenyebab)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketPosition)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportChat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_Chat");

                entity.Property(e => e.ChatId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ChatID");

                entity.Property(e => e.ChatType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Messages).IsUnicode(false);

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SenderName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SosmedAgent)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Sosmed_Agent");

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_email");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.Datereceive)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("datereceive");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.EbodyHtml)
                    .IsUnicode(false)
                    .HasColumnName("EBODY_HTML");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.IvcId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.RefId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RefID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<_4ReportEmailResponseTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_EmailResponseTime");

                entity.Property(e => e.Agent)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("agent");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DateReply).HasColumnType("datetime");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTION");

                entity.Property(e => e.Efrom)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("EFROM");

                entity.Property(e => e.EmailDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Email_Date");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Esubject)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ESUBJECT");

                entity.Property(e => e.Eto)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ETO");

                entity.Property(e => e.IvcId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IVC_ID");

                entity.Property(e => e.JenisEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JENIS_EMAIL");

                entity.Property(e => e.RefId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RefID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<_4ReportFb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_FB");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountComment)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountReply)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateComment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DatePost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateReply)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.MessageComment).IsUnicode(false);

                entity.Property(e => e.MessageReply).IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportIg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_IG");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountComment)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountReply)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateComment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DatePost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateReply)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.MessageComment).IsUnicode(false);

                entity.Property(e => e.MessageReply).IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportInteraction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_interaction");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentCreate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Channel)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DispatchNota)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchTicket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToDept)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToLayer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchToUserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchTypeName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchValueName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExtendStatusId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusID");

                entity.Property(e => e.ExtendStatusSla)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExtendStatusSLA");

                entity.Property(e => e.FirstCreate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdTabel)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("idTabel");

                entity.Property(e => e.InteractionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelUserNew)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leveluser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEVELUSER");

                entity.Property(e => e.Nik)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.OrganizationName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_NAME");

                entity.Property(e => e.ResponseComplaint).IsRequired();

                entity.Property(e => e.SiteId)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SiteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Tanggal)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("tanggal");

                entity.Property(e => e.ThreadId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketSourceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportMention>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_Mention");

                entity.Property(e => e.DateMention)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MentionType)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MessageMention).IsUnicode(false);

                entity.Property(e => e.ProfileAccount)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportOutbound>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_outbound");

                entity.Property(e => e.CallAgentName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_agent_name");

                entity.Property(e => e.CallCreated)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Call_Created");

                entity.Property(e => e.CallCreatedDate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_created_date");

                entity.Property(e => e.CallDescriptionDetail)
                    .IsUnicode(false)
                    .HasColumnName("call_description_detail");

                entity.Property(e => e.CallEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_email");

                entity.Property(e => e.CallNamaProduct)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_product");

                entity.Property(e => e.CallNamaTenagaPenjualan)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("call_nama_tenaga_penjualan");

                entity.Property(e => e.CallName)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("call_name");

                entity.Property(e => e.CallPhoneNumber)
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("call_phone_number");

                entity.Property(e => e.CallPolisNumber)
                    .HasMaxLength(650)
                    .IsUnicode(false)
                    .HasColumnName("call_polis_number");

                entity.Property(e => e.CallReasonDetail)
                    .IsUnicode(false)
                    .HasColumnName("call_reason_detail");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("call_status");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportSla>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_sla");

                entity.Property(e => e.AccountId)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound).IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryName).IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy).IsUnicode(false);

                entity.Property(e => e.ClosedDate).IsUnicode(false);

                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.CreatedDate).IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.CustomerUnit).IsUnicode(false);

                entity.Property(e => e.DateClose).IsUnicode(false);

                entity.Property(e => e.DateCreate).IsUnicode(false);

                entity.Property(e => e.DateSolved).IsUnicode(false);

                entity.Property(e => e.DateSolvedDisplay).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.LastResponseBy)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).IsUnicode(false);

                entity.Property(e => e.Level1).IsUnicode(false);

                entity.Property(e => e.Level2).IsUnicode(false);

                entity.Property(e => e.Level3).IsUnicode(false);

                entity.Property(e => e.Nik)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.No).IsUnicode(false);

                entity.Property(e => e.NomorRekening)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OverSlareal)
                    .IsUnicode(false)
                    .HasColumnName("OverSLAReal");

                entity.Property(e => e.PhoneNumber).IsUnicode(false);

                entity.Property(e => e.ResponComplaint).IsUnicode(false);

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sla)
                    .IsUnicode(false)
                    .HasColumnName("SLA");

                entity.Property(e => e.ThreadId)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber).IsUnicode(false);

                entity.Property(e => e.TicketStatus).IsUnicode(false);

                entity.Property(e => e.UsedDaySla)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLA");

                entity.Property(e => e.UsedDaySlaok)
                    .IsUnicode(false)
                    .HasColumnName("UsedDaySLAOK");

                entity.Property(e => e.UserSolved).IsUnicode(false);

                entity.Property(e => e.Username).IsUnicode(false);

                entity.Property(e => e.WithinSla)
                    .IsUnicode(false)
                    .HasColumnName("WithinSLA");
            });

            modelBuilder.Entity<_4ReportStaff>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_staff");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.AccountInbound)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentName).IsUnicode(false);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Channel_Code");

                entity.Property(e => e.Cif)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ClosedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerUnit)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateClose)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateClosedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreatedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateSolvedDisplay)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.GenesysId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GenesysID");

                entity.Property(e => e.LastResponseBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastResponseDate).HasColumnType("datetime");

                entity.Property(e => e.Level1)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level2)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Level3)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LoginID");

                entity.Property(e => e.Nik)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NIK");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ResponComplaint)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SolvedDate).HasColumnType("datetime");

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatus)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UserSolved)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportThread>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_thread");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountContactId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AccountContactID");

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.Cif)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateInbox).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.GenesysNumber)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneChat)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SiteName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Subject).IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TypeData)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportThreadNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_thread_New");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountContactId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AccountContactID");

                entity.Property(e => e.AgentGroup)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AgentGroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AgentId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("AgentID");

                entity.Property(e => e.Cif)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateInbox).HasColumnType("datetime");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.Datesolving).HasColumnType("datetime");

                entity.Property(e => e.GenesysNumber)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneChat)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Subject).IsUnicode(false);

                entity.Property(e => e.ThreadId)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnName("ThreadID");

                entity.Property(e => e.TicketNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TypeData)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Username)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValueThread)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<_4ReportTw>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("4_Report_TW");

                entity.Property(e => e.Account)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountComment)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountReply)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DateComment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DatePost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateReply)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HeaderSosmed)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.MessageComment).IsUnicode(false);

                entity.Property(e => e.MessageReply).IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BraNamaPerusahaan>(entity =>
            {
                entity.ToTable("BRA_Nama_Perusahaan");

                entity.HasKey(e => e.Id); // Define the primary key

                entity.Property(e => e.Id)
                    .IsRequired();

                entity.Property(e => e.AccountID)
                   // .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PerusahaanID)
                    //.IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Nama_Perusahaan)
                   // .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NPWP)
                   // .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NomorTelepon)
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    //.IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Type)
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    //.IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreatedDate)
                    //.IsRequired()
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CustomerChannel>(entity =>
            {
                entity.ToTable("SML_mCustomerChannel");

                entity.HasKey(e => e.ID);

                entity.Property(e => e.CustomerID)
                    .HasMaxLength(50)
                    .IsRequired(false); // Adjust if needed

                entity.Property(e => e.FlagChannel)
                    .HasMaxLength(30)
                    .IsRequired(false); // Adjust if needed

                entity.Property(e => e.ValueChannel)
                    .HasMaxLength(200)
                    .IsRequired(); // This field is NOT NULL in the database

                entity.Property(e => e.DateCreate)
                    .IsRequired(false); // Adjust if needed

                entity.Property(e => e.UserCreate)
                    .HasMaxLength(200)
                    .IsRequired(false); // Adjust if needed

                entity.Property(e => e.DateUpdate)
                    .IsRequired(false); // Adjust if needed

                entity.Property(e => e.UserUpdate)
                    .HasMaxLength(200)
                    .IsRequired(false); // Adjust if needed

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsRequired(false); // Adjust if needed
            });

            OnModelCreatingPartial(modelBuilder);


        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
